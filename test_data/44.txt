Since Ω-notation describes a lower bound, when we use it to bound the best-case running
time of an algorithm, by implication we also bound the running time of the algorithm on
arbitrary inputs as well. For example, the best-case running time of insertion sort is Ω(n),
which implies that the running time of insertion sort is Ω(n).
The running time of insertion sort therefore falls between Ω(n) and O(n2), since it falls
anywhere between a linear function of n and a quadratic function of n. Moreover, these
bounds are asymptotically as tight as possible: for instance, the running time of insertion sort
is not Ω(n2), since there exists an input for which insertion sort runs in Θ(n) time (e.g., when
the input is already sorted). It is not contradictory, however, to say that the worst-case running
time of insertion sort is Ω(n2), since there exists an input that causes the algorithm to take
Ω(n2) time. When we say that the running time (no modifier) of an algorithm is Ω(g(n)), we
mean that no matter what particular input of size n is chosen for each value of n, the running
time on that input is at least a constant times g(n), for sufficiently large n.
Asymptotic notation in equations and inequalities
We have already seen how asymptotic notation can be used within mathematical formulas.
For example, in introducing O-notation, we wrote "n = O(n2)." We might also write 2n2 + 3n
+ 1 = 2n2 + Θ(n). How do we interpret such formulas?
When the asymptotic notation stands alone on the right-hand side of an equation (or
inequality), as in n = O(n2), we have already defined the equal sign to mean set membership:
n O(n2). In general, however, when asymptotic notation appears in a formula, we interpret
it as standing for some anonymous function that we do not care to name. For example, the
formula 2n2 + 3n + 1 = 2n2 + Θ(n) means that 2n2 + 3n + 1 = 2n2 + f(n), where f(n) is some
function in the set Θ(n). In this case, f(n) = 3n + 1, which indeed is in Θ(n).
Using asymptotic notation in this manner can help eliminate inessential detail and clutter in an
equation. For example, in Chapter 2 we expressed the worst-case running time of merge sort
as the recurrence
T(n) = 2T (n/2) + Θ(n).
If we are interested only in the asymptotic behavior of T(n), there is no point in specifying all
the lower-order terms exactly; they are all understood to be included in the anonymous
function denoted by the term Θ(n).
The number of anonymous functions in an expression is understood to be equal to the number
of times the asymptotic notation appears. For example, in the expression

there is only a single anonymous function (a function of i). This expression is thus not the
same as O(1) + O(2) + . . . + O(n), which doesn't really have a clean interpretation.
In some cases, asymptotic notation appears on the left-hand side of an equation, as in
2n2 + Θ(n) = Θ(n2).

