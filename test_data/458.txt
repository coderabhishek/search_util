Vertex u is WHITE before time d[u], GRAY between time d[u] and time f [u], and BLACK
thereafter.
The following pseudocode is the basic depth-first-search algorithm. The input graph G may
be undirected or directed. The variable time is a global variable that we use for timestamping.
DFS(G)
1 for each vertex u
V [G]
2
do color[u] ← WHITE
3
π[u] ← NIL
4 time ← 0
5 for each vertex u
V [G]
6
do if color[u] = WHITE
7
then DFS-VISIT(u)
DFS-VISIT(u)
▹White vertex u has just been discovered.

1
2
3

color[u] ← GRAY
time ← time +1
d[u] time

4
5
6
7

for each v
Adj[u] ▹Explore edge(u, v).
do if color[v] = WHITE
then π[v] ← u
DFS-VISIT(v)

8

color[u] BLACK

9

f [u] ▹ time ← time +1

▹ Blacken u; it is finished.

Figure 22.4 illustrates the progress of DFS on the graph shown in Figure 22.2.

Figure 22.4: The progress of the depth-first-search algorithm DFS on a directed graph. As
edges are explored by the algorithm, they are shown as either shaded (if they are tree edges)
or dashed (otherwise). Nontree edges are labeled B, C, or F according to whether they are
back, cross, or forward edges. Vertices are timestamped by discovery time/finishing time.
Procedure DFS works as follows. Lines 1-3 paint all vertices white and initialize their π fields
to NIL. Line 4 resets the global time counter. Lines 5-7 check each vertex in V in turn and,
when a white vertex is found, visit it using DFS-VISIT. Every time DFS-VISIT(u) is called in
line 7, vertex u becomes the root of a new tree in the depth-first forest. When DFS returns,
every vertex u has been assigned a discovery time d[u] and a finishing time f [u].

