Every so often, the program saves the most recently generated xi value in the variable y.
Specifically, the values that are saved are the ones whose subscripts are powers of 2:
x1, x2, x4, x8, x16, .... .
Line 3 saves the value x1, and line 12 saves xk whenever i is equal to k. The variable k is
initialized to 2 in line 4, and k is doubled in line 13 whenever y is updated. Therefore, k
follows the sequence 1, 2, 4, 8, ... and always gives the subscript of the next value xk to be
saved in y.
Lines 8–10 try to find a factor of n, using the saved value of y and the current value of xi .
Specifically, line 8 computes the greatest common divisor d = gcd(y - xi, n). If d is a nontrivial
divisor of n (checked in line 9), then line 10 prints d.
This procedure for finding a factor may seem somewhat mysterious at first. Note, however,
that POLLARD-RHO never prints an incorrect answer; any number it prints is a nontrivial
divisor of n. POLLARD-RHO may not print anything at all, though; there is no guarantee that
it will produce any results. We shall see, however, that there is good reason to expect
POLLARD-RHO to print a factor p of n after
iterations of the while loop. Thus, if n is
composite, we can expect this procedure to discover enough divisors to factor n completely
after approximately n1/4 updates, since every prime factor p of n except possibly the largest
one is less than .
We begin our analysis of the behavior of this procedure by studying how long it takes a
random sequence modulo n to repeat a value. Since Zn is finite, and since each value in the
sequence (31.42) depends only on the previous value, the sequence (31.42) eventually repeats
itself. Once we reach an xi such that xi = xj for some j < i, we are in a cycle, since xi+1 = xj+1,
xi+2 = xj+2, and so on. The reason for the name "rho heuristic" is that, as Figure 31.7 shows, the
sequence x1, x2, ..., xj-1 can be drawn as the "tail" of the rho, and the cycle xj, xj+1, ..., xi as the
"body" of the rho.

Figure 31.7: Pollard's rho heuristic. (a) The values produced by the recurrence
mod
1387, starting with x1 = 2. The prime factorization of 1387 is 19 · 73. The heavy arrows
indicate the iteration steps that are executed before the factor 19 is discovered. The light
arrows point to unreached values in the iteration, to illustrate the "rho" shape. The shaded
values are the y values stored by POLLARD-RHO. The factor 19 is discovered upon reaching
x7 = 177, when gcd(63 - 177, 1387) = 19 is computed. The first x value that would be repeated
is 1186, but the factor 19 is discovered before this value is repeated. (b) The values produced

