be prime and to design h2 so that it always returns a positive integer less than m. For example,
we could choose m prime and let
h1(k) = k mod m,
h2(k) = 1 + (k mod m'),
where m' is chosen to be slightly less than m (say, m - 1). For example, if k = 123456, m =
701, and m' = 700, we have h1(k) = 80 and h2(k) = 257, so the first probe is to position 80, and
then every 257th slot (modulo m) is examined until the key is found or every slot is examined.
Double hashing improves over linear or quadratic probing in that Θ(m2) probe sequences are
used, rather than Θ(m), since each possible (h1(k), h2(k)) pair yields a distinct probe sequence.
As a result, the performance of double hashing appears to be very close to the performance of
the "ideal" scheme of uniform hashing.
Analysis of open-address hashing
Our analysis of open addressing, like our analysis of chaining, is expressed in terms of the
load factor α = n/m of the hash table, as n and m go to infinity. Of course, with open
addressing, we have at most one element per slot, and thus n ≤ m, which implies α ≤ 1.
We assume that uniform hashing is used. In this idealized scheme, the probe sequence h(k,
0), h(k, 1), ..., h(k, m - 1) used to insert or search for each key k is equally likely to be any
permutation of 0, 1, ..., m - 1 . Of course, a given key has a unique fixed probe sequence
associated with it; what is meant here is that, considering the probability distribution on the
space of keys and the operation of the hash function on the keys, each possible probe
sequence is equally likely.
We now analyze the expected number of probes for hashing with open addressing under the
assumption of uniform hashing, beginning with an analysis of the number of probes made in
an unsuccessful search.
Theorem 11.6
Given an open-address hash table with load factor α = n/m < 1, the expected number of probes
in an unsuccessful search is at most 1/(1-α), assuming uniform hashing.
Proof In an unsuccessful search, every probe but the last accesses an occupied slot that does
not contain the desired key, and the last slot probed is empty. Let us define the random
variable X to be the number of probes made in an unsuccessful search, and let us also define
the event Ai , for i = 1, 2, ..., to be the event that there is an ith probe and it is to an occupied
slot. Then the event {X ≥ i} is the intersection of events A1 ∩ A2 ∩ ··· ∩ Ai-1. We will bound Pr
{X ≥ i} by bounding Pr {A1 ∩ A2 ∩ ··· ∩ Ai-1}. By Exercise C.2-6,
Pr {A1 ∩ A2 ∩ ··· ∩ Ai-1} = Pr{A1} · Pr{A2 | A1} · Pr{A3 | A1 ∩ A2}
Pr{Ai-1 | A1 ∩ A2 ∩ ··· ∩ Ai-2}.

