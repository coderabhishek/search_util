34.5 NP-complete problems
NP-complete problems arise in diverse domains: boolean logic, graphs, arithmetic, network
design, sets and partitions, storage and retrieval, sequencing and scheduling, mathematical
programming, algebra and number theory, games and puzzles, automata and language theory,
program optimization, biology, chemistry, physics, and more. In this section, we shall use the
reduction methodology to provide NP-completeness proofs for a variety of problems drawn
from graph theory and set partitioning.
Figure 34.13 outlines the structure of the NP-completeness proofs in this section and Section
34.4. Each language in the figure is proved NP-complete by reduction from the language that
points to it. At the root is CIRCUIT-SAT, which we proved NP-complete in Theorem 34.7.

Figure 34.13: The structure of NP-completeness proofs in Sections 34.4 and 34.5. All proofs
ultimately follow by reduction from the NP-completeness of CIRCUIT-SAT.

34.5.1 The clique problem
A clique in an undirected graph G = (V, E) is a subset V' V of vertices, each pair of which is
connected by an edge in E. In other words, a clique is a complete subgraph of G. The size of a
clique is the number of vertices it contains. The clique problem is the optimization problem of
finding a clique of maximum size in a graph. As a decision problem, we ask simply whether a
clique of a given size k exists in the graph. The formal definition is
CLIQUE = { G, k

: G is a graph with a clique of size k}.

A naive algorithm for determining whether a graph G = (V, E) with |V| vertices has a clique of
size k is to list all k-subsets of V , and check each one to see whether it forms a clique. The
running time of this algorithm is
, which is polynomial if k is a constant. In general,
however, k could be near |V| /2, in which case the algorithm runs in superpolynomial time. As
one might suspect, an efficient algorithm for the clique problem is unlikely to exist. k
Theorem 34.11
The clique problem is NP-complete.

