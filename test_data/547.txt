with nonnegative edge weights, their algorithms run in O(V E*+V2 lg V) time and are
improvements over running Dijkstra's algorithm |V| times when |E*| = o(E).
Aho, Hopcroft, and Ullman [5] defined an algebraic structure known as a "closed semiring,"
which serves as a general framework for solving path problems in directed graphs. Both the
Floyd-Warshall algorithm and the transitive-closure algorithm from Section 25.2 are
instantiations of an all-pairs algorithm based on closed semirings. Maggs and Plotkin [208]
showed how to find minimum spanning trees using a closed semiring.

Chapter 26: Maximum Flow
Overview
Just as we can model a road map as a directed graph in order to find the shortest path from
one point to another, we can also interpret a directed graph as a "flow network" and use it to
answer questions about material flows. Imagine a material coursing through a system from a
source, where the material is produced, to a sink, where it is consumed. The source produces
the material at some steady rate, and the sink consumes the material at the same rate. The
"flow" of the material at any point in the system is intuitively the rate at which the material
moves. Flow networks can be used to model liquids flowing through pipes, parts through
assembly lines, current through electrical networks, information through communication
networks, and so forth.
Each directed edge in a flow network can be thought of as a conduit for the material. Each
conduit has a stated capacity, given as a maximum rate at which the material can flow through
the conduit, such as 200 gallons of liquid per hour through a pipe or 20 amperes of electrical
current through a wire. Vertices are conduit junctions, and other than the source and sink,
material flows through the vertices without collecting in them. In other words, the rate at
which material enters a vertex must equal the rate at which it leaves the vertex. We call this
property "flow conservation," and it is equivalent to Kirchhoff's Current Law when the
material is electrical current.
In the maximum-flow problem, we wish to compute the greatest rate at which material can be
shipped from the source to the sink without violating any capacity constraints. It is one of the
simplest problems concerning flow networks and, as we shall see in this chapter, this problem
can be solved by efficient algorithms. Moreover, the basic techniques used in maximum-flow
algorithms can be adapted to solve other network-flow problems.
This chapter presents two general methods for solving the maximum-flow problem. Section
26.1 formalizes the notions of flow networks and flows, formally defining the maximum-flow
problem. Section 26.2 describes the classical method of Ford and Fulkerson for finding
maximum flows. An application of this method, finding a maximum matching in an
undirected bipartite graph, is given in Section 26.3. Section 26.4 presents the push-relabel
method, which underlies many of the fastest algorithms for network-flow problems. Section
26.5 covers the "relabel-to-front" algorithm, a particular implementation of the push-relabel
method that runs in time O(V3). Although this algorithm is not the fastest algorithm known, it
illustrates some of the techniques used in the asymptotically fastest algorithms, and it is
reasonably efficient in practice.

