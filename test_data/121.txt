The HEAPSORT procedure takes time O(n lg n), since the call to BUILD-MAX-HEAP takes
time O(n) and each of the n - 1 calls to MAX-HEAPIFY takes time O(lg n).
Exercises 6.4-1
Using Figure 6.4 as a model, illustrate the operation of HEAPSORT on the array A =
2, 25, 7, 17, 20, 8, 4 .

5, 13,

Exercises 6.4-2
Argue the correctness of HEAPSORT using the following loop invariant:
•

At the start of each iteration of the for loop of lines 2-5, the subarray A[1 i] is a
max-heap containing the i smallest elements of A[1 n], and the subarray A[i + 1
n] contains the n - i largest elements of A[1 n], sorted.

Exercises 6.4-3
What is the running time of heapsort on an array A of length n that is already sorted in
increasing order? What about decreasing order?

Exercises 6.4-4
Show that the worst-case running time of heapsort is Ω(n lg n).

Exercises 6.4-5:
Show that when all elements are distinct, the best-case running time of heapsort is Ω(n lg n).

6.5 Priority queues
Heapsort is an excellent algorithm, but a good implementation of quicksort, presented in
Chapter 7, usually beats it in practice. Nevertheless, the heap data structure itself has
enormous utility. In this section, we present one of the most popular applications of a heap: its

