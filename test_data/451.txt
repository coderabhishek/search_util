The while loop of lines 10-18 iterates as long as there remain gray vertices, which are
discovered vertices that have not yet had their adjacency lists fully examined. This while loop
maintains the following invariant:
•

At the test in line 10, the queue Q consists of the set of gray vertices.

Although we won't use this loop invariant to prove correctness, it is easy to see that it holds
prior to the first iteration and that each iteration of the loop maintains the invariant. Prior to
the first iteration, the only gray vertex, and the only vertex in Q, is the source vertex s. Line
11 determines the gray vertex u at the head of the queue Q and removes it from Q. The for
loop of lines 12-17 considers each vertex v in the adjacency list of u. If v is white, then it has
not yet been discovered, and the algorithm discovers it by executing lines 14-17. It is first
grayed, and its distance d[v] is set to d[u]+1. Then, u is recorded as its parent. Finally, it is
placed at the tail of the queue Q. When all the vertices on u's adjacency list have been
examined, u is blackened in lines 11-18. The loop invariant is maintained because whenever a
vertex is painted gray (in line 14) it is also enqueued (in line 17), and whenever a vertex is
dequeued (in line 11) it is also painted black (in line 18).
The results of breadth-first search may depend upon the order in which the neighbors of a
given vertex are visited in line 12: the breadth-first tree may vary, but the distances d
computed by the algorithm will not. (See Exercise 22.2-4.)
Analysis
Before proving the various properties of breadth-first search, we take on the somewhat easier
job of analyzing its running time on an input graph G = (V, E). We use aggregate analysis, as
we saw in Section 17.1. After initialization, no vertex is ever whitened, and thus the test in
line 13 ensures that each vertex is enqueued at most once, and hence dequeued at most once.
The operations of enqueuing and dequeuing take O(1) time, so the total time devoted to queue
operations is O(V). Because the adjacency list of each vertex is scanned only when the vertex
is dequeued, each adjacency list is scanned at most once. Since the sum of the lengths of all
the adjacency lists is Θ(E), the total time spent in scanning adjacency lists is O(E). The
overhead for initialization is O(V), and thus the total running time of BFS is O(V + E). Thus,
breadth-first search runs in time linear in the size of the adjacency-list representation of G.
Shortest paths
At the beginning of this section, we claimed that breadth-first search finds the distance to each
reachable vertex in a graph G = (V, E) from a given source vertex s V. Define the shortestpath distance δ(s, v) from s to v as the minimum number of edges in any path from vertex s to
vertex v; if there is no path from s to v, then δ(s, v) = ∞. A path of length δ(s, v) from s to v is
said to be a shortest path[1] from s to v. Before showing that breadth-first search actually
computes shortest-path distances, we investigate an important property of shortest-path
distances.
Lemma 22.1
Let G = (V, E) be a directed or undirected graph, and let s
for any edge (u, v) E,

V be an arbitrary vertex. Then,

