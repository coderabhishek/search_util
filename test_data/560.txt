If f is a flow in a flow network G = (V, E) with source s and sink t, then the following
conditions are equivalent:
1. f is a maximum flow in G.
2. The residual network Gf contains no augmenting paths.
3. |f| = c(S, T) for some cut (S, T) of G.
Proof (1) (2): Suppose for the sake of contradiction that f is a maximum flow in G but that
Gf has an augmenting path p. Then, by Corollary 26.4, the flow sum f + fp, where fp is given
by equation (26.6), is a flow in G with value strictly greater than |f|, contradicting the
assumption that f is a maximum flow.
(2) (3): Suppose that Gf has no augmenting path, that is, that Gf contains no path from s to t.
Define
S = {v

V : there exists a path from s to v in Gf}

and T = V - S. The partition (S, T) is a cut: we have s S trivially and t ∉ S be cause there is
no path from s to t in Gf. For each pair of vertices u and v such that u S and v T, we have
f (u, v) = c(u, v), since otherwise (u, v) Ef, which would place v in set S. By Lemma 26.5,
therefore, |f| = f(S, T) = c(S, T).
(3) (1): By Corollary 26.6, |f| ≤ c(S, T) for all cuts (S, T). The condition |f| = c(S, T) thus
implies that f is a maximum flow.

The basic Ford-Fulkerson algorithm
In each iteration of the Ford-Fulkerson method, we find some augmenting path p and increase
the flow f on each edge of p by the residual capacity cf(p). The following implementation of
the method computes the maximum flow in a graph G = (V, E) by updating the flow f[u, v]
between each pair u, v of vertices that are connected by an edge.[1] If u and v are not
connected by an edge in either direction, we assume implicitly that f[u, v] = 0. The capacities
c(u, v) are assumed to be given along with the graph, and c(u, v) = 0 if (u, v) ∉ E. The
residual capacity cf(u, v) is computed in accordance with the formula (26.5). The expression
cf(p) in the code is actually just a temporary variable that stores the residual capacity of the
path p.
FORD-FULKERSON(G, s, t)
1 for each edge (u, v)
E[G]
2
do f[u, v] ← 0
3
f[v, u] ← 0
4 while there exists a path p from s to t in the residual network Gf
5
do cf(p) ← min {cf(u, v) : (u, v) is in p}
6
for each edge (u, v) in p
7
do f[u, v] ← f[u, v] + cf(p)
8
f[v, u] ← -f[u, v]

