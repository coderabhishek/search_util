Figure 33.4: The ordering among line segments at various vertical sweep lines. (a) We have a
>r c, a >t b, b >t c, a >r c, and b >u c. Segment d is comparable with no other segment shown.
(b) When segments e and f intersect, their orders are reversed: we have e >v f but f >w e. Any
sweep line (such as z) that passes through the shaded region has e and f consecutive in its total
order.
For any given x, the relation ">x" is a total order (see Section B.2) on segments that intersect
the sweep line at x. The order may differ for differing values of x, however, as segments enter
and leave the ordering. A segment enters the ordering when its left endpoint is encountered by
the sweep, and it leaves the ordering when its right endpoint is encountered.
What happens when the sweep line passes through the intersection of two segments? As
Figure 33.4(b) shows, their positions in the total order are reversed. Sweep lines v and w are
to the left and right, respectively, of the point of intersection of segments e and f, and we have
e >v f and f >w e. Note that because we assume that no three segments intersect at the same
point, there must be some vertical sweep line x for which intersecting segments e and f are
consecutive in the total order >x. Any sweep line that passes through the shaded region of
Figure 33.4(b), such as z, has e and f consecutive in its total order.
Moving the sweep line
Sweeping algorithms typically manage two sets of data:
1. The sweep-line status gives the relationships among the objects intersected by the
sweep line.
2. The event-point schedule is a sequence of x-coordinates, ordered from left to right,
that defines the halting positions of the sweep line. We call each such halting position
an event point. Changes to the sweep-line status occur only at event points.
For some algorithms (the algorithm asked for in Exercise 33.2-7, for example), the eventpoint schedule is determined dynamically as the algorithm progresses. The algorithm at hand,
however, determines the event points statically, based solely on simple properties of the input
data. In particular, each segment endpoint is an event point. We sort the segment endpoints by
increasing x-coordinate and proceed from left to right. (If two or more endpoints are
covertical, i.e., they have the same x-coordinate, we break the tie by putting all the covertical
left endpoints before the covertical right endpoints. Within a set of covertical left endpoints,
we put those with lower y-coordinates first, and do the same within a set of covertical right
endpoints.) We insert a segment into the sweep-line status when its left endpoint is
encountered, and we delete it from the sweep-line status when its right endpoint is
encountered. Whenever two segments first become consecutive in the total order, we check
whether they intersect.
The sweep-line status is a total order T, for which we require the following operations:
â€¢

INSERT(T, s): insert segment s into T.

