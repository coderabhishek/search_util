c. Show how to compute the weighted median in Θ(n) worst-case time using a lineartime median algorithm such as SELECT from Section 9.3.
The post-office location problem is defined as follows. We are given n points p1, p2, ..., pn
with associated weights w1, w2, ..., wn. We wish to find a point p (not necessarily one of the
input points) that minimizes the sum
, where d(a, b) is the distance between points
a and b.
d. Argue that the weighted median is a best solution for the 1-dimensional post-office
location problem, in which points are simply real numbers and the distance between
points a and b is d(a, b) = |a - b|.
e. Find the best solution for the 2-dimensional post-office location problem, in which the
points are (x, y) coordinate pairs and the distance between points a = (x1, y1) and b =
(x2, y2) is the Manhattan distance given by d(a, b) = |x1 - x2| + |y1 - y2|.

Problems 9-3: Small order statistics
The worst-case number T(n) of comparisons used by SELECT to select the ith order statistic
from n numbers was shown to satisfy T(n) = Θ(n), but the constant hidden by the Θ-notation
is rather large. When i is small relative to n, we can implement a different procedure that uses
SELECT as a subroutine but makes fewer comparisons in the worst case.
a. Describe an algorithm that uses Ui(n) comparisons to find the ith smallest of n
elements, where

(Hint: Begin with ⌊n/2⌋ disjoint pairwise comparisons, and recurse on the set
containing the smaller element from each pair.)
b. Show that, if i < n/2, then Ui(n) = n + O(T (2i) lg(n/i)).
c. Show that if i is a constant less than n/2, then Ui(n) = n + O(lg n).
d. Show that if i = n/k for k ≥ 2, then Ui(n) = n + O(T (2n/k) lg k).

[1]

Because of our assumption that the numbers are distinct, we can say "greater than" and "less
than" without being concerned about equality.

Chapter notes
The worst-case linear-time median-finding algorithm was devised by Blum, Floyd, Pratt,
Rivest, and Tarjan [43]. The fast average-time version is due to Hoare [146]. Floyd and Rivest

