running time is Θ((n - m +1)m). Based on certain assumptions, however, its average-case
running time is better.
This algorithm makes use of elementary number-theoretic notions such as the equivalence of
two numbers modulo a third number. You may want to refer to Section 31.1 for the relevant
definitions.
For expository purposes, let us assume that Σ = {0, 1, 2, . . . , 9}, so that each character is a
decimal digit. (In the general case, we can assume that each character is a digit in radix-d
notation, where d = |Σ|.) We can then view a string of k consecutive characters as representing
a length-k decimal number. The character string 31415 thus corresponds to the decimal
number 31,415. Given the dual interpretation of the input characters as both graphical
symbols and digits, we find it convenient in this section to denote them as we would digits, in
our standard text font.
Given a pattern P[1 m], we let p denote its corresponding decimal value. In a similar
manner, given a text T [1 n], we let ts denote the decimal value of the length-m substring
T[s + 1 s + m], for s = 0, 1, . . . , n - m. Certainly, ts = p if and only if T [s + 1 s + m] =
P[1 m]; thus, s is a valid shift if and only if ts = p. If we could compute p in time Θ(m) and
all the ts values in a total of Θ(n - m + 1) time,[1] then we could determine all valid shifts s in
time Θ(m) + Θ(n - m + 1) = Θ(n) by comparing p with each of the ts's. (For the moment, let's
not worry about the possibility that p and the ts's might be very large numbers.)
We can compute p in time Θ(m) using Horner's rule (see Section 30.1):
p = P[m] + 10 (P[m - 1] + 10(P[m - 2] + · · · + 10(P[2] + 10P[1]) )).
The value t0 can be similarly computed from T [1

m] in time Θ(m).

To compute the remaining values t1, t2, . . . , tn-m in time Θ(n - m), it suffices to observe that
ts+1 can be computed from ts in constant time, since
(32.1)
For example, if m = 5 and ts = 31415, then we wish to remove the high-order digit T [s + 1] =
3 and bring in the new low-order digit (suppose it is T [s + 5 + 1] = 2) to obtain
ts+1 = 10(31415 - 10000 · 3) + 2
= 14152.
Subtracting 10m-1 T[s + 1] removes the high-order digit from ts, multiplying the result by 10
shifts the number left one position, and adding T [s + m + 1] brings in the appropriate loworder digit. If the constant 10m-1 is precomputed (which can be done in time O(lg m) using the
techniques of Section 31.6, although for this application a straightforward O(m)-time method
is quite adequate), then each execution of equation (32.1) takes a constant number of
arithmetic operations. Thus, we can compute p in time Θ(m) and compute t0, t1, . . . , tn-m in
time Θ(n - m + 1), and we can find all occurrences of the pattern P[1 m] in the text T [1
n] with Θ(m) preprocessing time and Θ(n - m + 1) matching time.

