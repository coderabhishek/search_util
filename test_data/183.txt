Figure 10.5: The linked list of Figure 10.3(a) represented by the arrays key, next, and prev.
Each vertical slice of the arrays represents a single object. Stored pointers correspond to the
array indices shown at the top; the arrows show how to interpret them. Lightly shaded object
positions contain list elements. The variable L keeps the index of the Head.
In Figure 10.3(a), the object with key 4 follows the object with key 16 in the linked list. In
Figure 10.5, key 4 appears in key[2], and key 16 appears in key[5], so we have next[5] = 2 and
prev[2] = 5. Although the constant NIL appears in the next field of the tail and the prev field
of the head, we usually use an integer (such as 0 or -1) that cannot possibly represent an actual
index into the arrays. A variable L holds the index of the head of the list.
In our pseudocode, we have been using square brackets to denote both the indexing of an
array and the selection of a field (attribute) of an object. Either way, the meanings of key[x],
next[x], and prev[x] are consistent with implementation practice.
A single-array representation of objects
The words in a computer memory are typically addressed by integers from 0 to M - 1, where
M is a suitably large integer. In many programming languages, an object occupies a
contiguous set of locations in the computer memory. A pointer is simply the address of the
first memory location of the object, and other memory locations within the object can be
indexed by adding an offset to the pointer.
We can use the same strategy for implementing objects in programming environments that do
not provide explicit pointer data types. For example, Figure 10.6 shows how a single array A
can be used to store the linked list from Figures 10.3(a) and 10.5. An object occupies a
contiguous subarray A[j k]. Each field of the object corresponds to an offset in the range
from 0 to k - j, and a pointer to the object is the index j. In Figure 10.6, the offsets
corresponding to key, next, and prev are 0, 1, and 2, respectively. To read the value of prev[i],
given a pointer i, we add the value i of the pointer to the offset 2, thus reading A[i + 2].

Figure 10.6: The linked list of Figures 10.3(a) and 10.5 represented in a single array A. Each
list element is an object that occupies a contiguous subarray of length 3 within the array. The
three fields key, next, and prev correspond to the offsets 0, 1, and 2, respectively. A pointer to
an object is an index of the first element of the object. Objects containing list elements are
lightly shaded, and arrows show the list ordering.

