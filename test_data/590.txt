To show that RELABEL-TO-FRONT computes a maximum flow, we shall show that it is an
implementation of the generic push-relabel algorithm. First, observe that it performs push and
relabel operation only when they apply, since Lemma 26.30 guarantees that DISCHARGE
only performs them when they apply. It remains to show that when RELABEL-TO-FRONT
terminates, no basic operations apply. The remainder of the correctness argument relies on the
following loop invariant:
•

At each test in line 6 of RELABEL-TO-FRONT, list L is a topological sort of the
vertices in the admissible network Gf,h = (V, Ef,h), and no vertex before u in the list has
excess flow.

•

Initialization: Immediately after INITIALIZE-PREFLOW has been run, h[s] = |V|
and h[v] = 0 for all v V - {s}. Since |V | = 2 (because V contains at least s and t), no
edge can be admissible. Thus, Ef,h = ø, and any ordering of V - {s, t} is a topological
sort of Gf,h.
Since u is initially the head of the list L, there are no vertices before it and so there are
none before it with excess flow.

•

Maintenance: To see that the topological sort is maintained by each iteration of the
while loop, we start by observing that the admissible network is changed only by push
and relabel operations. By Lemma 26.28, push operations do not cause edges to
become admissible. Thus, admissible edges can be created only by relabel operations.
After a vertex u is relabeled, however, Lemma 26.29 states that there are no
admissible edges entering u but there may be admissible edges leaving u. Thus, by
moving u to the front of L, the algorithm ensures that any admissible edges leaving u
satisfy the topological sort ordering.
To see that no vertex preceding u in L has excess flow, we denote the vertex that will
be u in the next iteration by u'. The vertices that will precede u' in the next iteration
include the current u (due to line 11) and either no other vertices (if u is relabeled) or
the same vertices as before (if u is not relabeled). Since u is discharged, it has no
excess flow afterward. Thus, if u is relabeled during the discharge, no vertices
preceding u' have excess flow. If u is not relabeled during the discharge, no vertices
before it on the list acquired excess flow during this discharge, because L remained
topologically sorted at all times during the discharge (as pointed out just above,
admissible edges are created only by relabeling, not pushing), and so each push
operation causes excess flow to move only to vertices further down the list (or to s or
t). Again, no vertices preceding u' have excess flow.

•

Termination: When the loop terminates, u is just past the end of L, and so the loop
invariant ensures that the excess of every vertex is 0. Thus, no basic operations apply.

Analysis
We shall now show that RELABEL-TO-FRONT runs in O(V3) time on any flow network G =
(V, E). Since the algorithm is an implementation of the generic push-relabel algorithm, we
shall take advantage of Corollary 26.22, which provides an O(V) bound on the number of
relabel operations executed per vertex and an O(V2) bound on the total number of relabel
operations overall. In addition, Exercise 26.4-2 provides an O(VE) bound on the total time

