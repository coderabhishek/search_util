We say that a binary search tree T1 can be right-converted to binary search tree T2 if it is
possible to obtain T2 from T1 via a series of calls to RIGHT-ROTATE. Give an example of
two trees T1 and T2 such that T1 cannot be right-converted to T2. Then show that if a tree T1
can be right-converted to T2, it can be right-converted using O(n2) calls to RIGHT-ROTATE.

13.3 Insertion
Insertion of a node into an n-node red-black tree can be accomplished in O(lg n) time. We use
a slightly modified version of the TREE-INSERT procedure (Section 12.3) to insert node z
into the tree T as if it were an ordinary binary search tree, and then we color z red. To
guarantee that the red-black properties are pre- served, we then call an auxiliary procedure
RB-INSERT-FIXUP to recolor nodes and perform rotations. The call RB-INSERT(T, z)
inserts node z, whose key field is assumed to have already been filled in, into the red-black
tree T.
RB-INSERT(T, z)
1 y ← nil[T]
2 x ← root[T]
3 while x ≠ nil[T]
4
do y ← x
5
if key[z] < key[x]
6
then x ← left[x]
7
else x ← right[x]
8 p[z] ← y
9 if y = nil[T]
10
then root[T] ← z
11
else if key[z] < key[y]
12
then left[y] ← z
13
else right[y] ← z
14 left[z] ← nil[T]
15 right[z] ← nil[T]
16 color[z] ← RED
17 RB-INSERT-FIXUP(T, z)

There are four differences between the procedures TREE-INSERT and RB-INSERT. First, all
instances of NIL in TREE-INSERT are replaced by nil[T]. Second, we set left[z] and right[z]
to nil[T] in lines 14–15 of RB-INSERT, in order to maintain the proper tree structure. Third,
we color z red in line 16. Fourth, because coloring z red may cause a violation of one of the
red-black properties, we call RB-INSERT-FIXUP(T, z) in line 17 of RB-INSERT to restore
the red-black properties.
RB-INSERT-FIXUP(T, z)
1 while color[p[z]] = RED
2
do if p[z] = left[p[p[z]]]
3
then y ← right[p[p[z]]]
4
if color[y] = RED
5

then color[p[z]] ← BLACK

6

color[y] ← BLACK

7

color[p[p[z]]] ← RED

8
9
10
11

z ← p[p[z]]
else if z = right[p[z]]
then z ← p[z]
LEFT-ROTATE(T, z)

▹ Case 1
▹ Case 1
▹ Case 1
▹ Case 1
▹ Case 2
▹ Case 2

