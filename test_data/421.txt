Thus, we have shown that size(x) ≥ sk ≥ Fk+2 ≥ φk.

Corollary 20.4
The maximum degree D(n) of any node in an n-node Fibonacci heap is O(lg n).
Proof Let x be any node in an n-node Fibonacci heap, and let k = degree[x]. By Lemma 20.3,
we have n ≥ size(x) ≥ φk. Taking base-φ logarithms gives us k ≤ logφ n. (In fact, because k is
an integer, k ≤ ⌊logφ n⌋.) The maximum degree D(n) of any node is thus O(lg n).

Exercises 20.4-1
Professor Pinocchio claims that the height of an n-node Fibonacci heap is O(lg n). Show that
the professor is mistaken by exhibiting, for any positive integer n, a sequence of Fibonacciheap operations that creates a Fibonacci heap consisting of just one tree that is a linear chain
of n nodes.

Exercises 20.4-2
Suppose we generalize the cascading-cut rule to cut a node x from its parent as soon as it loses
its kth child, for some integer constant k. (The rule in Section 20.3 uses k = 2.) For what
values of k is D(n) = O(lg n)?

Problems 20-1: Alternative implementation of deletion
Professor Pisano has proposed the following variant of the FIB-HEAP-DELETE procedure,
claiming that it runs faster when the node being deleted is not the node pointed to by min[H].

