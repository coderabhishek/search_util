•
•
•

DELETE(T, s): delete segment s from T.
ABOVE(T, s): return the segment immediately above segment s in T.
BELOW(T, s): return the segment immediately below segment s in T.

If there are n segments in the input, we can perform each of the above operations in O(lg n)
time using red-black trees. Recall that the red-black-tree operations in Chapter 13 involve
comparing keys. We can replace the key comparisons by comparisons that use cross products
to determine the relative ordering of two segments (see Exercise 33.2-2).
Segment-intersection pseudocode
The following algorithm takes as input a set S of n line segments, returning the boolean value
TRUE if any pair of segments in S intersects, and FALSE otherwise. The total order T is
implemented by a red-black tree.
ANY-SEGMENTS-INTERSECT(S)
1 T ← Ø
2 sort the endpoints of the segments in S from left to right,
breaking ties by putting left endpoints before right endpoints
and breaking further ties by putting points with lower
y-coordinates first
3 for each point p in the sorted list of endpoints
4
do if p is the left endpoint of a segment s
5
then INSERT(T, s)
6
if (ABOVE(T, s) exists and intersects s)
or (BELOW(T, s) exists and intersects s)
7
then return TRUE
8
if p is the right endpoint of a segment s
9
then if both ABOVE(T, s) and BELOW(T, s) exist
and ABOVE(T, s) intersects BELOW(T, s)
10
then return TRUE
11
DELETE(T, s)
12 return FALSE

Figure 33.5 illustrates the execution of the algorithm. Line 1 initializes the total order to be
empty. Line 2 determines the event-point schedule by sorting the 2n segment endpoints from
left to right, breaking ties as described above. Note that line 2 can be performed by
lexicographically sorting the endpoints on (x, e, y), where x and y are the usual coordinates
and e = 0 for a left endpoint and e = 1 for a right endpoint.

Figure 33.5: The execution of ANY-SEGMENTS-INTERSECT. Each dashed line is the
sweep line at an event point, and the ordering of segment names below each sweep line is the
total order T at the end of the for loop in which the corresponding event point is processed.
The intersection of segments d and b is found when segment c is deleted.

