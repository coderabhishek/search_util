Ullman [5] also cover NP-completeness and give several reductions, including a reduction for
the vertex-cover problem from the hamiltonian-cycle problem.
The class P was introduced in 1964 by Cobham [64] and, independently, in 1965 by Edmonds
[84], who also introduced the class NP and conjectured that P ≠ NP. The notion of NPcompleteness was proposed in 1971 by Cook [67], who gave the first NP-completeness proofs
for formula satisfiability and 3-CNF satisfiability. Levin [203] independently discovered the
notion, giving an NP-completeness proof for a tiling problem. Karp [173] introduced the
methodology of reductions in 1972 and demonstrated the rich variety of NP-complete
problems. Karp's paper included the original NP-completeness proofs of the clique, vertexcover, and hamiltonian-cycle problems. Since then, hundreds of problems have been proven
to be NP-complete by many researchers. In a talk at a meeting celebrating Karp's 60th
birthday in 1995, Papadimitriou remarked, "about 6000 papers each year have the term 'NPcomplete' on their title, abstract, or list of keywords. This is more than each of the terms
'compiler,' 'database,' 'expert,' 'neural network,' or 'operating system.'"
Recent work in complexity theory has shed light on the complexity of computing approximate
solutions. This work gives a new definition of NP using "probabilistically checkable proofs."
This new definition implies that for problems such as clique, vertex cover, traveling-salesman
problem with the triangle inequality, and many others, computing good approximate solutions
is NP-hard and hence no easier than computing optimal solutions. An introduction to this area
can be found in Arora's thesis [19]; a chapter by Arora and Lund in [149]; a survey article by
Arora [20]; a book edited by Mayr, Promel, and Steger [214]; and a survey article by Johnson
[167].

Chapter 35: Approximation Algorithms
Many problems of practical significance are NP-complete but are too important to abandon
merely because obtaining an optimal solution is intractable. If a problem is NP-complete, we
are unlikely to find a polynomial-time algorithm for solving it exactly, but even so, there may
be hope. There are at least three approaches to getting around NP-completeness. First, if the
actual inputs are small, an algorithm with exponential running time may be perfectly
satisfactory. Second, we may be able to isolate important special cases that are solvable in
polynomial time. Third, it may still be possible to find near-optimal solutions in polynomial
time (either in the worst case or on average). In practice, near-optimality is often good
enough. An algorithm that returns near-optimal solutions is called an approximation
algorithm. This chapter presents polynomial-time approximation algorithms for several NPcomplete problems.
Performance ratios for approximation algorithms
Suppose that we are working on an optimization problem in which each potential solution has
a positive cost, and we wish to find a near-optimal solution. Depending on the problem, an
optimal solution may be defined as one with maximum possible cost or one with minimum
possible cost; that is, the problem may be either a maximization or a minimization problem.
We say that an algorithm for a problem has an approximation ratio of ρ(n) if, for any input of
size n, the cost C of the solution produced by the algorithm is within a factor of ρ(n) of the
cost C* of an optimal solution:

