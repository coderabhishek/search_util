property 4, which says that a red node cannot have a red child. Both possible violations are
due to z being colored red. Property 2 is violated if z is the root, and property 4 is violated if
z's parent is red. Figure 13.4(a) shows a violation of property 4 after the node z has been
inserted.
The while loop in lines 1–15 maintains the following three-part invariant:
At the start of each iteration of the loop,
a. Node z is red.
b. If p[z] is the root, then p[z] is black.
c. If there is a violation of the red-black properties, there is at most one violation, and it
is of either property 2 or property 4. If there is a violation of property 2, it occurs
because z is the root and is red. If there is a violation of property 4, it occurs because
both z and p[z] are red.
Part (c), which deals with violations of red-black properties, is more central to showing that
RB-INSERT-FIXUP restores the red-black properties than parts (a) and (b), which we use
along the way to understand situations in the code. Because we will be focusing on node z and
nodes near it in the tree, it is helpful to know from part (a) that z is red. We shall use part (b)
to show that the node p[p[z]] exists when we reference it in lines 2, 3, 7, 8, 13, and 14.
Recall that we need to show that a loop invariant is true prior to the first iteration of the loop,
that each iteration maintains the loop invariant, and that the loop invariant gives us a useful
property at loop termination.
We start with the initialization and termination arguments. Then, as we examine how the body
of the loop works in more detail, we shall argue that the loop maintains the invariant upon
each iteration. Along the way, we will also demonstrate that there are two possible outcomes
of each iteration of the loop: the pointer z moves up the tree, or some rotations are performed
and the loop terminates.
•

Initialization: Prior to the first iteration of the loop, we started with a red-black tree
with no violations, and we added a red node z. We show that each part of the invariant
holds at the time RB-INSERT-FIXUP is called:
a. When RB-INSERT-FIXUP is called, z is the red node that was added.
b. If p[z] is the root, then p[z] started out black and did not change prior to the
call of RB-INSERT-FIXUP.
c. We have already seen that properties 1, 3, and 5 hold when RB-INSERTFIXUP is called.
If there is a violation of property 2, then the red root must be the newly added
node z, which is the only internal node in the tree. Because the parent and both
children of z are the sentinel, which is black, there is not also a violation of
property 4. Thus, this violation of property 2 is the only violation of red-black
properties in the entire tree.
If there is a violation of property 4, then because the children of node z are
black sentinels and the tree had no other violations prior to z being added, the

