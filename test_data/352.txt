its actual cost, the difference is assigned to specific objects in the data structure as credit.
Credit can be used later on to help pay for operations whose amortized cost is less than their
actual cost. Thus, one can view the amortized cost of an operation as being split between its
actual cost and credit that is either deposited or used up. This method is very different from
aggregate analysis, in which all operations have the same amortized cost.
One must choose the amortized costs of operations carefully. If we want analysis with
amortized costs to show that in the worst case the average cost per operation is small, the total
amortized cost of a sequence of operations must be an upper bound on the total actual cost of
the sequence. Moreover, as in aggregate analysis, this relationship must hold for all sequences
of operations. If we denote the actual cost of the ith operation by ci and the amortized cost of
the ith operation by , we require
(17.1)
for all sequences of n operations. The total credit stored in the data structure is the difference
between the total amortized cost and the total actual cost, or
. By inequality
(17.1), the total credit associated with the data structure must be nonnegative at all times. If
the total credit were ever allowed to become negative (the result of undercharging early
operations with the promise of repaying the account later on), then the total amortized costs
incurred at that time would be below the total actual costs incurred; for the sequence of
operations up to that time, the total amortized cost would not be an upper bound on the total
actual cost. Thus, we must take care that the total credit in the data structure never becomes
negative.
Stack operations
To illustrate the accounting method of amortized analysis, let us return to the stack example.
Recall that the actual costs of the operations were
PUSH
1,
POP
1,
MULTIPOP min(k, s) ,
where k is the argument supplied to MULTIPOP and s is the stack size when it is called. Let
us assign the following amortized costs:
PUSH
2,
POP
0,
MULTIPOP 0.
Note that the amortized cost of MULTIPOP is a constant (0), whereas the actual cost is
variable. Here, all three amortized costs are O(1), although in general the amortized costs of
the operations under consideration may differ asymptotically.
We shall now show that we can pay for any sequence of stack operations by charging the
amortized costs. Suppose we use a dollar bill to represent each unit of cost. We start with an

