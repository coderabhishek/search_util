expanding each node in the tree by breaking it into its constituent parts as determined by the
recurrence.

Figure 4.1: The construction of a recursion tree for the recurrence T(n) = 3T(n/4) + cn2. Part
(a) shows T(n), which is progressively expanded in (b)-(d) to form the recursion tree. The
fully expanded tree in part (d) has height log4 n (it has log4 n + 1 levels).
Because subproblem sizes decrease as we get further from the root, we eventually must reach
a boundary condition. How far from the root do we reach one? The subproblem size for a
node at depth i is n/4i. Thus, the subproblem size hits n = 1 when n/4i = 1 or, equivalently,
when i = log4 n. Thus, the tree has log 4n + 1 levels (0, 1, 2,..., log4 n).
Next we determine the cost at each level of the tree. Each level has three times more nodes
than the level above, and so the number of nodes at depth i is 3i. Because subproblem sizes
reduce by a factor of 4 for each level we go down from the root, each node at depth i, for i =
0, 1, 2,..., log4 n - 1, has a cost of c(n/4i)2. Multiplying, we see that the total cost over all nodes
at depth i, for i = 0, 1, 2,..., log4 n - 1, is 3i c(n/4i)2 = (3/16)i cn2. The last level, at depth log4 n,
has
nodes, each contributing cost T (1), for a total cost of
, which is
.
Now we add up the costs over all levels to determine the cost for the entire tree:

