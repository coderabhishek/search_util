We can multiply two matrices A and B only if they are compatible: the number of columns of
A must equal the number of rows of B. If A is a p × q matrix and B is a q × r matrix, the
resulting matrix C is a p × r matrix. The time to compute C is dominated by the number of
scalar multiplications in line 7, which is pqr. In what follows, we shall express costs in terms
of the number of scalar multiplications.
To illustrate the different costs incurred by different parenthesizations of a matrix product,
consider the problem of a chain A1, A2, A3 of three matrices. Suppose that the dimensions
of the matrices are 10 × 100, 100 × 5, and 5 × 50, respectively. If we multiply according to the
parenthesization ((A1 A2) A3), we perform 10 · 100 · 5 = 5000 scalar multiplications to
compute the 10 × 5 matrix product A1 A2, plus another 10 · 5 · 50 = 2500 scalar
multiplications to multiply this matrix by A3, for a total of 7500 scalar multiplications. If
instead we multiply according to the parenthesization (A1 (A2 A3)), we perform 100 · 5 · 50 =
25,000 scalar multiplications to compute the 100 × 50 matrix product A2 A3, plus another 10 ·
100 · 50 = 50,000 scalar multiplications to multiply A1 by this matrix, for a total of 75,000
scalar multiplications. Thus, computing the product according to the first parenthesization is
10 times faster.
The matrix-chain multiplication problem can be stated as follows: given a chain A1, A2, ...,
An of n matrices, where for i = 1, 2, ..., n, matrix Ai has dimension pi-1 × pi, fully
parenthesize the product A1 A2 An in a way that minimizes the number of scalar
multiplications.
Note that in the matrix-chain multiplication problem, we are not actually multiplying
matrices. Our goal is only to determine an order for multiplying matrices that has the lowest
cost. Typically, the time invested in determining this optimal order is more than paid for by
the time saved later on when actually performing the matrix multiplications (such as
performing only 7500 scalar multiplications instead of 75,000).
Counting the number of parenthesizations
Before solving the matrix-chain multiplication problem by dynamic programming, let us
convince ourselves that exhaustively checking all possible parenthesizations does not yield an
efficient algorithm. Denote the number of alternative parenthesizations of a sequence of n
matrices by P(n). When n = 1, there is just one matrix and therefore only one way to fully
parenthesize the matrix product. When n ≥ 2, a fully parenthesized matrix product is the
product of two fully parenthesized matrix subproducts, and the split between the two
subproducts may occur between the kth and (k + 1)st matrices for any k = 1, 2, ..., n - 1. Thus,
we obtain the recurrence
(15.11)

Problem 12-4 asked you to show that the solution to a similar recurrence is the sequence of
Catalan numbers, which grows as Ω(4n/n3/2). A simpler exercise (see Exercise 15.2-3) is to
show that the solution to the recurrence (15.11) is Ω(2n). The number of solutions is thus
exponential in n, and the brute-force method of exhaustive search is therefore a poor strategy
for determining the optimal parenthesization of a matrix chain.

