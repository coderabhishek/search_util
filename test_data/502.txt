DAG-SHORTEST-PATHS(G, w, s)
1 topologically sort the vertices of G
2 INITIALIZE-SINGLE-SOURCE(G, s)
3 for each vertex u, taken in topologically sorted order
4
do for each vertex v
Adj[u]
5
do RELAX(u, v, w)

Figure 24.5 shows the execution of this algorithm.

Figure 24.5: The execution of the algorithm for shortest paths in a directed acyclic graph. The
vertices are topologically sorted from left to right. The source vertex is s. The d values are
shown within the vertices, and shaded edges indicate the π values. (a) The situation before the
first iteration of the for loop of lines 3-5. (b)-(g) The situation after each iteration of the for
loop of lines 3-5. The newly blackened vertex in each iteration was used as u in that iteration.
The values shown in part (g) are the final values.
The running time of this algorithm is easy to analyze. As shown in Section 22.4, the
topological sort of line 1 can be performed in Θ(V + E) time. The call of INITIALIZESINGLE-SOURCE in line 2 takes Θ(V) time. There is one iteration per vertex in the for loop
of lines 3-5. For each vertex, the edges that leave the vertex are each examined exactly once.
Thus, there are a total of |E| iterations of the inner for loop of lines 4-5. (We have used an
aggregate analysis here.) Because each iteration of the inner for loop takes Θ(1) time, the total
running time is Θ(V + E), which is linear in the size of an adjacency-list representation of the
graph.
The following theorem shows that the DAG-SHORTEST-PATHS procedure correctly
computes the shortest paths.
Theorem 24.5
If a weighted, directed graph G = (V, E) has source vertex s and no cycles, then at the
termination of the DAG-SHORTEST-PATHS procedure, d[v] = δ(s, v) for all vertices v
and the predecessor subgraph Gπ is a shortest-paths tree.
Proof We first show that d[v] = δ(s, v) for all vertices v V at termination. If v is not
reachable from s, then d[v] = δ(s, v) = ∞ by the no-path property. Now, suppose that v is

V,

