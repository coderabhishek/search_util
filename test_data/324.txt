Like the recursive version, GREEDY-ACTIVITY-SELECTOR schedules a set of n activities
in Î˜(n) time, assuming that the activities were already sorted initially by their finish times.
Exercises 16.1-1
Give a dynamic-programming algorithm for the activity-selection problem, based on the
recurrence (16.3). Have your algorithm compute the sizes c[i, j] as defined above and also
produce the maximum-size subset A of activities. Assume that the inputs have been sorted as
in equation (16.1). Compare the running time of your solution to the running time of
GREEDY-ACTIVITY-SELECTOR.

Exercises 16.1-2
Suppose that instead of always selecting the first activity to finish, we instead select the last
activity to start that is compatible with all previously selected activities. Describe how this
approach is a greedy algorithm, and prove that it yields an optimal solution.

Exercises 16.1-3
Suppose that we have a set of activities to schedule among a large number of lecture halls. We
wish to schedule all the activities using as few lecture halls as possible. Give an efficient
greedy algorithm to determine which activity should use which lecture hall.
(This is also known as the interval-graph coloring problem. We can create an interval graph
whose vertices are the given activities and whose edges connect incompatible activities. The
smallest number of colors required to color every vertex so that no two adjacent vertices are
given the same color corresponds to finding the fewest lecture halls needed to schedule all of
the given activities.)

Exercises 16.1-4
Not just any greedy approach to the activity-selection problem produces a maximum-size set
of mutually compatible activities. Give an example to show that the approach of selecting the
activity of least duration from those that are compatible with previously selected activities
does not work. Do the same for the approaches of always selecting the compatible activity
that overlaps the fewest other remaining activities and always selecting the compatible
remaining activity with the earliest start time.

