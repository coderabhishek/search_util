Steps 1â€“3 form the basis of a dynamic-programming solution to a problem. Step 4 can be
omitted if only the value of an optimal solution is required. When we do perform step 4, we
sometimes maintain additional information during the computation in step 3 to ease the
construction of an optimal solution.
The sections that follow use the dynamic-programming method to solve some optimization
problems. Section 15.1 examines a problem in scheduling two automobile assembly lines,
where after each station, the auto under construction can stay on the same line or move to the
other. Section 15.2 asks how we can multiply a chain of matrices so that the fewest total
scalar multiplications are performed. Given these examples of dynamic programming, Section
15.3 discusses two key characteristics that a problem must have for dynamic programming to
be a viable solution technique. Section 15.4 then shows how to find the longest common
subsequence of two sequences. Finally, Section 15.5 uses dynamic programming to construct
binary search trees that are optimal, given a known distribution of keys to be looked up.

15.1 Assembly-line scheduling
Our first example of dynamic programming solves a manufacturing problem. The Colonel
Motors Corporation produces automobiles in a factory that has two assembly lines, shown in
Figure 15.1. An automobile chassis enters each assembly line, has parts added to it at a
number of stations, and a finished auto exits at the end of the line. Each assembly line has n
stations, numbered j = 1, 2, ..., n. We denote the jth station on line i (where i is 1 or 2) by Si,j.
The jth station on line 1 (S1,j) performs the same function as the jth station on line 2 (S2,j). The
stations were built at different times and with different technologies, however, so that the time
required at each station varies, even between stations at the same position on the two different
lines. We denote the assembly time required at station Si,j by ai,j. As Figure 15.1 shows, a
chassis enters station 1 of one of the assembly lines, and it progresses from each station to the
next. There is also an entry time ei for the chassis to enter assembly line i and an exit time xi
for the completed auto to exit assembly line i.

Figure 15.1: A manufacturing problem to find the fastest way through a factory. There are two
assembly lines, each with n stations; the jth station on line i is denoted Si,j and the assembly
time at that station is ai,j. An automobile chassis enters the factory, and goes onto line i (where
i = 1 or 2), taking ei time. After going through the jth station on a line, the chassis goes on to
the (j + 1)st station on either line. There is no transfer cost if it stays on the same line, but it
takes time ti,j to transfer to the other line after station Si,j. After exiting the nth station on a
line, it takes xi time for the completed auto to exit the factory. The problem is to determine
which stations to choose from line 1 and which to choose from line 2 in order to minimize the
total time through the factory for one auto.
Normally, once a chassis enters an assembly line, it passes through that line only. The time to
go from one station to the next within the same assembly line is negligible. Occasionally a
special rush order comes in, and the customer wants the automobile to be manufactured as

