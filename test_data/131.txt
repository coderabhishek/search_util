Exercises 7.1-2
What value of q does PARTITION return when all elements in the array A[p r] have the
same value? Modify PARTITION so that q = (p+r)/2 when all elements in the array A[p r]
have the same value.

Exercises 7.1-3
Give a brief argument that the running time of PARTITION on a subarray of size n is Θ(n).

Exercises 7.1-4
How would you modify QUICKSORT to sort into nonincreasing order?

7.2 Performance of quicksort
The running time of quicksort depends on whether the partitioning is balanced or unbalanced,
and this in turn depends on which elements are used for partitioning. If the partitioning is
balanced, the algorithm runs asymptotically as fast as merge sort. If the partitioning is
unbalanced, however, it can run asymptotically as slowly as insertion sort. In this section, we
shall informally investigate how quicksort performs under the assumptions of balanced versus
unbalanced partitioning.
Worst-case partitioning
The worst-case behavior for quicksort occurs when the partitioning routine produces one
subproblem with n - 1 elements and one with 0 elements. (This claim is proved in Section
7.4.1.) Let us assume that this unbalanced partitioning arises in each recursive call. The
partitioning costs Θ(n) time. Since the recursive call on an array of size 0 just returns, T(0) =
Θ(1), and the recurrence for the running time is
T(n) = T(n - 1) + T(0) + Θ(n)
= T(n - 1) + Θ(n).
Intuitively, if we sum the costs incurred at each level of the recursion, we get an arithmetic
series (equation (A.2)), which evaluates to Θ(n2). Indeed, it is straightforward to use the
substitution method to prove that the recurrence T(n) = T(n - 1) + Θ(n) has the solution T(n) =
Θ(n2). (See Exercise 7.2-1.)

