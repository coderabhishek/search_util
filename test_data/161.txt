This chapter addresses the problem of selecting the ith order statistic from a set of n distinct
numbers. We assume for convenience that the set contains distinct numbers, although
virtually everything that we do extends to the situation in which a set contains repeated
values. The selection problem can be specified formally as follows:
Input: A set A of n (distinct) numbers and a number i, with 1 ≤ i ≤ n.
Output: The element x

A that is larger than exactly i - 1 other elements of A.

The selection problem can be solved in O(n lg n) time, since we can sort the numbers using
heapsort or merge sort and then simply index the ith element in the output array. There are
faster algorithms, however.
In Section 9.1, we examine the problem of selecting the minimum and maximum of a set of
elements. More interesting is the general selection problem, which is investigated in the
subsequent two sections. Section 9.2 analyzes a practical algorithm that achieves an O(n)
bound on the running time in the average case. Section 9.3 contains an algorithm of more
theoretical interest that achieves the O(n) running time in the worst case.

9.1 Minimum and maximum
How many comparisons are necessary to determine the minimum of a set of n elements? We
can easily obtain an upper bound of n - 1 comparisons: examine each element of the set in
turn and keep track of the smallest element seen so far. In the following procedure, we assume
that the set resides in array A, where length[A] = n.
MINIMUM(A)
1 min ← A[1]
2 for i ← 2 to length[A]
3
do if min > A[i]
4
then min ← A[i]
5 return min

Finding the maximum can, of course, be accomplished with n - 1 comparisons as well.
Is this the best we can do? Yes, since we can obtain a lower bound of n - 1 comparisons for
the problem of determining the minimum. Think of any algorithm that determines the
minimum as a tournament among the elements. Each comparison is a match in the tournament
in which the smaller of the two elements wins. The key observation is that every element
except the winner must lose at least one match. Hence, n - 1 comparisons are necessary to
determine the minimum, and the algorithm MINIMUM is optimal with respect to the number
of comparisons performed.
Simultaneous minimum and maximum
In some applications, we must find both the minimum and the maximum of a set of n
elements. For example, a graphics program may need to scale a set of (x, y) data to fit onto a
rectangular display screen or other graphical output device. To do so, the program must first
determine the minimum and maximum of each coordinate.

