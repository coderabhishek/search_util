are output and n is the number of internal nodes in the tree. (Hint: There is no need to add
new fields to the red-black tree.)

14.3 Interval Trees
In this section, we shall augment red-black trees to support operations on dynamic sets of
intervals. A closed interval is an ordered pair of real numbers [t1, t2], with t1 ≤ t2. The interval
[t1, t2] represents the set {t R : t1 ≤ t ≤ t2}. Open and half-open intervals omit both or one of
the endpoints from the set, respectively. In this section, we shall assume that intervals are
closed; extending the results to open and half-open intervals is conceptually straightforward.
Intervals are convenient for representing events that each occupy a continuous period of time.
We might, for example, wish to query a database of time intervals to find out what events
occurred during a given interval. The data structure in this section provides an efficient means
for maintaining such an interval database.
We can represent an interval [t1, t2] as an object i, with fields low[i] = t1 (the low endpoint)
and high[i] = t2(the high endpoint). We say that intervals i and i' overlap if i ∩ i' ≠ ø, that is, if
low[i] ≤ high[i'] and low[i'] ≤ high[i]. Any two intervals i and i' satisfy the interval
trichotomy; that is, exactly one of the following three properties holds:
a. i and i' overlap,
b. i is to the left of i' (i.e., high[i]< low[i']),
c. i is to the right of i' (i.e., high[i']< low[i]).
Figure 14.3 shows the three possibilities.

Figure 14.3: The interval trichotomy for two closed intervals i and i'. (a) If i and i' overlap,
there are four situations; in each, low[i] ≤ high[i'] and low[i'] ≤ high[i]. (b) The intervals do
not overlap, and high[i]< low[i']. (c) The intervals do not overlap, and high[i']< low[i].
An interval tree is a red-black tree that maintains a dynamic set of elements, with each
element x containing an interval int[x]. Interval trees support the following operations.
•
•
•

INTERVAL-INSERT(T, x) adds the element x, whose int field is assumed to contain
an interval, to the interval tree T.
INTERVAL-DELETE(T, x) removes the element x from the interval tree T.
INTERVAL-SEARCH(T, i) returns a pointer to an element x in the interval tree T
such that int[x] overlaps interval i, or the sentinel nil[T] if no such element is in the set.

