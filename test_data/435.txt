Proving the time bound
We shall use the potential method of amortized analysis (see Section 17.3) to prove the
O(mα(n)) time bound. In performing the amortized analysis, it is convenient to assume that
we invoke the LINK operation rather than the UNION operation. That is, since the parameters
of the LINK procedure are pointers to two roots, we assume that the appropriate FIND-SET
operations are performed separately. The following lemma shows that even if we count the
extra FIND-SET operations induced by UNION calls, the asymptotic running time remains
unchanged.
Lemma 21.7
Suppose we convert a sequence S' of m' MAKE-SET, UNION, and FIND-SET operations into
a sequence S of m MAKE-SET, LINK, and FIND-SET operations by turning each UNION
into two FIND-SET operations followed by a LINK. Then, if sequence S runs in O(m α(n))
time, sequence S' runs in O(m' α(n)) time.
Proof Since each UNION operation in sequence S' is converted into three operations in S, we
have m' ≤ m ≤ 3m'. Since m = O(m'), an O(m α(n)) time bound for the converted sequence S
implies an O(m' α(n)) time bound for the original sequence S'.

In the remainder of this section, we shall assume that the initial sequence of m' MAKE-SET,
UNION, and FIND-SET operations has been converted to a sequence of m MAKE-SET,
LINK, and FIND-SET operations. We now prove an O(m α(n)) time bound for the converted
sequence and appeal to Lemma 21.7 to prove the O(m' α(n)) running time of the original
sequence of m' operations.
Potential function
The potential function we use assigns a potential φq(x) to each node x in the disjoint-set forest
after q operations. We sum the node potentials for the potential of the entire forest: Φq = Σxφ
(x), where Φq denotes the potential of the forest after q operations. The forest is empty prior to
the first operation, and we arbitrarily set Φ0 = 0. No potential Φq will ever be negative.
The value of φq(x) depends on whether x is a tree root after the qth operation. If it is, or if
rank[x] = 0, then φq(x) = α(n) · rank[x].
Now suppose that after the qth operation, x is not a root and that rank[x] ≥ 1. We need to
define two auxiliary functions on x before we can define φq(x). First we define
level(x) = max {k : rank[p[x]] ≥ Ak (rank[x])} .
That is, level(x) is the greatest level k for which Ak, applied to x's rank, is no greater than x's
parent's rank.
We claim that

