Problems 13-4: Treaps
If we insert a set of n items into a binary search tree, the resulting tree may be horribly
unbalanced, leading to long search times. As we saw in Section 12.4, however, randomly built
binary search trees tend to be balanced. Therefore, a strategy that, on average, builds a
balanced tree for a fixed set of items is to randomly permute the items and then insert them in
that order into the tree.
What if we do not have all the items at once? If we receive the items one at a time, can we
still randomly build a binary search tree out of them?
We will examine a data structure that answers this question in the affirmative. A treap is a
binary search tree with a modified way of ordering the nodes. Figure 13.9 shows an example.
As usual, each node x in the tree has a key value key[x]. In addition, we assign priority[x],
which is a random number chosen independently for each node. We assume that all priorities
are distinct and also that all keys are distinct. The nodes of the treap are ordered so that the
keys obey the binary-search-tree property and the priorities obey the min-heap order property:
•
•
•

If v is a left child of u, then key[v] < key[u].
If v is a right child of u, then key[v] > key[u].
If v is a child of u, then priority[v] > priority[u].

Figure 13.9: A treap. Each node x is labeled with key[x] : Priority[x]. For example, the root
has key G and priority 4.
(This combination of properties is why the tree is called a "treap;" it has features of both a
binary search tree and a heap.)
It helps to think of treaps in the following way. Suppose that we insert nodes x1, x2, ..., xn, with
associated keys, into a treap. Then the resulting treap is the tree that would have been formed
if the nodes had been inserted into a normal binary search tree in the order given by their
(randomly chosen) priorities, i.e., priority[xi] < priority[xj] means that xi was inserted before
x j.
a. Show that given a set of nodes x1, x2, ..., xn, with associated keys and priorities (all
distinct), there is a unique treap associated with these nodes.
b. Show that the expected height of a treap is Θ(lg n), and hence the time to search for a
value in the treap is Θ(lg n).

