In order to use the simplex algorithm, we must convert the linear program into slack form; we
saw how to do so in Section 29.1. In addition to being an algebraic manipulation, slack is a
useful algorithmic concept. Recalling from Section 29.1 that each variable has a
corresponding nonnegativity constraint, we say that an equality constraint is tight for a
particular setting of its nonbasic variables if they cause the constraint's basic variable to
become 0. Similarly, a setting of the nonbasic variables that would make a basic variable
become negative violates that constraint. Thus, the slack variables explicitly maintain how far
each constraint is from being tight, and so they help to determine how much we can increase
values of nonbasic values without violating any constraints.
Associating the slack variables x4, x5, and x6 with inequalities (29.57)–(29.59), respectively,
and putting the linear program into slack form, we obtain
(29.61)
(29.62)
(29.63)
(29.64)
The system of constraints (29.62)–(29.64) has 3 equations and 6 variables. Any setting of the
variables x1, x2, and x3 defines values for x4, x5, and x6; there are therefore an infinite number
of solutions to this system of equations. A solution is feasible if all of x1, x2, ..., x6 are
nonnegative, and there can be an infinite number of feasible solutions as well. The infinite
number of possible solutions to a system such as this one will be useful in later proofs. We
will focus on the basic solution: set all the (nonbasic) variables on the right-hand side to 0
and then compute the values of the (basic) variables on the left-hand side. In this example, the
basic solution is
and it has objective value z = (3 · 0) + (1 · 0) + (2 ·
0) = 0. Observe that this basic solution sets
for each i B. An iteration of the simplex
algorithm will rewrite the set of equations and the objective function so as to put a different
set of variables on the right-hand side. Thus, there will be a different basic solution associated
with the rewritten problem. We emphasize that the rewrite does not in any way change the
underlying linear-programming problem; the problem at one iteration has the identical set of
feasible solutions as the problem at the previous iteration. The problem does, however, have a
different basic solution than that of the previous iteration.
If a basic solution is also feasible, we call it a basic feasible solution. During the running of
the simplex algorithm, the basic solution will almost always be a basic feasible solution. We
shall see in Section 29.5, however, that for the first few iterations of the simplex algorithm,
the basic solution may not be feasible.
Our goal, in each iteration, is to reformulate the linear program so that the basic solution has a
greater objective value. We select a nonbasic variable xe whose coefficient in the objective
function is positive, and we increase the value of xe as much as possible without violating any
of the constraints. The variable xe becomes basic, and some other variable xl becomes
nonbasic. The values of other basic variables and of the objective function may also change.
To continue the example, let's think about increasing the value of x1. As we increase x1, the
values of x4, x5, and x6 all decrease. Because we have a nonnegativity constraint for each
variable, we cannot allow any of them to become negative. If x1 increases above 30, then x4
becomes negative, while x5 and x6 become negative when x1 increases above 12 and 9
respectively. The third constraint (29.64) is the tightest constraint, and it limits how much we

