a. T (n) = 4T(n/2) + n.
b. T (n) = 4T(n/2) + n2.
c. T (n) = 4T(n/2) + n3.

Exercises 4.3-2
The recurrence T(n) = 7T (n/2)+n2 describes the running time of an algorithm A. A competing
algorithm A′ has a running time of T′(n) = aT′(n/4) + n2. What is the largest integer value for a
such that A′ is asymptotically faster than A?

Exercises 4.3-3
Use the master method to show that the solution to the binary-search recurrence T(n) = T (n/2)
+ Θ(1) is T(n) = Θ(lg n). (See Exercise 2.3-5 for a description of binary search.)

Exercises 4.3-4
Can the master method be applied to the recurrence T (n) = 4T(n/2) + n2 lg n? Why or why
not? Give an asymptotic upper bound for this recurrence.

Exercises 4.3-5:
Consider the regularity condition af (n/b) ≤ cf(n) for some constant c < 1, which is part of case
3 of the master theorem. Give an example of constants a ≥ 1 and b > 1 and a function f (n) that
satisfies all the conditions in case 3 of the master theorem except the regularity condition.

4.4: Proof of the master theorem
This section contains a proof of the master theorem (Theorem 4.1). The proof need not be
understood in order to apply the theorem.
The proof is in two parts. The first part analyzes the "master" recurrence (4.5), under the
simplifying assumption that T(n) is defined only on exact powers of b > 1, that is, for n = 1, b,
b2, .. This part gives all the intuition needed to understand why the master theorem is true.
The second part shows how the analysis can be extended to all positive integers n and is
merely mathematical technique applied to the problem of handling floors and ceilings.

