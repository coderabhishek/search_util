We now explore the distinction between probabilistic analysis and randomized algorithms
further. In Section 5.2, we claimed that, assuming that the candidates are presented in a
random order, the expected number of times we hire a new office assistant is about ln n. Note
that the algorithm here is deterministic; for any particular input, the number of times a new
office assistant is hired will always be the same. Furthermore, the number of times we hire a
new office assistant differs for different inputs, and it depends on the ranks of the various
candidates. Since this number depends only on the ranks of the candidates, we can represent a
particular input by listing, in order, the ranks of the candidates, i.e., <rank(1), rank(2), ...,
rank(n)>. Given the rank list A1 = <1, 2, 3, 4, 5, 6, 7, 8, 9, 10>, a new office assistant will
always be hired 10 times, since each successive candidate is better than the previous one, and
lines 5-6 will be executed in each iteration of the algorithm. Given the list of ranks A2 = <10,
9, 8, 7, 6, 5, 4, 3, 2, 1>, a new office assistant will be hired only once, in the first iteration.
Given a list of ranks A3= <5, 2, 1, 8, 4, 7, 10, 9, 3, 6>, a new office assistant will be hired
three times, upon interviewing the candidates with ranks 5, 8, and 10. Recalling that the cost
of our algorithm is dependent on how many times we hire a new office assistant, we see that
there are expensive inputs, such as A1, inexpensive inputs, such as A2, and moderately
expensive inputs, such as A3.
Consider, on the other hand, the randomized algorithm that first permutes the candidates and
then determines the best candidate. In this case, the randomization is in the algorithm, not in
the input distribution. Given a particular input, say A3 above, we cannot say how many times
the maximum will be updated, because this quantity differs with each run of the algorithm.
The first time we run the algorithm on A3, it may produce the permutation A1 and perform 10
updates, while the second time we run the algorithm, we may produce the permutation A2 and
perform only one update. The third time we run it, we may perform some other number of
updates. Each time we run the algorithm, the execution depends on the random choices made
and is likely to differ from the previous execution of the algorithm. For this algorithm and
many other randomized algorithms, no particular input elicits its worst-case behavior. Even
your worst enemy cannot produce a bad input array, since the random permutation makes the
input order irrelevant. The randomized algorithm performs badly only if the random-number
generator produces an "unlucky" permutation.
For the hiring problem, the only change needed in the code is to randomly permute the array.
RANDOMIZED-HIRE-ASSISTANT(n)
1 randomly permute the list of candidates
2 best ← 0
→ candidate 0 is a least-qualified dummy candidate
3 for i ← 1 to n
4
do interview candidate i
5
if candidate i is better than candidate best
6
then best ← i
7
hire candidate i

With this simple change, we have created a randomized algorithm whose performance
matches that obtained by assuming that the candidates were presented in a random order.
Lemma 5.3
The expected hiring cost of the procedure RANDOMIZED-HIRE-ASSISTANT is O(ch ln n).

