(Hint: Multiply column i by -x0 and add it to column i + 1 for i = n - 1, n - 2, . . . , 1, and then
use induction.)

28.2 Strassen's algorithm for matrix multiplication
This section presents Strassen's remarkable recursive algorithm for multiplying n × n
matrices, which runs in Θ(nlg 7) = O(n2.81) time. For sufficiently large values of n, therefore, it
outperforms the naive Θ(n3) matrix-multiplication algorithm MATRIX-MULTIPLY from
Section 25.1.
An overview of the algorithm
Strassen's algorithm can be viewed as an application of a familiar design technique: divide
and conquer. Suppose we wish to compute the product C = AB, where each of A, B, and C are
n × n matrices. Assuming that n is an exact power of 2, we divide each of A, B, and C into
four n/2 × n/2 matrices, rewriting the equation C = AB as follows:
(28.8)
(Exercise 28.2-2 deals with the situation in which n is not an exact power of 2.) Equation
(28.8) corresponds to the four equations
(28.9)
(28.10)
(28.11)
(28.12)
Each of these four equations specifies two multiplications of n/2 × n/2 matrices and the
addition of their n/2 × n/2 products. Using these equations to define a straightforward divideand-conquer strategy, we derive the following recurrence for the time T (n) to multiply two n
× n matrices:
(28.13)
Unfortunately, recurrence (28.13) has the solution T(n) = Θ(n3), and thus this method is no
faster than the ordinary one.
Strassen discovered a different recursive approach that requires only 7 recursive
multiplications of n/2 × n/2 matrices and Θ(n2) scalar additions and subtractions, yielding the
recurrence
(28.14)

Strassen's method has four steps:
1. Divide the input matrices A and B into n/2 × n/2 submatrices, as in equation (28.8).

