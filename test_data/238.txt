people in the late 1950's. Radix trees are often called tries, which comes from the middle
letters in the word retrieval. They are also discussed by Knuth [185].
Section 15.5 will show how to construct an optimal binary search tree when search
frequencies are known prior to constructing the tree. That is, given the frequencies of
searching for each key and the frequencies of searching for values that fall between keys in
the tree, we construct a binary search tree for which a set of searches that follows these
frequencies examines the minimum number of nodes.
The proof in Section 12.4 that bounds the expected height of a randomly built binary search
tree is due to Aslam [23]. Mart nez and Roura [211] give randomized algorithms for insertion
into and deletion from binary search trees in which the result of either operation is a random
binary search tree. Their definition of a random binary search tree differs slightly from that of
a randomly built binary search tree in this chapter, however.

Chapter 13: Red-Black Trees
Chapter 12 showed that a binary search tree of height h can implement any of the basic
dynamic-set operations—such as SEARCH, PREDECESSOR, SUCCESSOR, MINIMUM,
MAXIMUM, INSERT, and DELETE—in O(h) time. Thus, the set operations are fast if the
height of the search tree is small; but if its height is large, their performance may be no better
than with a linked list. Red-black trees are one of many search-tree schemes that are
"balanced" in order to guarantee that basic dynamic-set operations take O(lg n) time in the
worst case.

13.1 Properties of red-black trees
A red-black tree is a binary search tree with one extra bit of storage per node: its color, which
can be either RED or BLACK. By constraining the way nodes can be colored on any path
from the root to a leaf, red-black trees ensure that no such path is more than twice as long as
any other, so that the tree is approximately balanced.
Each node of the tree now contains the fields color, key, left, right, and p. If a child or the
parent of a node does not exist, the corresponding pointer field of the node contains the value
NIL. We shall regard these NIL's as being pointers to external nodes (leaves) of the binary
search tree and the normal, key-bearing nodes as being internal nodes of the tree.
A binary search tree is a red-black tree if it satisfies the following red-black properties:
1.
2.
3.
4.
5.

Every node is either red or black.
The root is black.
Every leaf (NIL) is black.
If a node is red, then both its children are black.
For each node, all paths from the node to descendant leaves contain the same number
of black nodes.

Figure 13.1(a) shows an example of a red-black tree.

