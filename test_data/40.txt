The order of growth of the running time of an algorithm, defined in Chapter 2, gives a simple
characterization of the algorithm's efficiency and also allows us to compare the relative
performance of alternative algorithms. Once the input size n becomes large enough, merge
sort, with its Θ(n lg n) worst-case running time, beats insertion sort, whose worst-case running
time is Θ(n2). Although we can sometimes determine the exact running time of an algorithm,
as we did for insertion sort in Chapter 2, the extra precision is not usually worth the effort of
computing it. For large enough inputs, the multiplicative constants and lower-order terms of
an exact running time are dominated by the effects of the input size itself.
When we look at input sizes large enough to make only the order of growth of the running
time relevant, we are studying the asymptotic efficiency of algorithms. That is, we are
concerned with how the running time of an algorithm increases with the size of the input in
the limit, as the size of the input increases without bound. Usually, an algorithm that is
asymptotically more efficient will be the best choice for all but very small inputs.
This chapter gives several standard methods for simplifying the asymptotic analysis of
algorithms. The next section begins by defining several types of "asymptotic notation," of
which we have already seen an example in Θ-notation. Several notational conventions used
throughout this book are then presented, and finally we review the behavior of functions that
commonly arise in the analysis of algorithms.

3.1 Asymptotic notation
The notations we use to describe the asymptotic running time of an algorithm are defined in
terms of functions whose domains are the set of natural numbers N = {0, 1, 2, ...}. Such
notations are convenient for describing the worst-case running-time function T (n), which is
usually defined only on integer input sizes. It is sometimes convenient, however, to abuse
asymptotic notation in a variety of ways. For example, the notation is easily extended to the
domain of real numbers or, alternatively, restricted to a subset of the natural numbers. It is
important, however, to understand the precise meaning of the notation so that when it is
abused, it is not misused. This section defines the basic asymptotic notations and also
introduces some common abuses.
Θ-notation
In Chapter 2, we found that the worst-case running time of insertion sort is T (n) = Θ(n2). Let
us define what this notation means. For a given function g(n), we denote by Θ(g(n)) the set of
functions
Θ(g(n)) = {f(n) : there exist positive constants c1, c2, and n0 such that 0 ≤ c1g(n) ≤ f(n) ≤ c2g(n)
for all n ≥ n0}.[1]
A function f(n) belongs to the set Θ(g(n)) if there exist positive constants c1 and c2 such that it
can be "sandwiched" between c1g(n) and c2g(n), for sufficiently large n. Because Θ(g(n)) is a
set, we could write "f(n) Θ(g(n))" to indicate that f(n) is a member of Θ(g(n)). Instead, we
will usually write "f(n) = Θ(g(n))" to express the same notion. This abuse of equality to denote
set membership may at first appear confusing, but we shall see later in this section that it has
advantages.

