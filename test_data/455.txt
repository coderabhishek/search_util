When applied to a directed or undirected graph G = (V, E), procedure BFS constructs π so that
the predecessor subgraph Gπ = (Vπ, Eπ) is a breadth-first tree.
Proof Line 16 of BFS sets π[v] = u if and only if (u v) E and δ(s, v) < ∞- that is, if v is
reachable from s-and thus Vπ consists of the vertices in V reachable from s. Since Gπ forms a
tree, by Theorem B.2, it contains a unique path from s to each vertex in Vπ . By applying
Theorem 22.5 inductively, we conclude that every such path is a shortest path.

The following procedure prints out the vertices on a shortest path from s to v, assuming that
BFS has already been run to compute the shortest-path tree.
PRINT-PATH(G, s, v)
1 if v = s
2
then print s
3
else if π[v] = NIL
4
then print "no path from" s "to" v "exists"
5
else PRINT-PATH(G, s, π[v])
6
print v

This procedure runs in time linear in the number of vertices in the path printed, since each
recursive call is for a path one vertex shorter.
Exercises 22.2-1
Show the d and π values that result from running breadth-first search on the directed graph of
Figure 22.2(a), using vertex 3 as the source.

Exercises 22.2-2
Show the d and π values that result from running breadth-first search on the undirected graph
of Figure 22.3, using vertex u as the source.

Exercises 22.2-3
What is the running time of BFS if its input graph is represented by an adjacency matrix and
the algorithm is modified to handle this form of input?

Exercises 22.2-4

