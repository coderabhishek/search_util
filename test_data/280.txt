Similarly, let us now suppose that the fastest way through station S1,j is through station S2,j-1.
Now we observe that the chassis must have taken a fastest way from the starting point through
station S2,j-1. The reasoning is the same: if there were a faster way to get through station S2,j-1,
we could substitute this faster way to yield a faster way through station S1,j, which would be a
contradiction.
Put more generally, we can say that for assembly-line scheduling, an optimal solution to a
problem (finding the fastest way through station Si,j) contains within it an optimal solution to
subproblems (finding the fastest way through either S1,j-1 or S2,j-1). We refer to this property as
optimal substructure, and it is one of the hallmarks of the applicability of dynamic
programming, as we shall see in Section 15.3.
We use optimal substructure to show that we can construct an optimal solution to a problem
from optimal solutions to subproblems. For assembly-line scheduling, we reason as follows.
If we look at a fastest way through station S1,j, it must go through station j - 1 on either line 1
or line 2. Thus, the fastest way through station S1,j is either
•
•

the fastest way through station S1,j-1 and then directly through station S1,j, or
the fastest way through station S2,j-1, a transfer from line 2 to line 1, and then through
station S1,j.

Using symmetric reasoning, the fastest way through station S2,j is either
•
•

the fastest way through station S2,j-1 and then directly through station S2,j, or
the fastest way through station S1,j-1, a transfer from line 1 to line 2, and then through
station S2,j.

To solve the problem of finding the fastest way through station j of either line, we solve the
subproblems of finding the fastest ways through station j - 1 on both lines.
Thus, we can build an optimal solution to an instance of the assembly-line scheduling
problem by building on optimal solutions to subproblems.
Step 2: A recursive solution
The second step of the dynamic-programming paradigm is to define the value of an optimal
solution recursively in terms of the optimal solutions to subproblems. For the assembly-line
scheduling problem, we pick as our subproblems the problems of finding the fastest way
through station j on both lines, for j = 1, 2, ..., n. Let fi[j] denote the fastest possible time to get
a chassis from the starting point through station Si,j.
Our ultimate goal is to determine the fastest time to get a chassis all the way through the
factory, which we denote by f*. The chassis has to get all the way through station n on either
line 1 or line 2 and then to the factory exit. Since the faster of these ways is the fastest way
through the entire factory, we have
(15.1)
It is also easy to reason about f1[1] and f2[1]. To get through station 1 on either line, a chassis
just goes directly to that station. Thus,

