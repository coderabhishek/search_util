Thus, the total time required for a successful search (including the time for computing the
hash function) is Θ(2 + α/2 - α/2n) = Θ(1 + α).

What does this analysis mean? If the number of hash-table slots is at least proportional to the
number of elements in the table, we have n = O(m) and, consequently, α = n/m = O(m)/m =
O(1). Thus, searching takes constant time on average. Since insertion takes O(1) worst-case
time and deletion takes O(1) worst-case time when the lists are doubly linked, all dictionary
operations can be supported in O(1) time on average.
Exercises 11.2-1
Suppose we use a hash function h to hash n distinct keys into an array T of length m.
Assuming simple uniform hashing, what is the expected number of collisions? More
precisely, what is the expected cardinality of {{k, l} : k ≠ l and h(k) = h(l)}?

Exercises 11.2-2
Demonstrate the insertion of the keys 5, 28, 19, 15, 20, 33, 12, 17, 10 into a hash table with
collisions resolved by chaining. Let the table have 9 slots, and let the hash function be h(k) = k
mod 9.

Exercises 11.2-3

