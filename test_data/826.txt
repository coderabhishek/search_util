[2]

If we allow three segments to intersect at the same point, there may be an intervening
segment c that intersects both a and b at point p. That is, we may have a <w c and c <w b for
all sweep lines w to the left of p for which a <w b. Exercise 33.2-8 asks you to show that
ANY-SEGMENTS-INTERSECT is correct even if three segments do intersect at the same
point.

33.3 Finding the convex hull
The convex hull of a set Q of points is the smallest convex polygon P for which each point in
Q is either on the boundary of P or in its interior. (See Exercise 33.1-5 for a precise definition
of a convex polygon.) We denote the convex hull of Q by CH(Q). Intuitively, we can think of
each point in Q as being a nail sticking out from a board. The convex hull is then the shape
formed by a tight rubber band that surrounds all the nails. Figure 33.6 shows a set of points
and its convex hull.

Figure 33.6: A set of points Q = {p0, p1, ..., p12} with its convex hull CH(Q) in gray.
In this section, we shall present two algorithms that compute the convex hull of a set of n
points. Both algorithms output the vertices of the convex hull in counterclockwise order. The
first, known as Graham's scan, runs in O(n lg n) time. The second, called Jarvis's march, runs
in O(nh) time, where h is the number of vertices of the convex hull. As can be seen from
Figure 33.6, every vertex of CH(Q) is a point in Q. Both algorithms exploit this property,
deciding which vertices in Q to keep as vertices of the convex hull and which vertices in Q to
throw out.
There are, in fact, several methods that compute convex hulls in O(n lg n) time. Both
Graham's scan and Jarvis's march use a technique called "rotational sweep," processing
vertices in the order of the polar angles they form with a reference vertex. Other methods
include the following.
•

•

In the incremental method, the points are sorted from left to right, yielding a sequence
p1, p2, ..., pn . At the ith stage, the convex hull of the i - 1 leftmost points, CH({p1,
p2, ..., pi-1}), is updated according to the ith point from the left, thus forming CH({p1,
p2, ..., pi}). As Exercise 33.3-6 asks you to show, this method can be implemented to
take a total of O(n lg n) time.
In the divide-and-conquer method, in Θ(n) time the set of n points is divided into two
subsets, one containing the leftmost ⌈n/2⌉ points and one containing the rightmost

⌊n/2⌋ points, the convex hulls of the subsets are computed recursively, and then a
clever method is used to combine the hulls in O(n) time. The running time is described
by the familiar recurrence T(n) = 2T(n/2) + O(n), and so the divide-and-conquer
method runs in O(n lg n) time.

