Suppose we have a 100,000-character data file that we wish to store compactly. We observe
that the characters in the file occur with the frequencies given by Figure 16.3. That is, only six
different characters appear, and the character a occurs 45,000 times.

a

b

c

d

e

f

Frequency (in thousands) 45 13 12 16 9
5
Fixed-length codeword 000 001 010 011 100 101
Variable-length codeword 0 101 100 111 1101 110
0
Figure 16.3: A character-coding problem. A data file of 100,000 characters contains only the
characters a–f, with the frequencies indicated. If each character is assigned a 3-bit codeword,
the file can be encoded in 300,000 bits. Using the variable-length code shown, the file can be
encoded in 224,000 bits.
There are many ways to represent such a file of information. We consider the problem of
designing a binary character code (or code for short) wherein each character is represented
by a unique binary string. If we use a fixed-length code, we need 3 bits to represent six
characters: a = 000, b = 001, ..., f = 101. This method requires 300,000 bits to code the entire
file. Can we do better?
A variable-length code can do considerably better than a fixed-length code, by giving
frequent characters short codewords and infrequent characters long codewords. Figure 16.3
shows such a code; here the 1-bit string 0 represents a, and the 4-bit string 1100 represents f.
This code requires
(45 · 1 + 13 · 3 + 12 · 3 + 16 · 3 + 9 · 4 + 5 · 4) · 1,000 = 224,000 bits
to represent the file, a savings of approximately 25%. In fact, this is an optimal character code
for this file, as we shall see.
Prefix codes
We consider here only codes in which no codeword is also a prefix of some other codeword.
Such codes are called prefix codes.[2] It is possible to show (although we won't do so here)
that the optimal data compression achievable by a character code can always be achieved with
a prefix code, so there is no loss of generality in restricting attention to prefix codes.
Encoding is always simple for any binary character code; we just concatenate the codewords
representing each character of the file. For example, with the variable-length prefix code of
Figure 16.3, we code the 3-character file abc as 0·101·100 = 0101100, where we use "·" to
denote concatenation.
Prefix codes are desirable because they simplify decoding. Since no codeword is a prefix of
any other, the codeword that begins an encoded file is unambiguous. We can simply identify
the initial codeword, translate it back to the original character, and repeat the decoding

