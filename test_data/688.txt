In the single-pair shortest-path problem, we are given a weighted, directed graph G = (V, E),
with weight function w : E → R mapping edges to real-valued weights, a source vertex s, and
a destination vertex t. We wish to compute the value d[t], which is the weight of a shortest
path from s to t. To express this problem as a linear program, we need to determine a set of
variables and constraints that define when we have a shortest path from s to t. Fortunately, the
Bellman-Ford algorithm does exactly this. When the Bellman-Ford algorithm terminates, it
has computed, for each vertex v, a value d[v] such that for each edge (u, v) E, we have d[v]
≤ d[u] + w(u, v). The source vertex initially receives a value d[s] = 0, which is never changed.
Thus we obtain the following linear program to compute the shortest-path weight from s to t:
(29.44)
subject to
(29.45)
(29.46)
In this linear program, there are |V | variables d[v], one for each vertex v V . There are |E| +
1 constraints, one for each edge plus the additional constraint that the source vertex always
has the value 0.
Maximum flow
The maximum-flow problem can also be expressed as a linear program. Recall that we are
given a directed graph G = (V, E) in which each edge (u, v) E has a nonnegative capacity
c(u, v) ≥ 0, and two distinguished vertices, a sink s and a source t. As defined in Section 26.1,
a flow is a real-valued function f : V × V → R that satisfies three properties: capacity
constraints, skew symmetry, and flow conservation. A maximum flow is a flow that satisfies
these constraints and maximizes the flow value, which is the total flow coming out of the
source. A flow, therefore, satisfies linear constraints, and the value of a flow is a linear
function. Recalling also that we assume that c(u, v) = 0 if (u, v) ∉ E, we can express the
maximum-flow problem as a linear program:
(29.47)
subject to
(29.48)
(29.49)
(29.50)
This linear program has |V|2 variables, corresponding to the flow between each pair of
vertices, and it has 2|V|2 + |V| - 2 constraints.
It is usually more efficient to solve a smaller-sized linear program. The linear program in
(29.47)–(29.50) has, for ease of notation, a flow and capacity of 0 for each pair of vertices u, v
with (u, v) ∉ E. It would be more efficient to rewrite the linear program so that it has O(V +
E) constraints. Exercise 29.2-5 asks you to do so.

