In this section, we shall sometimes abuse our asymptotic notation slightly by using it to
describe the behavior of functions that are defined only over exact powers of b. Recall that the
definitions of asymptotic notations require that bounds be proved for all sufficiently large
numbers, not just those that are powers of b. Since we could make new asymptotic notations
that apply to the set {bi : i = 0, 1,...}, instead of the nonnegative integers, this abuse is minor.
Nevertheless, we must always be on guard when we are using asymptotic notation over a
limited domain so that we do not draw improper conclusions. For example, proving that T (n)
= O(n) when n is an exact power of 2 does not guarantee that T (n) = O(n). The function T (n)
could be defined as

in which case the best upper bound that can be proved is T (n) = O(n2). Because of this sort of
drastic consequence, we shall never use asymptotic notation over a limited domain without
making it absolutely clear from the context that we are doing so.

4.4.1 The proof for exact powers
The first part of the proof of the master theorem analyzes the recurrence (4.5)
T (n) = aT (n/b) + f (n) ,
for the master method, under the assumption that n is an exact power of b > 1, where b need
not be an integer. The analysis is broken into three lemmas. The first reduces the problem of
solving the master recurrence to the problem of evaluating an expression that contains a
summation. The second determines bounds on this summation. The third lemma puts the first
two together to prove a version of the master theorem for the case in which n is an exact
power of b.
Lemma 4.2
Let a â‰¥ 1 and b > 1 be constants, and let f (n) be a nonnegative function defined on exact
powers of b. Define T (n) on exact powers of b by the recurrence

where i is a positive integer. Then
(4.6)

Proof We use the recursion tree in Figure 4.3. The root of the tree has cost f (n), and it has a
children, each with cost f (n/b). (It is convenient to think of a as being an integer, especially
when visualizing the recursion tree, but the mathematics does not require it.) Each of these
children has a children with cost f (n/b2), and thus there are a2 nodes that are distance 2 from

