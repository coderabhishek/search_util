For the basis, consider a wire at depth 0, that is, an input wire ai. The result follows trivially:
when f(a) is applied to the network, the input wire carries f(ai). For the inductive step,
consider a wire at depth d, where d ≥ 1. The wire is the output of a comparator at depth d, and
the input wires to this comparator are at a depth strictly less than d. By the inductive
hypothesis, therefore, if the input wires to the comparator carry values ai and aj when the
input sequence a is applied, then they carry f(ai) and f(aj) when the input sequence f(a) is
applied. By our earlier claim, the output wires of this comparator then carry f(min(ai, aj)) and
f(max(ai, aj)). Since they carry min(ai, aj) and max(ai, aj) when the input sequence is a, the
lemma is proved.

As an example of the application of Lemma 27.1, Figure 27.5(b) shows the sorting network
from Figure 27.2 (repeated in Figure 27.5(a)) with the monotonically increasing function f(x)
= ⌈x/2⌉ applied to the inputs. The value on every wire is f applied to the value on the same
wire in Figure 27.2.

Figure 27.5: (a) The sorting network from Figure 27.2 with input sequence

9, 5, 2, 6 . (b)

The same sorting network with the monotonically increasing function f(x) = f(⌈x/2⌉) applied
to the inputs. Each wire in this network has the value of f applied to the value on the
corresponding wire in (a).
When a comparison network is a sorting network, Lemma 27.1 allows us to prove the
following remarkable result.
Theorem 27.2: (Zero-one principle)
If a comparison network with n inputs sorts all 2n possible sequences of 0's and 1's correctly,
then it sorts all sequences of arbitrary numbers correctly.
Proof Suppose for the purpose of contradiction that the network sorts all zero-one sequences,
but there exists a sequence of arbitrary numbers that the network does not correctly sort. That
is, there exists an input sequence a1, a2,...,an containing elements ai and aj such that ai < aj,
but the network places aj before ai in the output sequence. We define a monotonically
increasing function f as

Since the network places aj before ai in the output sequence when a1, a2,...,an is input, it
follows from Lemma 27.1 that it places f(aj) before f(ai) in the output sequence when f(a1),
f(a2),...,f(an) is input. But since f(aj) = 1 and f(ai) = 0, we obtain the contradiction that the
network fails to sort the zero-one sequence f(a1), f(a2),...,f(an) correctly.

