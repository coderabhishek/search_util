Figure 23.3: The proof of Theorem 23.1. The vertices in S are black, and the vertices in V - S
are white. The edges in the minimum spanning tree T are shown, but the edges in the graph G
are not. The edges in A are shaded, and (u, v) is a light edge crossing the cut (S, V - S). The
edge (x, y) is an edge on the unique path p from u to v in T. A minimum spanning tree T′ that
contains (u, v) is formed by removing the edge (x, y) from T and adding the edge (u, v).
We next show that T′ is a minimum spanning tree. Since (u, v) is a light edge crossing (S, V S) and (x, y) also crosses this cut, w(u, v) ≤ w(x, y). Therefore,
w(T′) = w(T - w(x, y) + w(u, v)
≤ w(T).
But T is a minimum spanning tree, so that w(T) ≤ w(T′); thus, T′ must be a minimum spanning
tree also.
It remains to show that (u, v) is actually a safe edge for A. We have A
(x, y) ∉ A; thus, A
is safe for A.

{(u, v)}

T′, since A

T and

T′. Consequently, since T′ is a minimum spanning tree, (u, v)

Theorem 23.1 gives us a better understanding of the workings of the GENERIC-MST
algorithm on a connected graph G = (V, E). As the algorithm proceeds, the set A is always
acyclic; otherwise, a minimum spanning tree including A would contain a cycle, which is a
contradiction. At any point in the execution of the algorithm, the graph GA = (V, A) is a forest,
and each of the connected components of GA is a tree. (Some of the trees may contain just one
vertex, as is the case, for example, when the algorithm begins: A is empty and the forest
contains |V| trees, one for each vertex.) Moreover, any safe edge (u, v) for A connects distinct
components of GA, since A {(u, v)} must be acyclic.
The loop in lines 2-4 of GENERIC-MST is executed |V| - 1 times as each of the |V| - 1 edges
of a minimum spanning tree is successively determined. Initially, when A = Ø, there are |V|

