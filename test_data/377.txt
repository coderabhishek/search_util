Exercises 18.1-3
Show all legal B-trees of minimum degree 2 that represent {1, 2, 3, 4, 5}.

Exercises 18.1-4
As a function of the minimum degree t, what is the maximum number of keys that can be
stored in a B-tree of height h?

Exercises 18.1-5
Describe the data structure that would result if each black node in a red-black tree were to
absorb its red children, incorporating their children with its own.

[1]

Another common variant on a B-tree, known as a B*-tree, requires each internal node to be
at least 2/3 full, rather than at least half full, as a B-tree requires.

18.2 Basic operations on B-trees
In this section, we present the details of the operations B-TREE-SEARCH, B-TREECREATE, and B-TREE-INSERT. In these procedures, we adopt two conventions:
•

•

The root of the B-tree is always in main memory, so that a DISK-READ on the root is
never required; a DISK-WRITE of the root is required, however, whenever the root
node is changed.
Any nodes that are passed as parameters must already have had a DISK-READ
operation performed on them.

The procedures we present are all "one-pass" algorithms that proceed downward from the root
of the tree, without having to back up.
Searching a B-tree
Searching a B-tree is much like searching a binary search tree, except that instead of making a
binary, or "two-way," branching decision at each node, we make a multiway branching
decision according to the number of the node's children. More precisely, at each internal node
x, we make an (n[x] + 1)-way branching decision.
B-TREE-SEARCH is a straightforward generalization of the TREE-SEARCH procedure
defined for binary search trees. B-TREE-SEARCH takes as input a pointer to the root node x

