of the mark bit, and the other unit compensates for the unit increase in potential due to node y
becoming a root.
Deleting a node
It is easy to delete a node from an n-node Fibonacci heap in O(D(n)) amortized time, as is
done by the following pseudocode. We assume that there is no key value of -∞ currently in
the Fibonacci heap.
FIB-HEAP-DELETE(H, x)
1 FIB-HEAP-DECREASE-KEY(H, x, -∞)
2 FIB-HEAP-EXTRACT-MIN(H)

FIB-HEAP-DELETE is analogous to BINOMIAL-HEAP-DELETE. It makes x become the
minimum node in the Fibonacci heap by giving it a uniquely small key of -∞. Node x is then
removed from the Fibonacci heap by the FIB-HEAP-EXTRACT-MIN procedure. The
amortized time of FIB-HEAP-DELETE is the sum of the O(1) amortized time of FIB-HEAPDECREASE-KEY and the O(D(n)) amortized time of FIB-HEAP-EXTRACT-MIN. Since we
shall see in Section 20.4 that D(n) = O(lg n), the amortized time of FIB-HEAP-DELETE is
O(lg n).
Exercises 20.3-1
Suppose that a root x in a Fibonacci heap is marked. Explain how x came to be a marked root.
Argue that it doesn't matter to the analysis that x is marked, even though it is not a root that
was first linked to another node and then lost one child.

Exercises 20.3-2
Justify the O(1) amortized time of FIB-HEAP-DECREASE-KEY as an average cost per
operation by using aggregate analysis.

20.4 Bounding the maximum degree
To prove that the amortized time of FIB-HEAP-EXTRACT-MIN and FIB-HEAP-DELETE is
O(lg n), we must show that the upper bound D(n) on the degree of any node of an n-node
Fibonacci heap is O(lg n). By Exercise 20.2-3, when all trees in the Fibonacci heap are
unordered binomial trees, D(n) = ⌊lg n⌋. The cuts that occur in FIB-HEAP-DECREASEKEY, however, may cause trees within the Fibonacci heap to violate the unordered binomial
tree properties. In this section, we shall show that because we cut a node from its parent as
soon as it loses two children, D(n) is O(lg n). In particular, we shall show that D(n) ≤ ⌊logφn⌋,
.
where
The key to the analysis is as follows. For each node x within a Fibonacci heap, define size(x)
to be the number of nodes, including x itself, in the subtree rooted at x. (Note that x need not

