O(1) time, and the time to sort the edges in line 4 is O(E lg E). (We will account for the cost
of the |V| MAKE-SET operations in the for loop of lines 2-3 in a moment.) The for loop of
lines 5-8 performs O(E) FIND-SET and UNION operations on the disjoint-set forest. Along
with the |V| MAKE-SET operations, these take a total of O((V + E) α(V)) time, where α is the
very slowly growing function defined in Section 21.4. Because G is assumed to be connected,
we have |E| ≥ |V| - 1, and so the disjoint-set operations take O(E α(V)) time. Moreover, since
α(|V|) = O(lg V) = O(lg E), the total running time of Kruskal's algorithm is O(E lg E).
Observing that |E| < |V|2, we have lg |E| = O(lg V), and so we can restate the running time of
Kruskal's algorithm as O(E lg V).
Prim's algorithm
Like Kruskal's algorithm, Prim's algorithm is a special case of the generic minimumspanning-tree algorithm from Section 23.1. Prim's algorithm operates much like Dijkstra's
algorithm for finding shortest paths in a graph, which we shall see in Section 24.3. Prim's
algorithm has the property that the edges in the set A always form a single tree. As is
illustrated in Figure 23.5, the tree starts from an arbitrary root vertex r and grows until the tree
spans all the vertices in V. At each step, a light edge is added to the tree A that connects A to
an isolated vertex of GA = (V, A). By Corollary 23.2, this rule adds only edges that are safe for
A; therefore, when the algorithm terminates, the edges in A form a minimum spanning tree.
This strategy is greedy since the tree is augmented at each step with an edge that contributes
the minimum amount possible to the tree's weight.

Figure 23.5: The execution of Prim's algorithm on the graph from Figure 23.1. The root vertex
is a. Shaded edges are in the tree being grown, and the vertices in the tree are shown in black.
At each step of the algorithm, the vertices in the tree determine a cut of the graph, and a light
edge crossing the cut is added to the tree. In the second step, for example, the algorithm has a
choice of adding either edge (b, c) or edge (a, h) to the tree since both are light edges crossing
the cut.

