If we store n keys in a hash table of size m = n2 using a hash function h randomly chosen from
a universal class of hash functions, then the probability of there being any collisions is less
than 1/2.
Proof There are

pairs of keys that may collide; each pair collides with probability 1/m if h is

chosen at random from a universal family ℋ of hash functions. Let X be a random variable
that counts the number of collisions. When m = n2, the expected number of collisions is

(Note that this analysis is similar to the analysis of the birthday paradox in Section 5.4.1.)
Applying Markov's inequality (C.29), Pr{X ≥ t} ≤ E[X] /t, with t = 1 completes the proof.

In the situation described in Theorem 11.9, where m = n2, it follows that a hash function h
chosen at random from ℋ is more likely than not to have no collisions. Given the set K of n
keys to be hashed (remember that K is static), it is thus easy to find a collision-free hash
function h with a few random trials.
When n is large, however, a hash table of size m = n2 is excessive. Therefore, we adopt the
two-level hashing approach, and we use the approach of Theorem 11.9 only to hash the
entries within each slot. An outer, or first-level, hash function h is used to hash the keys into
is used to
m = n slots. Then, if nj keys hash to slot j, a secondary hash table Sj of size
provide collision-free constant time lookup.
We now turn to the issue of ensuring that the overall memory used is O(n). Since the size mj
of the jth secondary hash table grows quadratically with the number nj of keys stored, there is
a risk that the overall amount of storage could be excessive.
If the first-level table size is m = n, then the amount of memory used is O(n) for the primary
hash table, for the storage of the sizes mj of the secondary hash tables, and for the storage of
the parameters aj and bj defining the secondary hash functions hj drawn from the class
of
Section 11.3.3 (except when nj = 1 and we use a = b = 0). The following theorem and a
corollary provide a bound on the expected combined sizes of all the secondary hash tables. A
second corollary bounds the probability that the combined size of all the secondary hash
tables is superlinear.
Theorem 11.10
If we store n keys in a hash table of size m = n using a hash function h randomly chosen from
a universal class of hash functions, then

