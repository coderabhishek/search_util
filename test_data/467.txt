Proof : Suppose that there is a back edge (u, v). Then, vertex v is an ancestor of vertex u in
the depth-first forest. There is thus a path from v to u in G, and the back edge (u, v) completes
a cycle.
‚áê: Suppose that G contains a cycle c. We show that a depth-first search of G yields a back
edge. Let v be the first vertex to be discovered in c, and let (u, v) be the preceding edge in c.
At time d[v], the vertices of c form a path of white vertices from v to u. By the white-path
theorem, vertex u becomes a descendant of v in the depth-first forest. Therefore, (u, v) is a
back edge.

Theorem 22.12
TOPOLOGICAL-SORT (G) produces a topological sort of a directed acyclic graph G.
Proof Suppose that DFS is run on a given dag G = (V, E) to determine finishing times for its
vertices. It suffices to show that for any pair of distinct vertices u, v V , if there is an edge in
G from u to v, then f[v] < f[u]. Consider any edge (u, v) explored by DFS(G). When this edge
is explored, v cannot be gray, since then v would be an ancestor of u and (u, v) would be a
back edge, contradicting Lemma 22.11. Therefore, v must be either white or black. If v is
white, it becomes a descendant of u, and so f[v] < f[u]. If v is black, it has already been
finished, so that f[v] has already been set. Because we are still exploring from u, we have yet
to assign a timestamp to f[u], and so once we do, we will have f[v] < f[u] as well. Thus, for
any edge (u, v) in the dag, we have f[v] < f[u], proving the theorem.

Exercises 22.4-1
Show the ordering of vertices produced by TOPOLOGICAL-SORT when it is run on the dag
of Figure 22.8, under the assumption of Exercise 22.3-2.

Figure 22.8: A dag for topological sorting.
Exercises 22.4-2
Give a linear-time algorithm that takes as input a directed acyclic graph G = (V, E) and two
vertices s and t, and returns the number of paths from s to t in G. For example, in the directed

