high[i] < low[i']
≤ low[i"].
By the interval trichotomy, i and i" do not overlap. We conclude that whether or not
any interval in x's left subtree overlaps i, setting x to left[x] maintains the invariant.
•

Termination: If the loop terminates when x = nil[T], there is no interval overlapping i
in the subtree rooted at x. The contrapositive of the loop invariant implies that T
contains no interval that overlaps i. Hence it is correct to return x = nil[T].

Thus, the INTERVAL-SEARCH procedure works correctly.
Exercises 14.3-1
Write pseudocode for LEFT-ROTATE that operates on nodes in an interval tree and updates
the max fields in O(1) time.

Exercises 14.3-2
Rewrite the code for INTERVAL-SEARCH so that it works properly when all intervals are
assumed to be open.

Exercises 14.3-3
Describe an efficient algorithm that, given an interval i, returns an interval overlapping i that
has the minimum low endpoint, or nil[T] if no such interval exists.

Exercises 14.3-4
Given an interval tree T and an interval i, describe how all intervals in T that overlap i can be
listed in O(min(n, k lg n)) time, where k is the number of intervals in the output list.
(Optional: Find a solution that does not modify the tree.)

Exercises 14.3-5

