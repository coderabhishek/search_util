Exercises 6.5-5
Argue the correctness of HEAP-INCREASE-KEY using the following loop invariant:
•

At the start of each iteration of the while loop of lines 4-6, the array A[1 heapsize[A]] satisfies the max-heap property, except that there may be one violation: A[i]
may be larger than A[PARENT(i)].

Exercises 6.5-6
Show how to implement a first-in, first-out queue with a priority queue. Show how to
implement a stack with a priority queue. (Queues and stacks are defined in Section 10.1.)

Exercises 6.5-7
The operation HEAP-DELETE(A, i) deletes the item in node i from heap A. Give an
implementation of HEAP-DELETE that runs in O(lg n) time for an n-element max-heap.

Exercises 6.5-8
Give an O(n lg k)-time algorithm to merge k sorted lists into one sorted list, where n is the
total number of elements in all the input lists. (Hint: Use a min-heap for k-way merging.)

Problems 6-1: Building a heap using insertion
The procedure BUILD-MAX-HEAP in Section 6.3 can be implemented by repeatedly using
MAX-HEAP-INSERT to insert the elements into the heap. Consider the following
implementation:
BUILD-MAX-HEAP'(A)
1 heap-size[A] ← 1
2 for i ← 2 to length[A]
3
do MAX-HEAP-INSERT(A, A[i])

a. Do the procedures BUILD-MAX-HEAP and BUILD-MAX-HEAP' always create the
same heap when run on the same input array? Prove that they do, or provide a
counterexample.

