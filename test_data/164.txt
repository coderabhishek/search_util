When we call RANDOMIZED-SELECT and choose A[q] as the pivot element, we do not
know, a priori, if we will terminate immediately with the correct answer, recurse on the
subarray A[p .. q - 1], or recurse on the subarray A[q + 1 .. r]. This decision depends on where
the ith smallest element falls relative to A[q]. Assuming that T(n) is monotonically increasing,
we can bound the time needed for the recursive call by the time needed for the recursive call
on the largest possible input. In other words, we assume, to obtain an upper bound, that the ith
element is always on the side of the partition with the greater number of elements. For a given
call of RANDOMIZED-SELECT, the indicator random variable Xk has the value 1 for exactly
one value of k, and it is 0 for all other k. When Xk = 1, the two subarrays on which we might
recurse have sizes k - 1 and n - k. Hence, we have the recurrence

Taking expected values, we have

In order to apply equation (C.23), we rely on Xk and T(max(k - 1, n - k)) being independent
random variables. Exercise 9.2-2 asks you to justify this assertion.
Let us consider the expression max(k - 1, n - k). We have

If n is even, each term from T(⌈n/2⌉) up to T(n - 1) appears exactly twice in the summation,
and if n is odd, all these terms appear twice and T(⌊n/2⌋) appears once. Thus, we have

We solve the recurrence by substitution. Assume that T(n) ≤ cn for some constant c that
satisfies the initial conditions of the recurrence. We assume that T(n) = O(1) for n less than
some constant; we shall pick this constant later. We also pick a constant a such that the
function described by the O(n) term above (which describes the non-recursive component of
the running time of the algorithm) is bounded from above by an for all n > 0. Using this
inductive hypothesis, we have

