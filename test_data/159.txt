Suppose that, instead of sorting an array, we just require that the elements increase on
average. More precisely, we call an n-element array A k-sorted if, for all i = 1, 2, . . ., n - k, the
following holds:

a. What does it mean for an array to be 1-sorted?
b. Give a permutation of the numbers 1, 2, . . ., 10 that is 2-sorted, but not sorted.
c. Prove that an n-element array is k-sorted if and only if A[i] ≤ A[i + k] for all i = 1, 2, . .
., n - k.
d. Give an algorithm that k-sorts an n-element array in O(n lg(n/k)) time.
We can also show a lower bound on the time to produce a k-sorted array, when k is a constant.
e. Show that a k-sorted array of length n can be sorted in O(n lg k) time. (Hint: Use the
solution to Exercise 6.5-8.)
f. Show that when k is a constant, it requires Θ(n lg n) time to k-sort an n-element array.
(Hint: Use the solution to the previous part along with the lower bound on comparison
sorts.)

Problems 8-6: Lower bound on merging sorted lists
The problem of merging two sorted lists arises frequently. It is used as a subroutine of
MERGE-SORT, and the procedure to merge two sorted lists is given as MERGE in Section
2.3.1. In this problem, we will show that there is a lower bound of 2n - 1 on the worst-case
number of comparisons required to merge two sorted lists, each containing n items.
First we will show a lower bound of 2n - o(n) comparisons by using a decision tree.
a. Show that, given 2n numbers, there are possible ways to divide them into two sorted
lists, each with n numbers.
b. Using a decision tree, show that any algorithm that correctly merges two sorted lists
uses at least 2n - o(n) comparisons.
Now we will show a slightly tighter 2n - 1 bound.
c. Show that if two elements are consecutive in the sorted order and from opposite lists,
then they must be compared.
d. Use your answer to the previous part to show a lower bound of 2n - 1 comparisons for
merging two sorted lists.

Chapter notes

