2
3
4

if tail[Q] = length[Q]
then tail[Q] ← 1
else tail[Q] ← tail[Q] + 1

DEQUEUE(Q)
1 x ← Q[head[Q]]
2 if head[Q] = length[Q]
3
then head[Q] ← 1
4
else head[Q] ← head[Q] + 1
5 return x

Figure 10.2 shows the effects of the ENQUEUE and DEQUEUE operations. Each operation
takes O(1) time.
Exercises 10.1-1
Using Figure 10.1 as a model, illustrate the result of each operation in the sequence PUSH(S,
4), PUSH(S, 1), PUSH(S, 3), POP(S), PUSH(S, 8), and POP(S) on an initially empty stack S
stored in array S[1 6].

Exercises 10.1-2
Explain how to implement two stacks in one array A[1 n] in such a way that neither stack
overflows unless the total number of elements in both stacks together is n. The PUSH and
POP operations should run in O(1) time.

Exercises 10.1-3
Using Figure 10.2 as a model, illustrate the result of each operation in the sequence
ENQUEUE(Q, 4), ENQUEUE(Q, 1), ENQUEUE(Q, 3), DEQUEUE(Q), ENQUEUE(Q, 8),
and DEQUEUE(Q) on an initially empty queue Q stored in array Q[1 6].

Exercises 10.1-4
Rewrite ENQUEUE and DEQUEUE to detect underflow and overflow of a queue.

Exercises 10.1-5

