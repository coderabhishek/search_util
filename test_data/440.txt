+ 1) or level(x) to increase (which occurs if iter(x) increases to at least rank[x] + 1). In either
case, by Lemma 21.9, we have φq(x) ≤ φq-1(x) - 1. Hence, x's potential decreases by at least 1.
The amortized cost of the FIND-SET operation is the actual cost plus the change in potential.
The actual cost is O(s), and we have shown that the total potential decreases by at least max(0,
s - (α(n) + 2)). The amortized cost, therefore, is at most O(s) - (s - (α(n) + 2)) = O(s) - s +
O(α(n)) = O(α(n)), since we can scale up the units of potential to dominate the constant
hidden in O(s).

Putting the preceding lemmas together yields the following theorem.
Theorem 21.13
A sequence of m MAKE-SET, UNION, and FIND-SET operations, n of which are MAKESET operations, can be performed on a disjoint-set forest with union by rank and path
compression in worst-case time O(m α(n)).
Proof Immediate from Lemmas 21.7, 21.10, 21.11, and 21.12.

Exercises 21.4-1
Prove Lemma 21.4.

Exercises 21.4-2

Prove that every node has rank at most ⌊lg n⌋.

Exercises 21.4-3
In light of Exercise 21.4-2, how many bits are necessary to store rank[x] for each node x?

Exercises 21.4-4

