Let G = (V, E) be a weighted, directed graph with weight function w : E → {1, 2, ..., W } for
some positive integer W , and assume that no two vertices have the same shortest-path
weights from source vertex s. Now suppose that we define an unweighted, directed graph G' =
(V V', E') by replacing each edge (u, v) E with w(u, v) unit-weight edges in series. How
many vertices does G' have? Now suppose that we run a breadth-first search on G'. Show that
the order in which vertices in V are colored black in the breadth-first search of G' is the same
as the order in which the vertices of V are extracted from the priority queue in line 5 of
DIJKSTRA when run on G.

Exercises 24.3-6
Let G = (V, E) be a weighted, directed graph with weight function w : E → {0, 1, ..., W } for
some nonnegative integer W . Modify Dijkstra's algorithm to compute the shortest paths from
a given source vertex s in O(W V + E) time.

Exercises 24.3-7
Modify your algorithm from Exercise 24.3-6 to run in O((V + E) lg W ) time. (Hint: How
many distinct shortest-path estimates can there be in V - S at any point in time?)

Exercises 24.3-8
Suppose that we are given a weighted, directed graph G = (V, E) in which edges that leave the
source vertex s may have negative weights, all other edge weights are nonnegative, and there
are no negative-weight cycles. Argue that Dijkstra's algorithm correctly finds shortest paths
from s in this graph.

24.4 Difference constraints and shortest paths
Chapter 29 studies the general linear-programming problem, in which we wish to optimize a
linear function subject to a set of linear inequalities. In this section, we investigate a special
case of linear programming that can be reduced to finding shortest paths from a single source.
The single-source shortest-paths problem that results can then be solved using the BellmanFord algorithm, thereby also solving the linear-programming problem.
Linear programming
In the general linear-programming problem, we are given an m × n matrix A, an m-vector b,
and an n-vector c. We wish to find a vector x of n elements that maximizes the objective
function
subject to the m constraints given by Ax ≤ b.

