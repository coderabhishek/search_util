Classification of edges
Another interesting property of depth-first search is that the search can be used to classify the
edges of the input graph G = (V, E). This edge classification can be used to glean important
information about a graph. For example, in the next section, we shall see that a directed graph
is acyclic if and only if a depth-first search yields no "back" edges (Lemma 22.11).
We can define four edge types in terms of the depth-first forest Gπ produced by a depth-first
search on G.
1. Tree edges are edges in the depth-first forest Gπ. Edge (u, v) is a tree edge if v was first
discovered by exploring edge (u, v).
2. Back edges are those edges (u, v) connecting a vertex u to an ancestor v in a depthfirst tree. Self-loops, which may occur in directed graphs, are considered to be back
edges.
3. Forward edges are those nontree edges (u, v) connecting a vertex u to a descendant v
in a depth-first tree.
4. Cross edges are all other edges. They can go between vertices in the same depth-first
tree, as long as one vertex is not an ancestor of the other, or they can go between
vertices in different depth-first trees.
In Figures 22.4 and 22.5, edges are labeled to indicate their type. Figure 22.5(c) also shows
how the graph of Figure 22.5(a) can be redrawn so that all tree and forward edges head
downward in a depth-first tree and all back edges go up. Any graph can be redrawn in this
fashion.
The DFS algorithm can be modified to classify edges as it encounters them. The key idea is
that each edge (u, v) can be classified by the color of the vertex v that is reached when the
edge is first explored (except that forward and cross edges are not distinguished):
1. WHITE indicates a tree edge,
2. GRAY indicates a back edge, and
3. BLACK indicates a forward or cross edge.
The first case is immediate from the specification of the algorithm. For the second case,
observe that the gray vertices always form a linear chain of descendants corresponding to the
stack of active DFS-VISIT invocations; the number of gray vertices is one more than the
depth in the depth-first forest of the vertex most recently discovered. Exploration always
proceeds from the deepest gray vertex, so an edge that reaches another gray vertex reaches an
ancestor. The third case handles the remaining possibility; it can be shown that such an edge
(u, v) is a forward edge if d[u] < d[v] and a cross edge if d[u] > d[v]. (See Exercise 22.3-4.)
In an undirected graph, there may be some ambiguity in the type classification, since (u, v)
and (v, u) are really the same edge. In such a case, the edge is classified as the first type in the
classification list that applies. Equivalently (see Exercise 22.3-5), the edge is classified
according to whichever of (u, v) or (v, u) is encountered first during the execution of the
algorithm.
We now show that forward and cross edges never occur in a depth-first search of an
undirected graph.

