vertices are in the same connected component. Figure 21.1(b) illustrates how the disjoint sets
are computed by CONNECTED-COMPONENTS.
In an actual implementation of this connected-components algorithm, the representations of
the graph and the disjoint-set data structure would need to reference each other. That is, an
object representing a vertex would contain a pointer to the corresponding disjoint-set object,
and vice-versa. These programming details depend on the implementation language, and we
do not address them further here.
Exercises 21.1-1
Suppose that CONNECTED-COMPONENTS is run on the undirected graph G = (V, E),
where V = {a, b, c, d, e, f, g, h, i, j, k} and the edges of E are processed in the following order:
(d, i), (f, k), (g, i), (b, g), (a, h), (i, j), (d, k), (b, j), (d, f), (g, j), (a, e), (i, d). List the vertices in
each connected component after each iteration of lines 3-5.

Exercises 21.1-2
Show that after all edges are processed by CONNECTED-COMPONENTS, two vertices are
in the same connected component if and only if they are in the same set.

Exercises 21.1-3
During the execution of CONNECTED-COMPONENTS on an undirected graph G = (V, E)
with k connected components, how many times is FIND-SET called? How many times is
UNION called? Express your answers in terms of |V|, |E|, and k.

[1]

When the edges of the graph are "static"-not changing over time-the connected components
can be computed faster by using depth-first search (Exercise 22.3-11). Sometimes, however,
the edges are added "dynamically" and we need to maintain the connected components as
each edge is added. In this case, the implementation given here can be more efficient than
running a new depth-first search for each new edge.

21.2 Linked-list representation of disjoint sets
A simple way to implement a disjoint-set data structure is to represent each set by a linked
list. The first object in each linked list serves as its set's representative. Each object in the
linked list contains a set member, a pointer to the object containing the next set member, and a
pointer back to the representative. Each list maintains pointers head, to the representative, and
tail, to the last object in the list. Figure 21.2(a) shows two sets. Within each linked list, the

