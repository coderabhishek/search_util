Let P be a pattern of length m, and let π be the prefix function for P. For q = 1, 2, . . . , m, if
π[q] > 0, then π[q] - 1 π*[q - 1].
Proof If r = π[q] > 0, then r < q and Pr ⊐ Pq; thus, r - 1 < q - 1 and Pr-1 ⊐ Pq-1 (by dropping
the last character from Pr and Pq). By Lemma 32.5, therefore, π[q] - 1 = r - 1 π*[q - 1].

For q = 2, 3, . . . , m, define the subset Eq-1

π*[q - 1] by

Eq-1 = {k π*[q - 1] : P[k + 1] = P[q]}
= {k : k < q - 1 and P ⊐ P and P[k + 1] = P[q]} (by Lemma 32.5)
k

= {k : k < q - 1 and P

k+1

q-1

⊐ Pq}.

The set Eq-1 consists of the values k < q - 1 for which Pk ⊐ Pq-1 and for which Pk+1 ⊐ Pq,
because P[k + 1] = P[q]. Thus, Eq-1 consists of those values k π*[q - 1] such that we can
extend Pk to Pk+1 and get a proper suffix of Pq.
Corollary 32.7
Let P be a pattern of length m, and let π be the prefix function for P. For q = 2, 3, . . . , m,

Proof If Eq-1 is empty, there is no k π*[q - 1] (including k = 0) for which we can extend Pk
to Pk+1 and get a proper suffix of Pq. Therefore π[q] = 0.
If Eq-1 is nonempty, then for each k
the definition of π[q], we have

Eq-1 we have k + 1 < q and Pk+1 ⊐ Pq. Therefore, from

(32.7)
Note that π[q] > 0. Let r = π[q] - 1, so that r + 1 = π[q]. Since r + 1 > 0, we have P[r + 1] =
P[q]. Furthermore, by Lemma 32.6, we have r π*[q - 1]. Therefore, r Eq-1, and so r ≤
max {k Eq-1} or, equivalently,
(32.8)
Combining equations (32.7) and (32.8) completes the proof.

We now finish the proof that COMPUTE-PREFIX-FUNCTION computes π correctly. In the
procedure COMPUTE-PREFIX-FUNCTION, at the start of each iteration of the for loop of

