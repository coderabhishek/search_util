In each call DFS-VISIT(u), vertex u is initially white. Line 1 paints u gray, line 2 increments
the global variable time, and line 3 records the new value of time as the discovery time d[u].
Lines 4-7 examine each vertex v adjacent to u and recursively visit v if it is white. As each
vertex v Adj[u] is considered in line 4, we say that edge (u, v) is explored by the depth-first
search. Finally, after every edge leaving u has been explored, lines 8-9 paint u black and
record the finishing time in f [u].
Note that the results of depth-first search may depend upon the order in which the vertices are
examined in line 5 of DFS, and upon the order in which the neighbors of a vertex are visited
in line 4 of DFS-VISIT. These different visitation orders tend not to cause problems in
practice, as any depth-first search result can usually be used effectively, with essentially
equivalent results.
What is the running time of DFS? The loops on lines 1-3 and lines 5-7 of DFS take time Θ(V),
exclusive of the time to execute the calls to DFS-VISIT. As we did for breadth-first search,
we use aggregate analysis. The procedure DFS-VISIT is called exactly once for each vertex v
V , since DFS-VISIT is invoked only on white vertices and the first thing it does is paint the
vertex gray. During an execution of DFS-VISIT(v), the loop on lines 4-7 is executed |Adj[v]|
times. Since

the total cost of executing lines 4-7 of DFS-VISIT is Θ(E). The running time of DFS is
therefore Θ(V + E).
Properties of depth-first search
Depth-first search yields valuable information about the structure of a graph. Perhaps the most
basic property of depth-first search is that the predecessor subgraph Gπ does indeed form a
forest of trees, since the structure of the depth-first trees exactly mirrors the structure of
recursive calls of DFS-VISIT. That is, u = π[v] if and only if DFS-VISIT(v) was called during
a search of u's adjacency list. Additionally, vertex v is a descendant of vertex u in the depthfirst forest if and only if v is discovered during the time in which u is gray.
Another important property of depth-first search is that discovery and finishing times have
parenthesis structure. If we represent the discovery of vertex u with a left parenthesis "(u"
and represent its finishing by a right parenthesis "u)", then the history of discoveries and
finishings makes a well-formed expression in the sense that the parentheses are properly
nested. For example, the depth-first search of Figure 22.5(a) corresponds to the
parenthesization shown in Figure 22.5(b). Another way of stating the condition of parenthesis
structure is given in the following theorem.

