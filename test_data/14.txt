that the problem is NP-complete, you can instead spend your time developing an efficient
algorithm that gives a good, but not the best possible, solution.
As a concrete example, consider a trucking company with a central warehouse. Each day, it
loads up the truck at the warehouse and sends it around to several locations to make
deliveries. At the end of the day, the truck must end up back at the warehouse so that it is
ready to be loaded for the next day. To reduce costs, the company wants to select an order of
delivery stops that yields the lowest overall distance traveled by the truck. This problem is the
well-known "traveling-salesman problem," and it is NP-complete. It has no known efficient
algorithm. Under certain assumptions, however, there are efficient algorithms that give an
overall distance that is not too far above the smallest possible. Chapter 35 discusses such
"approximation algorithms."
Exercises 1.1-1
Give a real-world example in which one of the following computational problems appears:
sorting, determining the best order for multiplying matrices, or finding the convex hull.

Exercises 1.1-2
Other than speed, what other measures of efficiency might one use in a real-world setting?

Exercises 1.1-3
Select a data structure that you have seen previously, and discuss its strengths and limitations.

Exercises 1.1-4
How are the shortest-path and traveling-salesman problems given above similar? How are
they different?

Exercises 1.1-5
Come up with a real-world problem in which only the best solution will do. Then come up
with one in which a solution that is "approximately" the best is good enough.

1.2 Algorithms as a technology

