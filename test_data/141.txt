The version of PARTITION given in this chapter is not the original partitioning algorithm.
Here is the original partition algorithm, which is due to T. Hoare:
HOARE-PARTITION(A, p, r)
1 x ← A[p]
2 i ← p - 1
3 j ← r + 1
4 while TRUE
5
do repeat j ← j - 1
6
until A[j] ≤ x
7
repeat i ← i + 1
8
until A[i] ≥ x
9
if i < j
10
then exchange A[i] ↔ A[j]
11
else return j

a. Demonstrate the operation of HOARE-PARTITION on the array A = 13, 19, 9, 5,
12, 8, 7, 4, 11, 2, 6, 21 , showing the values of the array and auxiliary values after
each iteration of the for loop in lines 4-11.
The next three questions ask you to give a careful argument that the procedure HOAREPARTITION is correct. Prove the following:
b. The indices i and j are such that we never access an element of A outside the subarray
A[p r].
c. When HOARE-PARTITION terminates, it returns a value j such that p ≤ j < r.
d. Every element of A[p j] is less than or equal to every element of A[j +1 r] when
HOARE-PARTITION terminates.
The PARTITION procedure in Section 7.1 separates the pivot value (originally in A[r]) from
the two partitions it forms. The HOARE-PARTITION procedure, on the other hand, always
places the pivot value (originally in A[p]) into one of the two partitions A[p j] and A[j + 1
r]. Since p ≤ j < r, this split is always nontrivial.
e. Rewrite the QUICKSORT procedure to use HOARE-PARTITION.

Problems 7-2: Alternative quicksort analysis
An alternative analysis of the running time of randomized quicksort focuses on the expected
running time of each individual recursive call to QUICKSORT, rather than on the number of
comparisons performed.
a. Argue that, given an array of size n, the probability that any particular element is
chosen as the pivot is 1/n. Use this to define indicator random variables Xi = I{ith
smallest element is chosen as the pivot}. What is E [Xi]?
b. Let T (n) be a random variable denoting the running time of quicksort on an array of
size n. Argue that

