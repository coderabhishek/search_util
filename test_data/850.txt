Because A accepts L in time O(nk) for some constant k, there also exists a constant c such that
A accepts L in at most T = cnk steps. For any input string x, the algorithm A′ simulates the
action of A for time T. At the end of time T, algorithm A′ inspects the behavior of A. If A has
accepted x, then A′ accepts x by outputting a 1. If A has not accepted x, then A′ rejects x by
outputting a 0. The overhead of A′ simulating A does not increase the running time by more
than a polynomial factor, and thus A′ is a polynomial-time algorithm that decides L.

Note that the proof of Theorem 34.2 is nonconstructive. For a given language L P, we may
not actually know a bound on the running time for the algorithm A that accepts L.
Nevertheless, we know that such a bound exists, and therefore, that an algorithm A′ exists that
can check the bound, even though we may not be able to find the algorithm A′ easily.
Exercises 34.1-1
Define the optimization problem LONGEST-PATH-LENGTH as the relation that associates
each instance of an undirected graph and two vertices with the number of edges in the longest
simple path between the two vertices. Define the decision problem LONGEST-PATH = { G,
u, v, k : G = (V, E) is an undirected graph, u, v V , k ≥ 0 is an integer, and there exists a
simple path from u to v in G consisting of at least k edges}. Show that the optimization
problem LONGEST-PATH-LENGTH can be solved in polynomial time if and only if
LONGEST-PATH P.

Exercises 34.1-2
Give a formal definition for the problem of finding the longest simple cycle in an undirected
graph. Give a related decision problem. Give the language corresponding to the decision
problem.

Exercises 34.1-3
Give a formal encoding of directed graphs as binary strings using an adjacency-matrix
representation. Do the same using an adjacency-list representation. Argue that the two
representations are polynomially related.

Exercises 34.1-4

