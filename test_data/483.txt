6
7
8
9

do if FIND-SET(u) ≠ FIND-SET(v)
then A ← A
{(u, v)}
UNION(u, v)
return A

Kruskal's algorithm works as shown in Figure 23.4. Lines 1-3 initialize the set A to the empty
set and create |V| trees, one containing each vertex. The edges in E are sorted into
nondecreasing order by weight in line 4. The for loop in lines 5-8 checks, for each edge (u, v),
whether the endpoints u and v belong to the same tree. If they do, then the edge (u, v) cannot
be added to the forest without creating a cycle, and the edge is discarded. Otherwise, the two
vertices belong to different trees. In this case, the edge (u, v) is added to A in line 7, and the
vertices in the two trees are merged in line 8.

Figure 23.4: The execution of Kruskal's algorithm on the graph from Figure 23.1. Shaded
edges belong to the forest A being grown. The edges are considered by the algorithm in sorted
order by weight. An arrow points to the edge under consideration at each step of the
algorithm. If the edge joins two distinct trees in the forest, it is added to the forest, thereby
merging the two trees.
The running time of Kruskal's algorithm for a graph G = (V, E) depends on the
implementation of the disjoint-set data structure. We shall assume the disjoint-set-forest
implementation of Section 21.3 with the union-by-rank and path-compression heuristics, since
it is the asymptotically fastest implementation known. Initializing the set A in line 1 takes

