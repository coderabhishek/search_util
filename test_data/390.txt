6.5, when we use a mergeable heap in an application, we often store a handle to the
corresponding application object in each mergeable-heap element, as well as a handle to
corresponding mergeable-heap element in each application object. The exact nature of these
handles depends on the application and its implementation.
Section 19.1 defines binomial heaps after first defining their constituent binomial trees. It also
introduces a particular representation of binomial heaps. Section 19.2 shows how we can
implement operations on binomial heaps in the time bounds given in Figure 19.1.
[1]

As mentioned in the introduction to Part V, our default mergeable heaps are mergeable minheaps, and so the operations MINIMUM, EXTRACT-MIN, and DECREASE-KEY apply.
Alternatively, we could define a mergeable max-heap with the operations MAXIMUM,
EXTRACT-MAX, and INCREASE-KEY.

19.1 Binomial trees and binomial heaps
A binomial heap is a collection of binomial trees, so this section starts by defining binomial
trees and proving some key properties. We then define binomial heaps and show how they
can be represented.

19.1.1 Binomial trees
The binomial tree Bk is an ordered tree (see Section B.5.2) defined recursively. As shown in
Figure 19.2(a), the binomial tree B0 consists of a single node. The binomial tree Bk consists of
two binomial trees Bk-1 that are linked together: the root of one is the leftmost child of the root
of the other. Figure 19.2(b) shows the binomial trees B0 through B4.

Figure 19.2: (a) The recursive definition of the binomial tree Bk. Triangles represent rooted
subtrees. (b) The binomial trees B0 through B4. Node depths in B4 are shown. (c) Another way
of looking at the binomial tree Bk.
Some properties of binomial trees are given by the following lemma.

