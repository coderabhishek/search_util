Figure 12.1: Binary search trees. For any node x, the keys in the left subtree of x are at most
key[x], and the keys in the right subtree of x are at least key[x]. Different binary search trees
can represent the same set of values. The worst-case running time for most search-tree
operations is proportional to the height of the tree. (a) A binary search tree on 6 nodes with
height 2. (b) A less efficient binary search tree with height 4 that contains the same keys.
The keys in a binary search tree are always stored in such a way as to satisfy the binarysearch-tree property:
•

Let x be a node in a binary search tree. If y is a node in the left subtree of x, then key[y]
≤ key[x]. If y is a node in the right subtree of x, then key[x] ≤ key[y].

Thus, in Figure 12.1(a), the key of the root is 5, the keys 2, 3, and 5 in its left subtree are no
larger than 5, and the keys 7 and 8 in its right subtree are no smaller than 5. The same
property holds for every node in the tree. For example, the key 3 in Figure 12.1(a) is no
smaller than the key 2 in its left subtree and no larger than the key 5 in its right subtree.
The binary-search-tree property allows us to print out all the keys in a binary search tree in
sorted order by a simple recursive algorithm, called an inorder tree walk. This algorithm is so
named because the key of the root of a subtree is printed between the values in its left subtree
and those in its right subtree. (Similarly, a preorder tree walk prints the root before the values
in either subtree, and a postorder tree walk prints the root after the values in its subtrees.) To
use the following procedure to print all the elements in a binary search tree T , we call
INORDER-TREE-WALK (root[T]).
INORDER-TREE-WALK(x)
1 if x ≠ NIL
2
then INORDER-TREE-WALK(left[x])
3
print key[x]
4
INORDER-TREE-WALK(right[x])

As an example, the inorder tree walk prints the keys in each of the two binary search trees
from Figure 12.1 in the order 2, 3, 5, 5, 7, 8. The correctness of the algorithm follows by
induction directly from the binary-search-tree property.
It takes Θ(n) time to walk an n-node binary search tree, since after the initial call, the
procedure is called recursively exactly twice for each node in the tree—once for its left child
and once for its right child. The following theorem gives a more formal proof that it takes
linear time to perform an inorder tree walk.
Theorem 12.1

