3

do swap A[i] ↔ A[RANDOM(i, n)]

We will use a loop invariant to show that procedure RANDOMIZE-IN-PLACE produces a
uniform random permutation. Given a set of n elements, a k-permutation is a sequence
containing k of the n elements. (See Appendix B.) There are n!/(n - k)! such possible kpermutations.
Lemma 5.5
Procedure RANDOMIZE-IN-PLACE computes a uniform random permutation.
Proof We use the following loop invariant:
•

Just prior to the ith iteration of the for loop of lines 2-3, for each possible (i - 1)permutation, the subarray A[1 .. i - 1] contains this (i - 1)-permutation with probability
(n - i + 1)!/n!.

We need to show that this invariant is true prior to the first loop iteration, that each iteration of
the loop maintains the invariant, and that the invariant provides a useful property to show
correctness when the loop terminates.
•

•

Initialization: Consider the situation just before the first loop iteration, so that i = 1.
The loop invariant says that for each possible 0-permutation, the sub-array A[1 .. 0]
contains this 0-permutation with probability (n - i + 1)!/n! = n!/n! = 1. The subarray
A[1 .. 0] is an empty subarray, and a 0-permutation has no elements. Thus, A[1 .. 0]
contains any 0-permutation with probability 1, and the loop invariant holds prior to the
first iteration.
Maintenance: We assume that just before the (i - 1)st iteration, each possible (i - 1)permutation appears in the subarray A[1 .. i - 1] with probability (n - i + 1)!/n!, and we
will show that after the ith iteration, each possible i-permutation appears in the
subarray A[1 .. i] with probability (n - i)!/n!. Incrementing i for the next iteration will
then maintain the loop invariant.
Let us examine the ith iteration. Consider a particular i-permutation, and denote the
elements in it by <x1, x2, ..., xi>. This permutation consists of an (i - 1)-permutation
<x1, ..., xi-1> followed by the value xi that the algorithm places in A[i]. Let E1 denote
the event in which the first i - 1 iterations have created the particular (i - 1)permutation <x1,..., xi-1> in A[1 .. i - 1]. By the loop invariant, Pr {E1} = (n - i + 1)!/n!.
Let E2 be the event that ith iteration puts xi in position A[i]. The i-permutation <x1, ...,
xi> is formed in A[1 .. i] precisely when both E1 and E2 occur, and so we wish to
compute Pr {E2 ∩ E1}. Using equation (C.14), we have
Pr {E2 ∩ E1} = Pr{E2 | E1}Pr{E1}.
The probability Pr {E2 | E1} equals 1/(n-i + 1) because in line 3 the algorithm chooses
xi randomly from the n - i + 1 values in positions A[i .. n]. Thus, we have

