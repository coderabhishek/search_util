Because edges not in G are so costly, there is a gap of at least |V | between the cost of a tour
that is a hamiltonian cycle in G (cost |V |) and the cost of any other tour (cost at least ρ|V | + |V
|).
What happens if we apply the approximation algorithm A to the traveling-salesman problem
(G′, c)? Because A is guaranteed to return a tour of cost no more than times the cost of an
optimal tour, if G contains a hamiltonian cycle, then A must return it. If G has no hamiltonian
cycle, then A returns a tour of cost more than ρ|V |. Therefore, we can use A to solve the
hamiltonian-cycle problem in polynomial time.

The proof of Theorem 35.3 is an example of a general technique for proving that a problem
cannot be approximated well. Suppose that given an NP-hard problem X, we can produce a
minimization problem Y such that "yes" instances of X correspond to instances of Y with value
at most k (for some k), but that "no" instances of X correspond to instances of Y with value
greater than ρk. Then we have shown that, unless P = NP, there is no ρ-approximation
algorithm for problem Y.
Exercises 35.2-1
Suppose that a complete undirected graph G = (V, E) with at least 3 vertices has a cost
function c that satisfies the triangle inequality. Prove that c(u, v) ≥ 0 for all u, v V.

Exercises 35.2-2
Show how in polynomial time we can transform one instance of the traveling-salesman
problem into another instance whose cost function satisfies the triangle inequality. The two
instances must have the same set of optimal tours. Explain why such a polynomial-time
transformation does not contradict Theorem 35.3, assuming that P ≠ NP.

Exercises 35.2-3
Consider the following closest-point heuristic for building an approximate traveling-salesman
tour. Begin with a trivial cycle consisting of a single arbitrarily chosen vertex. At each step,
identify the vertex u that is not on the cycle but whose distance to any vertex on the cycle is
minimum. Suppose that the vertex on the cycle that is nearest u is vertex v. Extend the cycle
to include u by inserting u just after v. Repeat until all vertices are on the cycle. Prove that this
heuristic returns a tour whose total cost is not more than twice the cost of an optimal tour.

