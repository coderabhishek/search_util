Consider inserting the keys 10, 22, 31, 4, 15, 28, 17, 88, 59 into a hash table of length m = 11
using open addressing with the primary hash function h'(k) = k mod m. Illustrate the result of
inserting these keys using linear probing, using quadratic probing with c1 = 1 and c2 = 3, and
using double hashing with h2(k) = 1 + (k mod (m - 1)).

Exercises 11.4-2
Write pseudocode for HASH-DELETE as outlined in the text, and modify HASH-INSERT to
handle the special value DELETED.

Exercises 11.4-3: ⋆
Suppose that we use double hashing to resolve collisions; that is, we use the hash function
h(k, i) = (h1(k)+ih2(k)) mod m. Show that if m and h2(k) have greatest common divisor d ≥ 1
for some key k, then an unsuccessful search for key k examines (1/d)th of the hash table
before returning to slot h1(k). Thus, when d = 1, so that m and h2(k) are relatively prime, the
search may examine the entire hash table. (Hint: See Chapter 31.)

Exercises 11.4-4
Consider an open-address hash table with uniform hashing. Give upper bounds on the
expected number of probes in an unsuccessful search and on the expected number of probes in
a successful search when the load factor is 3/4 and when it is 7/8.

Exercises 11.4-5: ⋆
Consider an open-address hash table with a load factor α. Find the nonzero value α for which
the expected number of probes in an unsuccessful search equals twice the expected number of
probes in a successful search. Use the upper bounds given by Theorems 11.6 and 11.8 for
these expected numbers of probes.

11.5

Perfect hashing

Although hashing is most often used for its excellent expected performance, hashing can be
used to obtain excellent worst-case performance when the set of keys is static: once the keys

