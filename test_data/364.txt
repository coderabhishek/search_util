We start with the case in which the ith operation is TABLE-INSERT. The analysis is identical
to that for table expansion in Section 17.4.1 if αi-1 ≥ 1/2. Whether the table expands or not, the
amortized cost of the operation is at most 3. If αi-1 < 1/2, the table cannot expand as a result
of the operation, since expansion occurs only when αi-1 = 1. If αi < 1/2 as well, then the
amortized cost of the ith operation is
= ci + Φi - Φi-1
= 1 + (sizei/2 - numi) - (sizei-1/2 - numi-1)
= 1 + (sizei/2 - numi) - (sizei/2 - (numi - 1))
= 0.
If αi-1 < 1/2 but αi ≥ 1/2, then
= ci+Φi-Φi-1
= 1 + (2 · numi - sizei) - (sizei-1 /2 - numi-1)
= 1 + (2(numi-1 +1) - sizei-1) - (sizei-1/2 - numi-1)
= 3 · numi-1 - 3/2; sizei-1 +3
= 3αi-1 sizei-1 - 3/2 sizei-1 +3
< 3/2 sizei-1 - 3/2 sizei-1 +3
= 3.
Thus, the amortized cost of a TABLE-INSERT operation is at most 3.
We now turn to the case in which the ith operation is TABLE-DELETE. In this case, numi =
numi-1 -1. If ai-1 < 1/2, then we must consider whether the operation causes a contraction. If it
does not, then sizei = sizei-1 and the amortized cost of the operation is
= ci + Φi - Φi-1
= 1 + (sizei /2 - numi) - (sizei-1 /2 - numi-1)
= 1 + (sizei /2 - numi) - (sizei /2 - (numi +1))
= 2.
If αi-1 < 1/2 and the ith operation does trigger a contraction, then the actual cost of the
operation is ci = numi +1, since we delete one item and move numi items. We have sizei/2 =
sizei-1/4 = numi-1 = numi +1, and the amortized cost of the operation is
= ci + Φi - Φi-1
= (numi +1) + (sizei/2 - numi) (sizei-1/2 - numi-1) = (numi +1) + ((numi +1) - numi) - ((2 ·
numi +2) - (numi +1))
= 1.
When the ith operation is a TABLE-DELETE and αi-1 ≥ 1/2, the amortized cost is also
bounded above by a constant. The analysis is left as Exercise 17.4-2.
In summary, since the amortized cost of each operation is bounded above by a constant, the
actual time for any sequence of n operations on a dynamic table is O(n).

