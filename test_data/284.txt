Exercises 15.1-5
Professor Canty conjectures that there might exist some ei, ai,j, and ti,j values for which
FASTEST-WAY produces li[j] values such that l1[j] = 2 and l2[j] = 1 for some station number
j. Assuming that all transfer costs ti,j are nonnegative, show that the professor is wrong.

15.2 Matrix-chain multiplication
Our next example of dynamic programming is an algorithm that solves the problem of matrixchain multiplication. We are given a sequence (chain) A1, A2, ..., An of n matrices to be
multiplied, and we wish to compute the product
(15.10)
We can evaluate the expression (15.10) using the standard algorithm for multiplying pairs of
matrices as a subroutine once we have parenthesized it to resolve all ambiguities in how the
matrices are multiplied together. A product of matrices is fully parenthesized if it is either a
single matrix or the product of two fully parenthesized matrix products, surrounded by
parentheses. Matrix multiplication is associative, and so all parenthesizations yield the same
product. For example, if the chain of matrices is A1, A2, A3, A4 , the product A1 A2 A3 A4 can
be fully parenthesized in five distinct ways:
(A1 (A2 (A3 A4))) ,
(A1 ((A2 A3) A4)) ,
((A1 A2) (A3 A4)) ,
((A1 (A2 A3)) A4) ,
(((A1 A2) A3) A4).
The way we parenthesize a chain of matrices can have a dramatic impact on the cost of
evaluating the product. Consider first the cost of multiplying two matrices. The standard
algorithm is given by the following pseudocode. The attributes rows and columns are the
numbers of rows and columns in a matrix.
MATRIX-MULTIPLY(A, B)
1 if columns[A] ≠ rows[B]
2
then error "incompatible dimensions"
3
else for i ← 1 to rows[A]
4
do for j ← 1 to columns[B]
5
do C[i, j] ← 0
6
for k ← 1 to columns[A]
7
do C[i, j] ← C[i, j] + A[i, k] · B[k, j]
8
return C

