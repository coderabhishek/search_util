a. Case 2 makes z point to p[z], which is red. No further change to z or its color occurs in
cases 2 and 3.
b. Case 3 makes p[z] black, so that if p[z] is the root at the start of the next iteration, it is
black.
c. As in case 1, properties 1, 3, and 5 are maintained in cases 2 and 3.
Since node z is not the root in cases 2 and 3, we know that there is no violation of
property 2. Cases 2 and 3 do not introduce a violation of property 2, since the only
node that is made red becomes a child of a black node by the rotation in case 3.
Cases 2 and 3 correct the lone violation of property 4, and they do not intro- duce
another violation.
Having shown that each iteration of the loop maintains the invariant, we have shown that RBINSERT-FIXUP correctly restores the red-black properties.
Analysis
What is the running time of RB-INSERT? Since the height of a red-black tree on n nodes is
O(lg n), lines 1–16 of RB-INSERT take O(lg n) time. In RB-INSERT- FIXUP, the while loop
repeats only if case 1 is executed, and then the pointer z moves two levels up the tree. The
total number of times the while loop can be executed is therefore O(lg n). Thus, RB-INSERT
takes a total of O(lg n) time. Interestingly, it never performs more than two rotations, since the
while loop terminates if case 2 or case 3 is executed.
Exercises 13.3-1
In line 16 of RB-INSERT, we set the color of the newly inserted node z to red. Notice that if
we had chosen to set z's color to black, then property 4 of a red-black tree would not be
violated. Why didn't we choose to set z's color to black?

Exercises 13.3-2
Show the red-black trees that result after successively inserting the keys 41, 38, 31, 12, 19, 8
into an initially empty red-black tree.

Exercises 13.3-3
Suppose that the black-height of each of the subtrees α, β, γ, δ, ε in Figures 13.5 and 13.6 is k.
Label each node in each figure with its black-height to verify that property 5 is preserved by
the indicated transformation.

