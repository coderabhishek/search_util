MAKE-SET(x1)
MAKE-SET(x2)

1
1

⋮
MAKE-SET(xn
UNION(x1, x2)
UNION(x2, x3)
UNION(x3, x4)

⋮
1
1
2
3

⋮
UNION(xn-1, xn)

⋮
n-1

Figure 21.3: A sequence of 2n - 1 operations on n objects that takes Θ(n2) time, or Θ(n) time
per operation on average, using the linked-list set representation and the simple
implementation of UNION.
The total number of operations is 2n - 1, and so each operation on average requires Θ(n) time.
That is, the amortized time of an operation is Θ(n).
A weighted-union heuristic
In the worst case, the above implementation of the UNION procedure requires an average of
Θ(n) time per call because we may be appending a longer list onto a shorter list; we must
update the pointer to the representative for each member of the longer list. Suppose instead
that each list also includes the length of the list (which is easily maintained) and that we
always append the smaller list onto the longer, with ties broken arbitrarily. With this simple
weighted-union heuristic, a single UNION operation can still take Ω(n) time if both sets have
Ω(n) members. As the following theorem shows, however, a sequence of m MAKE-SET,
UNION, and FIND-SET operations, n of which are MAKE-SET operations, takes O(m + n lg
n) time.
Theorem 21.1
Using the linked-list representation of disjoint sets and the weighted-union heuristic, a
sequence of m MAKE-SET, UNION, and FIND-SET operations, n of which are MAKE-SET
operations, takes O(m + n lg n) time.
Proof We start by computing, for each object in a set of size n, an upper bound on the number
of times the object's pointer back to the representative has been updated. Consider a fixed
object x. We know that each time x's representative pointer was updated, x must have started
in the smaller set. The first time x's representative pointer was updated, therefore, the resulting
set must have had at least 2 members. Similarly, the next time x's representative pointer was
updated, the resulting set must have had at least 4 members. Continuing on, we observe that
for any k ≤ n, after x's representative pointer has been updated ⌈lg k⌉ times, the resulting set
must have at least k members. Since the largest set has at most n members, each object's
representative pointer has been updated at most ⌈lg n⌉ times over all the UNION operations.

