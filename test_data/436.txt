(21.1)
which we see as follows. We have
rank[p[x]] ≥ rank[x] + 1 (by Lemma 21.4)
= A0(rank[x]) (by definition of A0(j)) ,
which implies that level(x) ≥ 0, and we have
Aα(n)(rank[x]) ≥ Aα(n)(1) (because Ak(j) is strictly increasing)
≥n
(by the definition of α(n))
> rank[p[x]] (by Lemma 21.6) ,
which implies that level(x) < α(n). Note that because rank[p[x]] monotonically increases over
time, so does level(x).
The second auxiliary function is

That is, iter(x) is the largest number of times we can iteratively apply Alevel(x), applied initially
to x's rank, before we get a value greater than x's parent's rank.
We claim that
(21.2)
which we see as follows. We have

which implies that iter(x) ≥ 1, and we have

which implies that iter(x) ≤ rank[x]. Note that because rank[p[x]] monotonically increases
over time, in order for iter(x) to decrease, level(x) must increase. As long as level(x) remains
unchanged, iter(x) must either increase or remain unchanged.
With these auxiliary functions in place, we are ready to define the potential of node x after q
operations:

The next two lemmas give useful properties of node potentials.

