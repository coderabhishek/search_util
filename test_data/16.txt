By using an algorithm whose running time grows more slowly, even with a poor compiler,
computer B runs 20 times faster than computer A! The advantage of merge sort is even more
pronounced when we sort ten million numbers: where insertion sort takes approximately 2.3
days, merge sort takes under 20 minutes. In general, as the problem size increases, so does the
relative advantage of merge sort.
Algorithms and other technologies
The example above shows that algorithms, like computer hardware, are a technology. Total
system performance depends on choosing efficient algorithms as much as on choosing fast
hardware. Just as rapid advances are being made in other computer technologies, they are
being made in algorithms as well.
You might wonder whether algorithms are truly that important on contemporary computers in
light of other advanced technologies, such as
•
•
•
•

hardware with high clock rates, pipelining, and superscalar architectures,
easy-to-use, intuitive graphical user interfaces (GUIs),
object-oriented systems, and
local-area and wide-area networking.

The answer is yes. Although there are some applications that do not explicitly require
algorithmic content at the application level (e.g., some simple web-based applications), most
also require a degree of algorithmic content on their own. For example, consider a web-based
service that determines how to travel from one location to another. (Several such services
existed at the time of this writing.) Its implementation would rely on fast hardware, a
graphical user interface, wide-area networking, and also possibly on object orientation.
However, it would also require algorithms for certain operations, such as finding routes
(probably using a shortest-path algorithm), rendering maps, and interpolating addresses.
Moreover, even an application that does not require algorithmic content at the application
level relies heavily upon algorithms. Does the application rely on fast hardware? The
hardware design used algorithms. Does the application rely on graphical user interfaces? The
design of any GUI relies on algorithms. Does the application rely on networking? Routing in
networks relies heavily on algorithms. Was the application written in a language other than
machine code? Then it was processed by a compiler, interpreter, or assembler, all of which
make extensive use of algorithms. Algorithms are at the core of most technologies used in
contemporary computers.
Furthermore, with the ever-increasing capacities of computers, we use them to solve larger
problems than ever before. As we saw in the above comparison between insertion sort and
merge sort, it is at larger problem sizes that the differences in efficiencies between algorithms
become particularly prominent.
Having a solid base of algorithmic knowledge and technique is one characteristic that
separates the truly skilled programmers from the novices. With modern computing

