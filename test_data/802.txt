Here is an intuitive rationale for defining δ(q, a) = σ(Pqa). The machine maintains as an
invariant of its operation that
(32.4)
this result is proved as Theorem 32.4 below. In words, this means that after scanning the first i
characters of the text string T , the machine is in state φ(Ti) = q, where q = σ(Ti) is the length
of the longest suffix of Ti that is also a prefix of the pattern P. If the next character scanned is
T [i + 1] = a, then the machine should make a transition to state σ(Ti+1) = σ(Tia). The proof of
the theorem shows that σ(Tia) = σ(Pqa). That is, to compute the length of the longest suffix of
Tia that is a prefix of P, we can compute the longest suffix of Pqa that is a prefix of P. At each
state, the machine only needs to know the length of the longest prefix of P that is a suffix of
what has been read so far. Therefore, setting δ(q, a) = σ(Pqa) maintains the desired invariant
(32.4). This informal argument will be made rigorous shortly.
In the string-matching automaton of Figure 32.7, for example, δ(5, b) = 4. We make this
transition because if the automaton reads a b in state q = 5, then Pq b = ababab, and the
longest prefix of P that is also a suffix of ababab is P4 = abab.
To clarify the operation of a string-matching automaton, we now give a simple, efficient
program for simulating the behavior of such an automaton (represented by its transition
function δ) in finding occurrences of a pattern P of length m in an input text T [1 n]. As for
any string-matching automaton for a pattern of length m, the state set Q is {0, 1, . . . , m}, the
start state is 0, and the only accepting state is state m.
FINITE-AUTOMATON-MATCHER(T, δ, m)
1 n ← length[T]
2 q ← 0
3 for i ← 1 to n
4
do q ← δ(q, T[i])
5
if q = m
6
then print "Pattern occurs with shift" i - m

The simple loop structure of FINITE-AUTOMATON-MATCHER implies that its matching
time on a text string of length n is Θ(n). This matching time, however, does not include the
preprocessing time required to compute the transition function δ. We address this problem
later, after proving that the procedure FINITE-AUTOMATON-MATCHER operates
correctly.
Consider the operation of the automaton on an input text T [1

n]. We shall prove that the

automaton is in state σ(Ti) after scanning character T [i]. Since σ(Ti) = m if and only if P ⊐ Ti,
the machine is in the accepting state m if and only if the pattern P has just been scanned. To
prove this result, we make use of the following two lemmas about the suffix function σ.
Lemma 32.2: (Suffix-function inequality)
For any string x and character a, we have σ(xa) ≤ σ(x) + 1.
Proof Referring to Figure 32.8, let r = σ(xa). If r = 0, then the conclusion σ(xa) = r ≤ σ(x) + 1
is trivially satisfied, by the nonnegativity of σ(x). So assume that r > 0. Now, Pr ⊐ xa, by the

