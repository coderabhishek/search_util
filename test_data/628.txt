Data pass through lg n stages in the network SORTER[n]. Each of the individual inputs to the
network is already a sorted 1-element sequence. The first stage of SORTER[n] consists of n/2
copies of MERGER[2] that work in parallel to merge pairs of 1-element sequences to produce
sorted sequences of length 2. The second stage consists of n/4 copies of MERGER[4] that
merge pairs of these 2-element sorted sequences to produce sorted sequences of length 4. In
general, for k = 1, 2,..., lg n, stage k consists of n/2k copies of MERGER[2k] that merge pairs
of the 2k-1-element sorted sequences to produce sorted sequences of length 2k. At the final
stage, one sorted sequence consisting of all the input values is produced. This sorting network
can be shown by induction to sort zero-one sequences, and consequently, by the zero-one
principle (Theorem 27.2), it can sort arbitrary values.
We can analyze the depth of the sorting network recursively. The depth D(n) of SORTER[n]
is the depth D(n/2) of SORTER[n/2] (there are two copies of SORTER[n/2], but they operate
in parallel) plus the depth lg n of MERGER[n]. Consequently, the depth of SORTER[n] is
given by the recurrence

whose solution is D(n) = Î˜(lg2 n). (Use the version of the master method given in Exercise
4.4-2.) Thus, we can sort n numbers in parallel in O(lg2 n) time.
Exercises 27.5-1
How many comparators are there in SORTER[n]?

Exercises 27.5-2
Show that the depth of SORTER[n] is exactly (lg n)(lg n + 1)/2.

Exercises 27.5-3
Suppose that we have 2n elements a1, a2,..., a2n and wish to partition them into the n
smallest and the n largest. Prove that we can do this in constant additional depth after
separately sorting a1, a2,..., an and an+1, an+2,..., a2n .

Exercises 27.5-4:
Let S(k) be the depth of a sorting network with k inputs, and let M(k) be the depth of a
merging network with 2k inputs. Suppose that we have a sequence of n numbers to be sorted

