Figure 34.10: Reducing circuit satisfiability to formula satisfiability. The formula produced by
the reduction algorithm has a variable for each wire in the circuit.
The formula φ produced by the reduction algorithm is the AND of the circuit-output variable
with the conjunction of clauses describing the operation of each gate. For the circuit in the
figure, the formula is
φ = x10

(x4 ↔ ¬x3)
(x5 ↔ (x1 x2))
(x6 ↔ ¬x4)
(x7 ↔ (x1 x2 x4))
(x8 ↔ (x5 x6))
(x9 ↔ (x6 x7))
(x10 (x7 x8 x9)).

Given a circuit C, it is straightforward to produce such a formula φ in polynomial time.
Why is the circuit C satisfiable exactly when the formula φ is satisfiable? If C has a satisfying
assignment, each wire of the circuit has a well-defined value, and the output of the circuit is 1.
Therefore, the assignment of wire values to variables in φ makes each clause of φ evaluate to
1, and thus the conjunction of all evaluates to 1. Conversely, if there is an assignment that
causes φ to evaluate to 1, the circuit C is satisfiable by an analogous argument. Thus, we have
shown that CIRCUIT-SAT ≤P SAT, which completes the proof.

3-CNF satisfiability
Many problems can be proved NP-complete by reduction from formula satisfiability. The
reduction algorithm must handle any input formula, though, and this requirement can lead to a
huge number of cases that must be considered. It is often desirable, therefore, to reduce from a
restricted language of boolean formulas, so that fewer cases need be considered. Of course,
we must not restrict the language so much that it becomes polynomial-time solvable. One
convenient language is 3-CNF satisfiability, or 3-CNF-SAT.
We define 3-CNF satisfiability using the following terms. A literal in a boolean formula is an
occurrence of a variable or its negation. A boolean formula is in conjunctive normal form, or
CNF, if it is expressed as an AND of clauses, each of which is the OR of one or more literals.
A boolean formula is in 3-conjunctive normal form, or 3-CNF, if each clause has exactly
three distinct literals.

