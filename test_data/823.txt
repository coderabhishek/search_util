Each iteration of the for loop of lines 3-11 processes one event point p. If p is the left
endpoint of a segment s, line 5 adds s to the total order, and lines 6-7 return TRUE if s
intersects either of the segments it is consecutive with in the total order defined by the sweep
line passing through p. (A boundary condition occurs if p lies on another segment s′. In this
case, we require only that s and s′ be placed consecutively into T.) If p is the right endpoint of
a segment s, then s is to be deleted from the total order. Lines 9-10 return TRUE if there is an
intersection between the segments surrounding s in the total order defined by the sweep line
passing through p; these segments will become consecutive in the total order when s is
deleted. If these segments do not intersect, line 11 deletes segment s from the total order.
Finally, if no intersections are found in processing all the 2n event points, line 12 returns
FALSE.
Correctness
To show that ANY-SEGMENTS-INTERSECT is correct, we will prove that the call ANYSEGMENTS-INTERSECT(S) returns TRUE if and only if there is an intersection among the
segments in S.
It is easy to see that ANY-SEGMENTS-INTERSECT returns TRUE (on lines 7 and 10) only
if it finds an intersection between two of the input segments. Hence, if it returns TRUE, there
is an intersection.
We also need to show the converse: that if there is an intersection, then ANY-SEGMENTSINTERSECT returns TRUE. Let us suppose that there is at least one intersection. Let p be the
leftmost intersection point, breaking ties by choosing the one with the lowest y-coordinate,
and let a and b be the segments that intersect at p. Since no intersections occur to the left of p,
the order given by T is correct at all points to the left of p. Because no three segments
intersect at the same point, there exists a sweep line z at which a and b become consecutive in
the total order.[2] Moreover, z is to the left of p or goes through p. There exists a segment
endpoint q on sweep line z that is the event point at which a and b become consecutive in the
total order. If p is on sweep line z, then q = p. If p is not on sweep line z, then q is to the left of
p. In either case, the order given by T is correct just before q is encountered. (Here is where
we use the lexicographic order in which the algorithm processes event points. Because p is the
lowest of the leftmost intersection points, even if p is on sweep line z and there is another
intersection point p′ on z, event point q = p is processed before the other intersection p′ can
interfere with the total order T. Moreover, even if p is the left endpoint of one segment, say a,
and the right endpoint of the other segment, say b, because left endpoint events occur before
right endpoint events, segment b is in T when segment a is first encountered.) Either event
point q is processed by ANY-SEGMENTS-INTERSECT or it is not processed.
If q is processed by ANY-SEGMENTS-INTERSECT, there are only two possibilities for the
action taken:
1. Either a or b is inserted into T, and the other segment is above or below it in the total
order. Lines 4-7 detect this case.
2. Segments a and b are already in T, and a segment between them in the total order is
deleted, making a and b become consecutive. Lines 8-11 detect this case.
In either case, the intersection p is found and ANY-SEGMENTS-INTERSECT returns TRUE.

