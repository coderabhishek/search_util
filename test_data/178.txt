Whereas a stack allows insertion and deletion of elements at only one end, and a queue allows
insertion at one end and deletion at the other end, a deque (double-ended queue) allows
insertion and deletion at both ends. Write four O(1)-time procedures to insert elements into
and delete elements from both ends of a deque constructed from an array.

Exercises 10.1-6
Show how to implement a queue using two stacks. Analyze the running time of the queue
operations.

Exercises 10.1-7
Show how to implement a stack using two queues. Analyze the running time of the stack
operations.

10.2 Linked lists
A linked list is a data structure in which the objects are arranged in a linear order. Unlike an
array, though, in which the linear order is determined by the array indices, the order in a
linked list is determined by a pointer in each object. Linked lists provide a simple, flexible
representation for dynamic sets, supporting (though not necessarily efficiently) all the
operations listed on page 198.
As shown in Figure 10.3, each element of a doubly linked list L is an object with a key field
and two other pointer fields: next and prev. The object may also contain other satellite data.
Given an element x in the list, next[x] points to its successor in the linked list, and prev[x]
points to its predecessor. If prev[x] = NIL, the element x has no predecessor and is therefore
the first element, or head, of the list. If next[x] = NIL, the element x has no successor and is
therefore the last element, or tail, of the list. An attribute head[L] points to the first element of
the list. If head[L] = NIL, the list is empty.

Figure 10.3: (a) A doubly linked list L representing the dynamic set {1, 4, 9, 16}. Each
element in the list is an object with fields for the key and pointers (shown by arrows) to the
next and previous objects. The next field of the tail and the prev field of the head are NIL,
indicated by a diagonal slash. The attribute head[L] points to the head. (b) Following the
execution of LIST-INSERT(L, x), where key[x] = 25, the linked list has a new object with key
25 as the new head. This new object points to the old head with key 9. (c) The result of the
subsequent call LIST-DELETE(L, x), where x points to the object with key 4.

