Modify the pseudocode for depth-first search so that it prints out every edge in the directed
graph G, together with its type. Show what modifications, if any, must be made if G is
undirected.

Exercises 22.3-10
Explain how a vertex u of a directed graph can end up in a depth-first tree containing only u,
even though u has both incoming and outgoing edges in G.

Exercises 22.3-11
Show that a depth-first search of an undirected graph G can be used to identify the connected
components of G, and that the depth-first forest contains as many trees as G has connected
components. More precisely, show how to modify depth-first search so that each vertex v is
assigned an integer label cc[v] between 1 and k, where k is the number of connected
components of G, such that cc[u] = cc[v] if and only if u and v are in the same connected
component.

Exercises 22.3-12: â‹†
A directed graph G = (V, E) is singly connected if
implies that there is at most one
simple path from u to v for all vertices u, v V. Give an efficient algorithm to determine
whether or not a directed graph is singly connected.

[2]

It may seem arbitrary that breadth-first search is limited to only one source whereas depthfirst search may search from multiple sources. Although conceptually, breadth-first search
could proceed from multiple sources and depth-first search could be limited to one source, our
approach reflects how the results of these searches are typically used. Breadth-first search is
usually employed to find shortest-path distances (and the associated predecessor subgraph)
from a given source. Depth-first search is often a subroutine in another algorithm, as we shall
see later in this chapter.

22.4 Topological sort
This section shows how depth-first search can be used to perform a topological sort of a
directed acyclic graph, or a "dag" as it is sometimes called. A topological sort of a dag G =
(V, E) is a linear ordering of all its vertices such that if G contains an edge (u, v), then u

