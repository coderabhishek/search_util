Exercises 3.1-5
Prove Theorem 3.1.

Exercises 3.1-6
Prove that the running time of an algorithm is Θ(g(n)) if and only if its worst-case running
time is O(g(n)) and its best-case running time is Ω(g(n)).

Exercises 3.1-7
Prove that o(g(n)) ∩ ω(g(n)) is the empty set.

Exercises 3.1-8
We can extend our notation to the case of two parameters n and m that can go to infinity
independently at different rates. For a given function g(n, m), we denote by O(g(n, m)) the set
of functions
O(g(n, m)) = {f(n, m): there exist positive constants c, n0, and m0 such that 0 ≤ f(n, m) ≤ cg(n,
m) for all n ≥ n0 and m ≥ m0}.
Give corresponding definitions for Ω(g(n, m)) and Θ(g(n, m)).

[1]

Within set notation, a colon should be read as "such that."

[2]

The real problem is that our ordinary notation for functions does not distinguish functions
from values. In λ-calculus, the parameters to a function are clearly specified: the function n2
could be written as λn.n2, or even λr.r2. Adopting a more rigorous notation, however, would
complicate algebraic manipulations, and so we choose to tolerate the abuse.

3.2 Standard notations and common functions
This section reviews some standard mathematical functions and notations and explores the
relationships among them. It also illustrates the use of the asymptotic notations.

