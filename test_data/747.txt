Since Fk is approximately
, where φ is the golden ratio
defined by equation
(3.22), the number of recursive calls in EUCLID is O(lg b). (See Exercise 31.2-5 for a tighter
bound.) It follows that if EUCLID is applied to two β-bit numbers, then it will perform O(β)
arithmetic operations and O(β3) bit operations (assuming that multiplication and division of βbit numbers take O(β2) bit operations). Problem 31-2 asks you to show an O(β2) bound on the
number of bit operations.
The extended form of Euclid's algorithm
We now rewrite Euclid's algorithm to compute additional useful information. Specifically, we
extend the algorithm to compute the integer coefficients x and y such that
(31.16)
Note that x and y may be zero or negative. We shall find these coefficients useful later for the
computation of modular multiplicative inverses. The procedure EXTENDED-EUCLID takes
as input a pair of nonnegative integers and returns a triple of the form (d, x, y) that satisfies
equation (31.16).
EXTENDED-EUCLID(a, b)
1 if b = 0
2
then return (a, 1, 0)
3 (d′, x′, y′) ← EXTENDED-EUCLID(b, a mod b)
4
5

(d, x, y) ← (d′, y′, x′- ⌊a/b⌋ y′)
return (d, x, y)

Figure 31.1 illustrates the execution of EXTENDED-EUCLID with the computation of
gcd(99, 78).

a b ⌊a/b⌋ d x
99 78
78 21

y

1
3

3 -11 14
3 3 11
21 15 1 3 -2 3
15 6 2 3 1 -2
6 3 2 3 0 1
3 0 — 3 1 0
Figure 31.1: An example of the operation of EXTENDED-EUCLID on the inputs 99 and 78.
Each line shows one level of the recursion: the values of the inputs a and b, the computed
value ⌊a/b⌋, and the values d, x, and y returned. The triple (d, x, y) returned becomes the triple
(d′, x′, y′) used in the computation at the next higher level of recursion. The call EXTENDEDEUCLID(99, 78) returns (3, -11, 14), so gcd(99, 78) = 3 and gcd(99, 78) = 3 = 99 · (-11) + 78
· 14.

