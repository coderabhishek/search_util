candidate i is the best candidate you have seen so far. To initialize, the procedure creates a
dummy candidate, numbered 0, who is less qualified than each of the other candidates.
HIRE-ASSISTANT(n)
1 best ← 0
→ candidate 0 is a least-qualified dummy candidate
2 for i ← 1 to n
3
do interview candidate i
4
if candidate i is better than candidate best
5
then best ← i
6
hire candidate i

The cost model for this problem differs from the model described in Chapter 2. We are not
concerned with the running time of HIRE-ASSISTANT, but instead with the cost incurred by
interviewing and hiring. On the surface, analyzing the cost of this algorithm may seem very
different from analyzing the running time of, say, merge sort. The analytical techniques used,
however, are identical whether we are analyzing cost or running time. In either case, we are
counting the number of times certain basic operations are executed.
Interviewing has a low cost, say ci, whereas hiring is expensive, costing ch. Let m be the
number of people hired. Then the total cost associated with this algorithm is O(nci + mch). No
matter how many people we hire, we always interview n candidates and thus always incur the
cost nci associated with interviewing. We therefore concentrate on analyzing mch, the hiring
cost. This quantity varies with each run of the algorithm.
This scenario serves as a model for a common computational paradigm. It is often the case
that we need to find the maximum or minimum value in a sequence by examining each
element of the sequence and maintaining a current "winner." The hiring problem models how
often we update our notion of which element is currently winning.
Worst-case analysis
In the worst case, we actually hire every candidate that we interview. This situation occurs if
the candidates come in increasing order of quality, in which case we hire n times, for a total
hiring cost of O(nch).
It might be reasonable to expect, however, that the candidates do not always come in
increasing order of quality. In fact, we have no idea about the order in which they arrive, nor
do we have any control over this order. Therefore, it is natural to ask what we expect to
happen in a typical or average case.
Probabilistic analysis
Probabilistic analysis is the use of probability in the analysis of problems. Most commonly,
we use probabilistic analysis to analyze the running time of an algorithm. Sometimes, we use
it to analyze other quantities, such as the hiring cost in procedure HIRE-ASSISTANT. In
order to perform a probabilistic analysis, we must use knowledge of, or make assumptions
about, the distribution of the inputs. Then we analyze our algorithm, computing an expected
running time. The expectation is taken over the distribution of the possible inputs. Thus we
are, in effect, averaging the running time over all possible inputs.

