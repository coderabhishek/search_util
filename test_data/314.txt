operations is the sum of the costs of the individual operations in the sequence. For the
sequence above, the cost of transforming algorithm to altruistic is
(3 · cost(copy)) + cost(replace) + cost(delete) + (4 · cost(insert)) + cost(twiddle) + cost(kill).
a. Given two sequences x[1 m] and y[1 n] and set of transformation-operation costs,
the edit distance from x to y is the cost of the least expensive operation sequence that
transforms x to y. Describe a dynamic-programming algorithm that finds the edit
distance from x[1 m] to y[1 n] and prints an optimal operation sequence. Analyze
the running time and space requirements of your algorithm.
The edit-distance problem is a generalization of the problem of aligning two DNA sequences
(see, for example, Setubal and Meidanis [272, Section 3.2]). There are several methods for
measuring the similarity of two DNA sequences by aligning them. One such method to align
two sequences x and y consists of inserting spaces at arbitrary locations in the two sequences
(including at either end) so that the resulting sequences x′ and y′ have the same length but do
not have a space in the same position (i.e., for no position j are both x′[j] and y′[j] a space.)
Then we assign a "score" to each position. Position j receives a score as follows:
•
•
•

+1 if x′[j] = y′[j] and neither is a space,
-1 if x′[j] ≠ y′[j] and neither is a space,
-2 if either x′[j] or y′[j] is a space.

The score for the alignment is the sum of the scores of the individual positions. For example,
given the sequences x = GATCGGCAT and y = CAATGTGAATC, one alignment is
G ATCG GCAT
CAAT GTGAATC
-*++*+*+-++*

A + under a position indicates a score of +1 for that position, a - indicates a score of -1, and a
⋆ indicates a score of -2, so that this alignment has a total score of 6 · 1 - 2 · 1 - 4 · 2 _ -4.
b. Explain how to cast the problem of finding an optimal alignment as an edit distance
problem using a subset of the transformation operations copy, replace, delete, insert,
twiddle, and kill.
Problems 15-4: Planning a company party
Professor Stewart is consulting for the president of a corporation that is planning a company
party. The company has a hierarchical structure; that is, the supervisor relation forms a tree
rooted at the president. The personnel office has ranked each employee with a conviviality
rating, which is a real number. In order to make the party fun for all attendees, the president
does not want both an employee and his or her immediate supervisor to attend.
Professor Stewart is given the tree that describes the structure of the corporation, using the
left-child, right-sibling representation described in Section 10.4. Each node of the tree holds,
in addition to the pointers, the name of an employee and that employee's conviviality ranking.

