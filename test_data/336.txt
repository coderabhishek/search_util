Exercises 16.3-4
Prove that if we order the characters in an alphabet so that their frequencies are monotonically
decreasing, then there exists an optimal code whose codeword lengths are monotonically
increasing.

Exercises 16.3-5
Suppose we have an optimal prefix code on a set C = {0, 1, ..., n - 1} of characters and we
wish to transmit this code using as few bits as possible. Show how to represent any optimal
prefix code on C using only 2n - 1 + n ⌈lg n⌉ bits. (Hint: Use 2n - 1 bits to specify the
structure of the tree, as discovered by a walk of the tree.)

Exercises 16.3-6
Generalize Huffman's algorithm to ternary codewords (i.e., codewords using the symbols 0, 1,
and 2), and prove that it yields optimal ternary codes.

Exercises 16.3-7
Suppose a data file contains a sequence of 8-bit characters such that all 256 characters are
about as common: the maximum character frequency is less than twice the minimum
character frequency. Prove that Huffman coding in this case is no more efficient than using an
ordinary 8-bit fixed-length code.

Exercises 16.3-8
Show that no compression scheme can expect to compress a file of randomly chosen 8-bit
characters by even a single bit. (Hint: Compare the number of files with the number of
possible encoded files.)

[2]

Perhaps "prefix-free codes" would be a better name, but the term "prefix codes" is standard
in the literature.

