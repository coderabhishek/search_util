A sorting network is a comparison network for which the output sequence is monotonically
increasing (that is, b1 ≤ b2 ≤ ··· ≤ bn) for every input sequence. Of course, not every
comparison network is a sorting network, but the network of Figure 27.2 is. To see why,
observe that after time 1, the minimum of the four input values has been produced by either
the top output of comparator A or the top output of comparator B. After time 2, therefore, it
must be on the top output of comparator C. A symmetrical argument shows that after time 2,
the maximum of the four input values has been produced by the bottom output of comparator
D. All that remains is for comparator E to ensure that the middle two values occupy their
correct output positions, which happens at time 3.
A comparison network is like a procedure in that it specifies how comparisons are to occur,
but it is unlike a procedure in that its size-the number of comparators that it contains-depends
on the number of inputs and outputs. Therefore, we shall actually be describing "families" of
comparison networks. For example, the goal of this chapter is to develop a family SORTER
of efficient sorting networks. We specify a given network within a family by the family name
and the number of inputs (which equals the number of outputs). For example, the n-input, noutput sorting network in the family SORTER is named SORTER[n].
Exercises 27.1-1
Show the values that appear on all the wires of the network of Figure 27.2 when it is given the
input sequence 9, 6, 5, 2 .

Exercises 27.1-2
Let n be an exact power of 2. Show how to construct an n-input, n-output comparison network
of depth lg n in which the top output wire always carries the minimum input value and the
bottom output wire always carries the maximum input value.

Exercises 27.1-3
It is possible to take a sorting network and add a comparator to it, resulting in a comparison
network that is not a sorting network. Show how to add a comparator to the network of Figure
27.2 in such a way that the resulting network does not sort every input permutation.

Exercises 27.1-4
Prove that any sorting network on n inputs has depth at least lg n.

