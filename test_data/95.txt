•

Termination: At termination, i = n + 1, and we have that the subarray A[1 .. n] is a
given n-permutation with probability (n - n)!/n! = 1/n!.
Thus, RANDOMIZE-IN-PLACE produces a uniform random permutation.

A randomized algorithm is often the simplest and most efficient way to solve a problem. We
shall use randomized algorithms occasionally throughout this book.
Exercises 5.3-1
Professor Marceau objects to the loop invariant used in the proof of Lemma 5.5. He questions
whether it is true prior to the first iteration. His reasoning is that one could just as easily
declare that an empty subarray contains no 0-permutations. Therefore, the probability that an
empty subarray contains a 0-permutation should be 0, thus invalidating the loop invariant
prior to the first iteration. Rewrite the procedure RANDOMIZE-IN-PLACE so that its
associated loop invariant applies to a nonempty subarray prior to the first iteration, and
modify the proof of Lemma 5.5 for your procedure.

Exercises 5.3-2
Professor Kelp decides to write a procedure that will produce at random any permutation
besides the identity permutation. He proposes the following procedure:
PERMUTE-WITHOUT-IDENTITY(A)
1 n ← length[A]
2 for i ← 1 to n
3
do swap A[i] ↔ A[RANDOM(i + 1, n)]

Does this code do what Professor Kelp intends?

Exercises 5.3-3
Suppose that instead of swapping element A[i] with a random element from the subarray A[i ..
n], we swapped it with a random element from anywhere in the array:

