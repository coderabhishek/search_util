ALLOCATE-OBJECT()
1 if free = NIL
2
then error "out of space"
3
else x ← free
4
free ← next[x]
5
return x
FREE-OBJECT(x)
1 next[x] ← free
2 free ← x

The free list initially contains all n unallocated objects. When the free list has been exhausted,
the ALLOCATE-OBJECT procedure signals an error. It is common to use a single free list to
service several linked lists. Figure 10.8 shows two linked lists and a free list intertwined
through key, next, and prev arrays.

Figure 10.8: Two linked lists, L1 (lightly shaded) and L2 (heavily shaded), and a free list
(darkened) intertwined.
The two procedures run in O(1) time, which makes them quite practical. They can be
modified to work for any omogeneous collection of objects by letting any one of the fields in
the object act like a next field in the free list.
Exercises 10.3-1
Draw a picture of the sequence 13, 4, 8, 19, 5, 11 stored as a doubly linked list using the
multiple-array representation. Do the same for the single-array representation.

Exercises 10.3-2
Write the procedures ALLOCATE-OBJECT and FREE-OBJECT for a homogeneous
collection of objects implemented by the single-array representation.

Exercises 10.3-3
Why don't we need to set or reset the prev fields of objects in the implementation of the
ALLOCATE-OBJECT and FREE-OBJECT procedures?

Exercises 10.3-4

