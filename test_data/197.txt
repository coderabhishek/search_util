consider the expected number of elements examined by the search algorithm, that is, the
number of elements in the list T[h(k)] that are checked to see if their keys are equal to k. We
shall consider two cases. In the first, the search is unsuccessful: no element in the table has
key k. In the second, the search successfully finds an element with key k.
Theorem 11.1
In a hash table in which collisions are resolved by chaining, an unsuccessful search takes
expected time Θ(1 + α), under the assumption of simple uniform hashing.
Proof Under the assumption of simple uniform hashing, any key k not already stored in the
table is equally likely to hash to any of the m slots. The expected time to search
unsuccessfully for a key k is the expected time to search to the end of list T[h(k)], which has
expected length E[nh(k)] = α. Thus, the expected number of elements examined in an
unsuccessful search is α, and the total time required (including the time for computing h(k)) is
Θ(1 + α).

The situation for a successful search is slightly different, since each list is not equally likely to
be searched. Instead, the probability that a list is searched is proportional to the number of
elements it contains. Nonetheless, the expected search time is still Θ(1 + α).
Theorem 11.2
In a hash table in which collisions are resolved by chaining, a successful search takes time
Θ(1 + α), on the average, under the assumption of simple uniform hashing.
Proof We assume that the element being searched for is equally likely to be any of the n
elements stored in the table. The number of elements examined during a successful search for
an element x is 1 more than the number of elements that appear before x in x's list. Elements
before x in the list were all inserted after x was inserted, because new elements are placed at
the front of the list. To find the expected number of elements examined, we take the average,
over the n elements x in the table, of 1 plus the expected number of elements added to x's list
after x was added to the list. Let xi denote the ith element inserted into the table, for i = 1, 2,
..., n, and let ki = key[xi]. For keys ki and kj , we define the indicator random variable Xij =
I{h(ki) = h(kj)}. Under the assumption of simple uniform hashing, we have Pr{h(ki) = h(kj)} =
1/m, and so by Lemma 5.1, E[Xij] = 1/m. Thus, the expected number of elements examined in
a successful search is

