The running time of GREEDY is easy to analyze. Let n denote |S|. The sorting phase of
GREEDY takes time O(n lg n). Line 4 is executed exactly n times, once for each element of S.
Each execution of line 4 requires a check on whether or not the set A {x} is independent. If
each such check takes time O(f(n)), the entire algorithm runs in time O(n lg n + nf (n)).
We now prove that GREEDY returns an optimal subset.
Lemma 16.7: (Matroids exhibit the greedy-choice property)
Suppose that M = (S,ℓ) is a weighted matroid with weight function w and that S is sorted into
monotonically decreasing order by weight. Let x be the first element of S such that {x} is
independent, if any such x exists. If x exists, then there exists an optimal subset A of S that
contains x.
Proof If no such x exists, then the only independent subset is the empty set and we're done.
Otherwise, let B be any nonempty optimal subset. Assume that x ∉ B; otherwise, we let A = B
and we're done.
No element of B has weight greater than w(x). To see this, observe that y B implies that {y}
is independent, since B ℓ andℓ is hereditary. Our choice of x therefore ensures that w(x) ≥
w(y) for any y B.
Construct the set A as follows. Begin with A = {x}. By the choice of x, A is independent.
Using the exchange property, repeatedly find a new element of B that can be added to A until
|A| = |B| while preserving the independence of A. Then, A = B - {y} {x} for some y B, and
so
w(A) = w(B) - w(y) + w(x)
≥ w(B).
Because B is optimal, A must also be optimal, and because x

A, the lemma is proven.

We next show that if an element is not an option initially, then it cannot be an option later.
Lemma 16.8
Let M = (S,ℓ) be any matroid. If x is an element of S that is an extension of some independent
subset A of S, then x is also an extension of Ø.
Proof Since x is an extension of A, we have that A {x} is independent. Sinceℓ is hereditary,
{x} must be independent. Thus, x is an extension of Ø.

