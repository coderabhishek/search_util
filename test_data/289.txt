The tables are rotated so that the main diagonal runs horizontally. Only the main diagonal and
upper triangle are used in the m table, and only the upper triangle is used in the s table. The
minimum number of scalar multiplications to multiply the 6 matrices is m[1, 6] = 15,125. Of
the darker entries, the pairs that have the same shading are taken together in line 9 when
computing

A simple inspection of the nested loop structure of MATRIX-CHAIN-ORDER yields a
running time of O(n3) for the algorithm. The loops are nested three deep, and each loop index
(l, i, and k) takes on at most n -1 values. Exercise 15.2-4 asks you to show that the running
time of this algorithm is in fact also Ω(n3). The algorithm requires Θ(n2) space to store the m
and s tables. Thus, MATRIX-CHAIN-ORDER is much more efficient than the exponentialtime method of enumerating all possible parenthesizations and checking each one.
Step 4: Constructing an optimal solution
Although MATRIX-CHAIN-ORDER determines the optimal number of scalar
multiplications needed to compute a matrix-chain product, it does not directly show how to
multiply the matrices. It is not difficult to construct an optimal solution from the computed
information stored in the table s[1 n, 1 n]. Each entry s[i, j] records the value of k such
that the optimal parenthesization of Ai Ai+1 ··· Aj splits the product between Ak and Ak+1. Thus,
we know that the final matrix multiplication in computing A1 n optimally is A1 s[1,n] As[1,n]+1 n.
The earlier matrix multiplications can be computed recursively, since s[1, s[1, n]] determines
the last matrix multiplication in computing A1 s[1,n], and s[s[1, n] + 1, n] determines the last
matrix multiplication in computing As[1,n]+1 n. The following recursive procedure prints an
optimal parenthesization of Ai, Ai+1, ..., Aj , given the s table computed by MATRIXCHAIN-ORDER and the indices i and j. The initial call PRINT-OPTIMAL-PARENS(s, 1, n)
prints an optimal parenthesization of A1, A2, ..., An .
PRINT-OPTIMAL-PARENS(s, i, j)
1 if i = j
2
then print "A"i
3
else print "("
4
PRINT-OPTIMAL-PARENS(s, i, s[i, j])
5
PRINT-OPTIMAL-PARENS(s, s[i, j] + 1, j)
6
print ")"

In the example of Figure 15.3, the call PRINT-OPTIMAL-PARENS(s, 1, 6) prints the
parenthesization ((A1 (A2 A3)) ((A4 A5)A6)).
Exercises 15.2-1
Find an optimal parenthesization of a matrix-chain product whose sequence of dimensions is
5, 10, 3, 12, 5, 50, 6 .

