Exercises 32.1-2
Suppose that all characters in the pattern P are different. Show how to accelerate NAIVESTRING-MATCHER to run in time O(n) on an n-character text T.

Exercises 32.1-3
Suppose that pattern P and text T are randomly chosen strings of length m and n, respectively,
from the d-ary alphabet Σd = {0, 1, . . . , d - 1}, where d ≥ 2. Show that the expected number
of character-to-character comparisons made by the implicit loop in line 4 of the naive
algorithm is

over all executions of this loop. (Assume that the naive algorithm stops comparing characters
for a given shift once a mismatch is found or the entire pattern is matched.) Thus, for
randomly chosen strings, the naive algorithm is quite efficient.

Exercises 32.1-4

Suppose we allow the pattern P to contain occurrences of a gap character ⋄ that can match
an arbitrary string of characters (even one of zero length). For example, the pattern ab⋄ba⋄c
occurs in the text cabccbacbacab as

and as

Note that the gap character may occur an arbitrary number of times in the pattern but is
assumed not to occur at all in the text. Give a polynomial-time algorithm to determine if such
a pattern P occurs in a given text T , and analyze the running time of your algorithm.

32.2 The Rabin-Karp algorithm
Rabin and Karp have proposed a string-matching algorithm that performs well in practice and
that also generalizes to other algorithms for related problems, such as two-dimensional pattern
matching. The Rabin-Karp algorithm uses Θ(m) preprocessing time, and its worst-case

