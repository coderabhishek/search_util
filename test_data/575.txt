INITIALIZE-PREFLOW creates an initial preflow f defined by
(26.10)

That is, each edge leaving the source s is filled to capacity, and all other edges carry no flow.
For each vertex v adjacent to the source, we initially have e[v] = c(s, v), and e[s] is initialized
to the negative of the sum of these capacities. The generic algorithm also begins with an
initial height function h, given by

This is a height function because the only edges (u, v) for which h[u] > h[v] + 1 are those for
which u = s, and those edges are saturated, which means that they are not in the residual
network.
Initialization, followed by a sequence of push and relabel operations, executed in no particular
order, yields the GENERIC-PUSH-RELABEL algorithm:
GENERIC-PUSH-RELABEL(G)
1 INITIALIZE-PREFLOW(G, s)
2 while there exists an applicable push or relabel operation
3
do select an applicable push or relabel operation and perform it

The following lemma tells us that as long as an overflowing vertex exists, at least one of the
two basic operations applies.
Lemma 26.15: (An overflowing vertex can be either pushed or relabeled)
Let G = (V, E) be a flow network with source s and sink t, let f be a preflow, and let h be any
height function for f. If u is any overflowing vertex, then either a push or relabel operation
applies to it.
Proof For any residual edge (u, v), we have h(u) ≤ h(v)+1 because h is a height function. If a
push operation does not apply to u, then for all residual edges (u, v), we must have h(u) < h(v)
+ 1, which implies h(u) ≤ h(v). Thus, a relabel operation can be applied to u.

Correctness of the push-relabel method
To show that the generic push-relabel algorithm solves the maximum-flow problem, we shall
first prove that if it terminates, the preflow f is a maximum flow. We shall later prove that it
terminates. We start with some observations about the height function h.
Lemma 26.16: (Vertex heights never decrease)

