Some dynamic sets presuppose that the keys are drawn from a totally ordered set, such as the
real numbers, or the set of all words under the usual alphabetic ordering. (A totally ordered set
satisfies the trichotomy property, defined on page 49.) A total ordering allows us to define the
minimum element of the set, for example, or speak of the next element larger than a given
element in a set.

Operations on dynamic sets
Operations on a dynamic set can be grouped into two categories: queries, which simply return
information about the set, and modifying operations, which change the set. Here is a list of
typical operations. Any specific application will usually require only a few of these to be
implemented.
SEARCH(S, k)
•

A query that, given a set S and a key value k, returns a pointer x to an element in S
such that key[x] = k, or NIL if no such element belongs to S.

INSERT(S, x)
•

A modifying operation that augments the set S with the element pointed to by x. We
usually assume that any fields in element x needed by the set implementation have
already been initialized.

DELETE(S, x)
•

A modifying operation that, given a pointer x to an element in the set S, removes x
from S. (Note that this operation uses a pointer to an element x, not a key value.)

MINIMUM(S)
•

A query on a totally ordered set S that returns a pointer to the element of S with the
smallest key.

MAXIMUM(S)
•

A query on a totally ordered set S that returns a pointer to the element of S with the
largest key.

SUCCESSOR(S, x)
•

A query that, given an element x whose key is from a totally ordered set S, returns a
pointer to the next larger element in S, or NIL if x is the maximum element.

PREDECESSOR(S, x)
•

A query that, given an element x whose key is from a totally ordered set S, returns a
pointer to the next smaller element in S, or NIL if x is the minimum element.

