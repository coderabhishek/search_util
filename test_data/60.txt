constant c large enough so that the bound T(n) = cn lg n works for the boundary conditions as
well. This requirement can sometimes lead to problems. Let us assume, for the sake of
argument, that T (1) = 1 is the sole boundary condition of the recurrence. Then for n = 1, the
bound T (n) = cn lg n yields T (1) = c1 lg 1 = 0, which is at odds with T (1) = 1. Consequently,
the base case of our inductive proof fails to hold.
This difficulty in proving an inductive hypothesis for a specific boundary condition can be
easily overcome. For example, in the recurrence (4.4), we take advantage of asymptotic
notation only requiring us to prove T (n) = cn lg n for n ≥ n0, where n0 is a constant of our
choosing. The idea is to remove the difficult boundary condition T (1) = 1 from consideration
in the inductive proof. Observe that for n > 3, the recurrence does not depend directly on T
(1). Thus, we can replace T (1) by T (2) and T (3) as the base cases in the inductive proof,
letting n0 = 2. Note that we make a distinction between the base case of the recurrence (n = 1)
and the base cases of the inductive proof (n = 2 and n = 3). We derive from the recurrence that
T (2) = 4 and T (3) = 5. The inductive proof that T (n) ≤ cn lg n for some constant c ≥ 1 can
now be completed by choosing c large enough so that T (2) ≤ c2 lg 2 and T (3) ≤ c3 lg 3. As it
turns out, any choice of c ≥ 2 suffices for the base cases of n = 2 and n = 3 to hold. For most
of the recurrences we shall examine, it is straightforward to extend boundary conditions to
make the inductive assumption work for small n.
Making a good guess
Unfortunately, there is no general way to guess the correct solutions to recurrences. Guessing
a solution takes experience and, occasionally, creativity. Fortunately, though, there are some
heuristics that can help you become a good guesser. You can also use recursion trees, which
we shall see in Section 4.2, to generate good guesses.
If a recurrence is similar to one you have seen before, then guessing a similar solution is
reasonable. As an example, consider the recurrence
T (n) = 2T (⌊n/2⌋ + 17) + n ,
which looks difficult because of the added "17" in the argument to T on the right-hand side.
Intuitively, however, this additional term cannot substantially affect the solution to the
recurrence. When n is large, the difference between T (⌊n/2⌋) and T (⌊n/2⌋ + 17) is not that
large: both cut n nearly evenly in half. Consequently, we make the guess that T (n) = O(n lg
n), which you can verify as correct by using the substitution method (see Exercise 4.1-5).
Another way to make a good guess is to prove loose upper and lower bounds on the
recurrence and then reduce the range of uncertainty. For example, we might start with a lower
bound of T (n) = Ω(n) for the recurrence (4.4), since we have the term n in the recurrence, and
we can prove an initial upper bound of T (n) = O(n2). Then, we can gradually lower the upper
bound and raise the lower bound until we converge on the correct, asymptotically tight
solution of T (n) = Θ(n lg n).
Subtleties
There are times when you can correctly guess at an asymptotic bound on the solution of a
recurrence, but somehow the math doesn't seem to work out in the induction. Usually, the

