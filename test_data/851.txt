Is the dynamic-programming algorithm for the 0-1 knapsack problem that is asked for in
Exercise 16.2-2 a polynomial-time algorithm? Explain your answer.

Exercises 34.1-5
Show that an otherwise polynomial-time algorithm that makes at most a constant number of
calls to polynomial-time subroutines runs in polynomial time, but that a polynomial number
of calls to polynomial-time subroutines may result in an exponential-time algorithm.

Exercises 34.1-6
Show that the class P, viewed as a set of languages, is closed under union, inter-section,
concatenation, complement, and Kleene star. That is, if L1, L2 P, then L1 L2 P, etc.

[1]

See Hopcroft and Ullman [156] or Lewis and Papadimitriou [204] for a thorough treatment
of the Turing-machine model.

[2]

The codomain of e need not be binary strings; any set of strings over a finite alphabet
having at least 2 symbols will do.
[3]

We assume that the algorithm's output is separate from its input. Because it takes at least
one time step to produce each bit of the output and there are O(T (n)) time steps, the size of
the output is O(T (n)).
[4]

As we shall see shortly, {0, 1}* denotes the set of all strings composed of symbols from the
set {0, 1}.
[5]

Technically, we also require the functions f12 and f21 to "map noninstances to noninstances."
A noninstance of an encoding e is a string x {0, 1}* such that there is no instance i for
which e(i) = x. We require that f12(x) = y for every noninstance x of encoding e1, where y is
some noninstance of e2, and that f21(x′) = y′ for every noninstance x′ of e2, where y′ is some
noninstance of e1.

34.2 Polynomial-time verification
We now look at algorithms that "verify" membership in languages. For example, suppose that
for a given instance G, u, v, k of the decision problem PATH, we are also given a path p
from u to v. We can easily check whether the length of p is at most k, and if so, we can view p
as a "certificate" that the instance indeed belongs to PATH. For the decision problem PATH,
this certificate doesn't seem to buy us much. After all, PATH belongs to P- in fact, PATH can
be solved in linear time-and so verifying membership from a given certificate takes as long as

