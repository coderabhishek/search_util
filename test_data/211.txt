Since there are n elements and m slots, Pr {A1} = n/m. For j > 1, the probability that there is a
jth probe and it is to an occupied slot, given that the first j - 1 probes were to occupied slots, is
(n - j + 1)/(m - j + 1). This probability follows because we would be finding one of the
remaining (n - (j - 1)) elements in one of the (m - (j - 1)) unexamined slots, and by the
assumption of uniform hashing, the probability is the ratio of these quantities. Observing that
n < m implies that (n - j)/(m - j) ≤ n/m for all j such that 0 ≤ j < m, we have for all i such that 1
≤ i ≤ m,

Now we use equation (C.24) to bound the expected number of probes:

The above bound of 1+α+α2+α3+··· has an intuitive interpretation. One probe is always made.
With probability approximately α, the first probe finds an occupied slot so that a second probe
is necessary. With probability approximately α2, the first two slots are occupied so that a third
probe is necessary, and so on.
If α is a constant, Theorem 11.6 predicts that an unsuccessful search runs in O(1) time. For
example, if the hash table is half full, the average number of probes in an unsuccessful search
is at most 1/(1 - .5) = 2. If it is 90 percent full, the average number of probes is at most 1/(1 .9) = 10.
Theorem 11.6 gives us the performance of the HASH-INSERT procedure almost
immediately.
Corollary 11.7
Inserting an element into an open-address hash table with load factor α requires at most 1/(1 α) probes on average, assuming uniform hashing.
Proof An element is inserted only if there is room in the table, and thus α < 1. Inserting a key
requires an unsuccessful search followed by placement of the key in the first empty slot
found. Thus, the expected number of probes is at most 1/(1 - α).

