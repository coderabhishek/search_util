Prove that if x is a nontrivial square root of 1, modulo n, then gcd(x - 1, n) and gcd(x + 1, n)
are both nontrivial divisors of n.

31.9

Integer factorization

Suppose we have an integer n that we wish to factor, that is, to decompose into a product of
primes. The primality test of the preceding section would tell us that n is composite, but it
usually doesn't tell us the prime factors of n. Factoring a large integer n seems to be much
more difficult than simply determining whether n is prime or composite. It is infeasible with
today's supercomputers and the best algorithms to date to factor an arbitrary 1024-bit number.
Pollard's rho heuristic
Trial division by all integers up to B is guaranteed to factor completely any number up to B2.
For the same amount of work, the following procedure will factor any number up to B4
(unless we're unlucky). Since the procedure is only a heuristic, neither its running time nor its
success is guaranteed, although the procedure is very effective in practice. Another advantage
of the POLLARD-RHO procedure is that it uses only a constant number of memory locations.
(You can easily implement Pollard-Rho on a programmable pocket calculator to find factors
of small numbers.)
POLLARD-RHO(n)
1 i ← 1
2 x1 ← RANDOM(0, n - 1)
3 y ← x1
4 k ← 2
5 while TRUE
6
do i ← i + 1
7
8
9
10
11
12
13

mod n
d ← gcd(y - xi, n)
if d ≠ 1 and d ≠ n
then print d
if i = k
then y ← xi
k ← 2k

The procedure works as follows. Lines 1–2 initialize i to 1 and x1 to a randomly chosen value
in Zn. The while loop beginning on line 5 iterates forever, searching for factors of n. During
each iteration of the while loop, the recurrence
(31.41)
is used on line 7 to produce the next value of xi in the infinite sequence
(31.42)
the value of i is correspondingly incremented on line 6. The code is written using subscripted
variables xi for clarity, but the program works the same if all of the subscripts are dropped,
since only the most recent value of xi need be maintained. With this modification, the
procedure uses only a constant number of memory locations.

