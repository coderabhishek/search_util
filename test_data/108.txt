We let a counter value of i represent a count of ni for i = 0, 1,..., 2b -1, where the ni form an
increasing sequence of nonnegative values. We assume that the initial value of the counter is
0, representing a count of n0 = 0. The INCREMENT operation works on a counter containing
the value i in a probabilistic manner. If i = 2b - 1, then an overflow error is reported.
Otherwise, the counter is increased by 1 with probability 1/(ni+1 - ni), and it remains
unchanged with probability 1 - 1/(ni+1 - ni).
If we select ni = i for all i ≥ 0, then the counter is an ordinary one. More interesting situations
arise if we select, say, ni = 2i-1 for i > 0 or ni = Fi (the ith Fibonacci number-see Section 3.2).
For this problem, assume that
negligible.

is large enough that the probability of an overflow error is

a. Show that the expected value represented by the counter after n INCREMENT
operations have been performed is exactly n.
b. The analysis of the variance of the count represented by the counter depends on the
sequence of the ni. Let us consider a simple case: ni = 100i for all i ≥ 0. Estimate the
variance in the value represented by the register after n INCREMENT operations have
been performed.

Problems 5-2: Searching an unsorted array
Thus problem examines three algorithms for searching for a value x in an unsorted array A
consisting of n elements.
Consider the following randomized strategy: pick a random index i into A. If A[i] = x, then we
terminate; otherwise, we continue the search by picking a new random index into A. We
continue picking random indices into A until we find an index j such that A[j] = x or until we
have checked every element of A. Note that we pick from the whole set of indices each time,
so that we may examine a given element more than once.
a. Write pseudocode for a procedure RANDOM-SEARCH to implement the strategy
above. Be sure that your algorithm terminates when all indices into A have been
picked.
b. Suppose that there is exactly one index i such that A[i] = x. What is the expected
number of indices into A that must be picked before x is found and RANDOMSEARCH terminates?
c. Generalizing your solution to part (b), suppose that there are k ≥ 1 indices i such that
A[i] = x. What is the expected number of indices into A that must be picked before x is
found and RANDOM-SEARCH terminates? Your answer should be a function of n
and k.
d. Suppose that there are no indices i such that A[i] = x. What is the expected number of
indices into A that must be picked before all elements of A have been checked and
RANDOM-SEARCH terminates?
Now consider a deterministic linear search algorithm, which we refer to as
DETERMINISTIC-SEARCH. Specifically, the algorithm searches A for x in order,

