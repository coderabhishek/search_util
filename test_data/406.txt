The exposition in this chapter assumes that you have read Chapter 19 on binomial heaps. The
specifications for the operations appear in that chapter, as does the table in Figure 19.1, which
summarizes the time bounds for operations on binary heaps, binomial heaps, and Fibonacci
heaps. Our presentation of the structure of Fibonacci heaps relies on that of binomial-heap
structure, and some of the operations performed on Fibonacci heaps are similar to those
performed on binomial heaps.
Like binomial heaps, Fibonacci heaps are not designed to give efficient support to the
operation SEARCH; operations that refer to a given node therefore require a pointer to that
node as part of their input. When we use a Fibonacci heap in an application, we often store a
handle to the corresponding application object in each Fibonacci-heap element, as well as a
handle to corresponding Fibonacci-heap element in each application object.
Section 20.1 defines Fibonacci heaps, discusses their representation, and presents the potential
function used for their amortized analysis. Section 20.2 shows how to implement the
mergeable-heap operations and achieve the amortized time bounds shown in Figure 19.1. The
remaining two operations, DECREASE-KEY and DELETE, are presented in Section 20.3.
Finally, Section 20.4 finishes off a key part of the analysis and also explains the curious name
of the data structure.

20.1 Structure of Fibonacci heaps
Like a binomial heap, a Fibonacci heap is a collection of min-heap-ordered trees. The trees in
a Fibonacci heap are not constrained to be binomial trees, however. Figure 20.1(a) shows an
example of a Fibonacci heap.

Figure 20.1: (a) A Fibonacci heap consisting of five min-heap-ordered trees and 14 nodes.
The dashed line indicates the root list. The minimum node of the heap is the node containing
the key 3. The three marked nodes are blackened. The potential of this particular Fibonacci
heap is 5+2Â·3 = 11. (b) A more complete representation showing pointers p (up arrows), child
(down arrows), and left and right (sideways arrows). These details are omitted in the
remaining figures in this chapter, since all the information shown here can be determined
from what appears in part (a).
Unlike trees within binomial heaps, which are ordered, trees within Fibonacci heaps are
rooted but unordered. As Figure 20.1(b) shows, each node x contains a pointer p[x] to its

