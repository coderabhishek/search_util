a. Because this iteration colors p[p[z]] red, node z′ is red at the start of the next iteration.
b. The node p[z′] is p[p[p[z]]] in this iteration, and the color of this node does not change.
If this node is the root, it was black prior to this iteration, and it remains black at the
start of the next iteration.
c. We have already argued that case 1 maintains property 5, and it clearly does not
introduce a violation of properties 1 or 3.
If node z′ is the root at the start of the next iteration, then case 1 corrected the lone
violation of property 4 in this iteration. Since z′ is red and it is the root, property 2
becomes the only one that is violated, and this violation is due to z′.
If node z′ is not the root at the start of the next iteration, then case 1 has not created a
violation of property 2. Case 1 corrected the lone violation of property 4 that existed at
the start of this iteration. It then made z′ red and left p[z′] alone. If p[z′] was black,
there is no violation of property 4. If p[z′] was red, coloring z′ red created one
violation of property 4 between z′ and p[z′].
Case 2: z's uncle y is black and z is a right child
Case 3: z's uncle y is black and z is a left child

In cases 2 and 3, the color of z's uncle y is black. The two cases are distinguished by whether z
is a right or left child of p[z]. Lines 10–11 constitute case 2, which is shown in Figure 13.6
together with case 3. In case 2, node z is a right child of its parent. We immediately use a left
rotation to transform the situation into case 3 (lines 12–14), in which node z is a left child.
Because both z and p[z] are red, the rotation affects neither the black-height of nodes nor
property 5. Whether we enter case 3 directly or through case 2, z's uncle y is black, since
otherwise we would have executed case 1. Additionally, the node p[p[z]] exists, since we have
argued that this node existed at the time that lines 2 and 3 were executed, and after moving z
up one level in line 10 and then down one level in line 11, the identity of p[p[z]] remains
unchanged. In case 3, we execute some color changes and a right rotation, which preserve
property 5, and then, since we no longer have two red nodes in a row, we are done. The body
of the while loop is not executed another time, since p[z] is now black.

Figure 13.6: Cases 2 and 3 of the procedure RB-INSERT. As in case 1, property 4 is violated
in either case 2 or case 3 because z and its parent p[z] are both red. Each of the subtrees α, β,
γ, and δ has a black root (α, β, and γ from property 4, and δ because otherwise we would be in
case 1), and each has the same black-height. Case 2 is transformed into case 3 by a left
rotation, which preserves property 5: all downward paths from a node to a leaf have the same
number of blacks. Case 3 causes some color changes and a right rotation, which also preserve
property 5. The while loop then terminates, because property 4 is satisfied: there are no longer
two red nodes in a row.
Now we show that cases 2 and 3 maintain the loop invariant. (As we have just argued, p[z]
will be black upon the next test in line 1, and the loop body will not execute again.)

