Figure 24.6: The execution of Dijkstra's algorithm. The source s is the leftmost vertex. The
shortest-path estimates are shown within the vertices, and shaded edges indicate predecessor
values. Black vertices are in the set S, and white vertices are in the min-priority queue Q = V S. (a) The situation just before the first iteration of the while loop of lines 4-8. The shaded
vertex has the minimum d value and is chosen as vertex u in line 5. (b)-(f) The situation after
each successive iteration of the while loop. The shaded vertex in each part is chosen as vertex
u in line 5 of the next iteration. The d and π values shown in part (f) are the final values.
Because Dijkstra's algorithm always chooses the "lightest" or "closest" vertex in V - S to add
to set S, we say that it uses a greedy strategy. Greedy strategies are presented in detail in
Chapter 16, but you need not have read that chapter to understand Dijkstra's algorithm.
Greedy strategies do not always yield optimal results in general, but as the following theorem
and its corollary show, Dijkstra's algorithm does indeed compute shortest paths. The key is to
show that each time a vertex u is added to set S, we have d[u] = δ(s, u).
Theorem 24.6: (Correctness of Dijkstra's algorithm)
Dijkstra's algorithm, run on a weighted, directed graph G = (V, E) with non-negative weight
function w and source s, terminates with d[u] = δ(s, u) for all vertices u V.
Proof We use the following loop invariant:
•

At the start of each iteration of the while loop of lines 4-8, d[v] = δ(s, v) for each
vertex v S.

It suffices to show for each vertex u V, we have d[u] = δ(s, u) at the time when u is added to
set S. Once we show that d[u] = δ(s, u), we rely on the upper-bound property to show that the
equality holds at all times thereafter.
•
•

Initialization: Initially, S = Ø, and so the invariant is trivially true.
Maintenance: We wish to show that in each iteration, d[u] = δ(s, u) for the vertex
added to set S. For the purpose of contradiction, let u be the first vertex for which d[u]
≠ δ(s, u) when it is added to set S. We shall focus our attention on the situation at the
beginning of the iteration of the while loop in which u is added to S and derive the
contradiction that d[u] = δ(s, u) at that time by examining a shortest path from s to u.
We must have u ≠ s because s is the first vertex added to set S and d[s] = δ(s, s) = 0 at
that time. Because u ≠ s, we also have that S ≠ Ø just before u is added to S. There
must be some path from s to u, for otherwise d[u] = δ(s, u) = ∞ by the no-path
property, which would violate our assumption that d[u] ≠ δ(s, u). Because there is at
least one path, there is a shortest path p from s to u. Prior to adding u to S, path p

