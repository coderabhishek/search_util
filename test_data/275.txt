Suggest modifications to the interval-tree procedures to support the new operation
INTERVAL-SEARCH-EXACTLY(T, i), which returns a pointer to a node x in interval tree T
such that low[int[x]] = low[i] and high[int[x]] = high[i], or nil[T] if T contains no such node.
All operations, including INTERVAL-SEARCH-EXACTLY, should run in O(lg n) time on
an n-node tree.

Exercises 14.3-6
Show how to maintain a dynamic set Q of numbers that supports the operation MIN-GAP,
which gives the magnitude of the difference of the two closest numbers in Q. For example, if
Q = {1, 5, 9, 15, 18, 22}, then MIN-GAP(Q) returns 18 - 15 = 3, since 15 and 18 are the two
closest numbers in Q. Make the operations INSERT, DELETE, SEARCH, and MIN-GAP as
efficient as possible, and analyze their running times.

Exercises 14.3-7: ⋆
VLSI databases commonly represent an integrated circuit as a list of rectangles. Assume that
each rectangle is rectilinearly oriented (sides parallel to the x- and y-axis), so that a
representation of a rectangle consists of its minimum and maximum x- and y-coordinates.
Give an O(n lg n)-time algorithm to decide whether or not a set of rectangles so represented
contains two rectangles that overlap. Your algorithm need not report all intersecting pairs, but
it must report that an overlap exists if one rectangle entirely covers another, even if the
boundary lines do not intersect. (Hint: Move a "sweep" line across the set of rectangles.)

Problems 14-1: Point of Maximum Overlap
Suppose that we wish to keep track of a point of maximum overlap in a set of intervals—a
point that has the largest number of intervals in the database overlapping it.
a. Show that there will always be a point of maximum overlap which is an endpoint of
one of the segments.
b. Design a data structure that efficiently supports the operations INTERVAL-INSERT,
INTERVAL-DELETE, and FIND-POM, which returns a point of maximum overlap.
(Hint: Keep a red-black tree of all the endpoints. Associate a value of +1 with each
left endpoint, and associate a value of -1 with each right endpoint. Augment each node
of the tree with some extra information to maintain the point of maximum overlap.)

Problems 14-2: Josephus Permutation

