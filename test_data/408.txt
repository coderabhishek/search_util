From equation (17.3), an upper bound on the total amortized cost is thus an upper bound on
the total actual cost for the sequence of operations.
Maximum degree
The amortized analyses we shall perform in the remaining sections of this chapter assume that
there is a known upper bound D(n) on the maximum degree of any node in an n-node
Fibonacci heap. Exercise 20.2-3 shows that when only the mergeable-heap operations are
supported, D(n) ≤ ⌊lg n⌋. In Section 20.3, we shall show that when we support DECREASEKEY and DELETE as well, D(n) = O(lg n).

20.2 Mergeable-heap operations
In this section, we describe and analyze the mergeable-heap operations as implemented for
Fibonacci heaps. If only these operations-MAKE-HEAP, INSERT, MINIMUM, EXTRACTMIN, and UNION-are to be supported, each Fibonacci heap is simply a collection of
"unordered" binomial trees. An unordered binomial tree is like a binomial tree, and it, too, is
defined recursively. The unordered binomial tree U0 consists of a single node, and an
unordered binomial tree Uk consists of two unordered binomial trees Uk-1 for which the root of
one is made into any child of the root of the other. Lemma 19.1, which gives properties of
binomial trees, holds for unordered binomial trees as well, but with the following variation on
property 4 (see Exercise 20.2-2):
•

4′. For the unordered binomial tree Uk, the root has degree k, which is greater than that
of any other node. The children of the root are roots of subtrees U0, U1, . . . , Uk-1 in
some order.
Thus, if an n-node Fibonacci heap is a collection of unordered binomial trees, then D(n) = lg
n.
The key idea in the mergeable-heap operations on Fibonacci heaps is to delay work as long as
possible. There is a performance trade-off among implementations of the various operations.
If the number of trees in a Fibonacci heap is small, then during an EXTRACT-MIN operation
we can quickly determine which of the remaining nodes becomes the new minimum node.
However, as we saw with binomial heaps in Exercise 19.2-10, we pay a price for ensuring that
the number of trees is small: it can take up to Ω(lg n) time to insert a node into a binomial
heap or to unite two binomial heaps. As we shall see, we do not attempt to consolidate trees in
a Fibonacci heap when we insert a new node or unite two heaps. We save the consolidation
for the EXTRACT-MIN operation, which is when we really need to find the new minimum
node.
Creating a new Fibonacci heap
To make an empty Fibonacci heap, the MAKE-FIB-HEAP procedure allocates and returns the
Fibonacci heap object H , where n[H ] = 0 and min[H ] = NIL; there are no trees in H .
Because t(H) = 0 and m(H) = 0, the potential of the empty Fibonacci heap is Φ(H) = 0. The
amortized cost of MAKE-FIB-HEAP is thus equal to its O(1) actual cost.

