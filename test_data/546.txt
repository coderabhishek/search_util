Problems 25-2: Shortest paths in

-dense graphs

A graph G = (V, E) is -dense if |E| = Θ(V1+ ) for some constant in the range 0 < ≤ 1.
By using d-ary min-heaps (see Problem 6-2) in shortest-paths algorithms on -dense graphs,
we can match the running times of Fibonacci-heap-based algorithms without using as
complicated a data structure.
a. What are the asymptotic running times for INSERT, EXTRACT-MIN, and
DECREASE-KEY, as a function of d and the number n of elements in a d-ary minheap? What are these running times if we choose d = Θ(nα) for some constant 0 < α ≤
1? Compare these running times to the amortized costs of these operations for a
Fibonacci heap.
b. Show how to compute shortest paths from a single source on an -dense directed
graph G = (V, E) with no negative-weight edges in O(E) time. (Hint: Pick d as a
function of .)
c. Show how to solve the all-pairs shortest-paths problem on an -dense directed graph
G = (V, E) with no negative-weight edges in O(V E) time.
d. Show how to solve the all-pairs shortest-paths problem in O(V E) time on an -dense
directed graph G = (V, E) that may have negative-weight edges but has no negativeweight cycles.

Chapter notes
Lawler [196] has a good discussion of the all-pairs shortest-paths problem, although he does
not analyze solutions for sparse graphs. He attributes the matrix-multiplication algorithm to
the folklore. The Floyd-Warshall algorithm is due to Floyd [89], who based it on a theorem of
Warshall [308] that describes how to compute the transitive closure of boolean matrices.
Johnson's algorithm is taken from [168].
Several researchers have given improved algorithms for computing shortest paths via matrix
multiplication. Fredman [95] shows that the all-pairs shortest paths problem can be solved
using O(V5/2) comparisons between sums of edge weights and obtains an algorithm that runs
in O(V3(lg lg V/ lg V)1/3) time, which is slightly better than the running time of the FloydWarshall algorithm. Another line of research demonstrates that algorithms for fast matrix
multiplication (see the chapter notes for Chapter 28) can be applied to the all-pairs shortest
paths problem. Let O(nw) be the running time of the fastest algorithm for multiplying n × n
matrices; currently w < 2.376 [70]. Galil and Margalit [105, 106] and Seidel [270] designed
algorithms that solve the all-pairs shortest paths problem in undirected, unweighted graphs in
(Vw p(V)) time, where p(n) denotes a particular function that is polylogarithmically bounded
in n. In dense graphs, these algorithms are faster than the O(V E) time needed to perform |V|
breadth-first searches. Several researchers have extended these results to give algorithms for
solving the all-pairs shortest paths problem in undirected graphs in which the edge weights
are integers in the range {1, 2,.., W}. The asymptotically fastest such algorithm, by Shoshan
and Zwick [278], runs in time O(W Vw p(V W)).
Karger, Koller, and Phillips [170] and independently McGeoch [215] have given a time bound
that depends on E*, the set of edges in E that participate in some shortest path. Given a graph

