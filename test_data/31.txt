Figure 2.3: The operation of lines 10-17 in the call MERGE(A, 9, 12, 16), when the subarray
A[9 16] contains the sequence 2, 4, 5, 7, 1, 2, 3, 6 . After copying and inserting
sentinels, the array L contains 2, 4, 5, 7, ∞ , and the array R contains 1, 2, 3, 6, ∞ .
Lightly shaded positions in A contain their final values, and lightly shaded positions in L and
R contain values that have yet to be copied back into A. Taken together, the lightly shaded
positions always comprise the values originally in A[9 16], along with the two sentinels.
Heavily shaded positions in A contain values that will be copied over, and heavily shaded
positions in L and R contain values that have already been copied back into A. (a)-(h) The
arrays A, L, and R, and their respective indices k, i, and j prior to each iteration of the loop of
lines 12-17. (i) The arrays and indices at termination. At this point, the subarray in A[9 16]
is sorted, and the two sentinels in L and R are the only two elements in these arrays that have
not been copied into A.
We must show that this loop invariant holds prior to the first iteration of the for loop of lines
12-17, that each iteration of the loop maintains the invariant, and that the invariant provides a
useful property to show correctness when the loop terminates.
•

Initialization: Prior to the first iteration of the loop, we have k = p, so that the
subarray A[p k - 1] is empty. This empty subarray contains the k - p = 0 smallest
elements of L and R, and since i = j = 1, both L[i] and R[j] are the smallest elements of
their arrays that have not been copied back into A.

•

Maintenance: To see that each iteration maintains the loop invariant, let us first
suppose that L[i] ≤ R[j]. Then L[i] is the smallest element not yet copied back into A.
Because A[p k - 1] contains the k - p smallest elements, after line 14 copies L[i] into
A[k], the subarray A[p k] will contain the k - p + 1 smallest elements. Incrementing
k (in the for loop update) and i (in line 15) reestablishes the loop invariant for the next

