Prove Corollary 24.3.

Exercise 24.1-3
Given a weighted, directed graph G = (V, E) with no negative-weight cycles, let m be the
maximum over all pairs of vertices u, v V of the minimum number of edges in a shortest
path from u to v. (Here, the shortest path is by weight, not the number of edges.) Suggest a
simple change to the Bellman-Ford algorithm that allows it to terminate in m + 1 passes.

Exercise 24.1-4
Modify the Bellman-Ford algorithm so that it sets d[v] to -∞ for all vertices v for which there
is a negative-weight cycle on some path from the source to v.

Exercise 24.1-5: ⋆
Let G = (V, E) be a weighted, directed graph with weight function w : E → R. Give an O(V
E)-time algorithm to find, for each vertex v V , the value δ*(v) = minu V {δ(u, v)}.

Exercise 24.1-6: ⋆
Suppose that a weighted, directed graph G = (V, E) has a negative-weight cycle. Give an
efficient algorithm to list the vertices of one such cycle. Prove that your algorithm is correct.

24.2 Single-source shortest paths in directed acyclic graphs
By relaxing the edges of a weighted dag (directed acyclic graph) G = (V, E) according to a
topological sort of its vertices, we can compute shortest paths from a single source in Θ(V +
E) time. Shortest paths are always well defined in a dag, since even if there are negativeweight edges, no negative-weight cycles can exist.
The algorithm starts by topologically sorting the dag (see Section 22.4) to impose a linear
ordering on the vertices. If there is a path from vertex u to vertex v, then u precedes v in the
topological sort. We make just one pass over the vertices in the topologically sorted order. As
we process each vertex, we relax each edge that leaves the vertex.

