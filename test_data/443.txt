c. Show how to modify FIND-SET to implement FIND-DEPTH. Your implementation
should perform path compression, and its running time should be linear in the length
of the find path. Make sure that your implementation updates pseudodistances
correctly.
d. Show how to implement GRAFT(r, v), which combines the sets containing r and v, by
modifying the UNION and LINK procedures. Make sure that your implementation
updates pseudodistances correctly. Note that the root of a set Si is not necessarily the
root of the corresponding tree Ti.
e. Give a tight bound on the worst-case running time of a sequence of m MAKE-TREE,
FIND-DEPTH, and GRAFT operations, n of which are MAKE-TREE operations.

Problems 21-3: Tarjan's off-line least-common-ancestors algorithm
The least common ancestor of two nodes u and v in a rooted tree T is the node w that is an
ancestor of both u and v and that has the greatest depth in T. In the off-line least-commonancestors problem, we are given a rooted tree T and an arbitrary set P = {{u, v}} of
unordered pairs of nodes in T, and we wish to determine the least common ancestor of each
pair in P.
To solve the off-line least-common-ancestors problem, the following procedure performs a
tree walk of T with the initial call LCA(root[T]). Each node is assumed to be colored WHITE
prior to the walk.
LCA(u)
1 MAKE-SET(u)
2 ancestor[FIND-SET(u)] ← u
3 for each child v of u in T
4
do LCA(v)
5
UNION(u, v)
6
ancestor[FIND-SET(u)] ← u
7 color[u] ← BLACK
8 for each node v such that {u, v}
P
9
do if color[v] = BLACK
10
then print "The least common ancestor of"
u "and" v "is" ancestor[FIND-SET(v)]

a. Argue that line 10 is executed exactly once for each pair {u, v} P.
b. Argue that at the time of the call LCA(u), the number of sets in the disjoint-set data
structure is equal to the depth of u in T.
c. Prove that LCA correctly prints the least common ancestor of u and v for each pair {u,
v} P.
d. Analyze the running time of LCA, assuming that we use the implementation of the
disjoint-set data structure in Section 21.3.

Chapter notes
Many of the important results for disjoint-set data structures are due at least in part to R. E.
Tarjan. Using aggregate analysis, Tarjan [290, 292] gave the first tight upper bound in terms
of the very slowly growing inverse
of Ackermann's function. (The function Ak(j) given

