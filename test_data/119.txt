We can compute a simple upper bound on the running time of BUILD-MAX-HEAP as
follows. Each call to MAX-HEAPIFY costs O(lg n) time, and there are O(n) such calls. Thus,
the running time is O(n lg n). This upper bound, though correct, is not asymptotically tight.
We can derive a tighter bound by observing that the time for MAX-HEAPIFY to run at a node
varies with the height of the node in the tree, and the heights of most nodes are small. Our
tighter analysis relies on the properties that an n-element heap has height ⌊lg n⌋ (see Exercise
6.1-2) and at most ⌈n/2h+1⌉ nodes of any height h (see Exercise 6.3-3).
The time required by MAX-HEAPIFY when called on a node of height h is O(h), so we can
express the total cost of BUILD-MAX-HEAP as

The last summation can be evaluated by substituting x = 1/2 in the formula (A.8), which
yields

Thus, the running time of BUILD-MAX-HEAP can be bounded as

Hence, we can build a max-heap from an unordered array in linear time.
We can build a min-heap by the procedure BUILD-MIN-HEAP, which is the same as
BUILD-MAX-HEAP but with the call to MAX-HEAPIFY in line 3 replaced by a call to
MIN-HEAPIFY (see Exercise 6.2-2). BUILD-MIN-HEAP produces a min-heap from an
unordered linear array in linear time.
Exercises 6.3-1
Using Figure 6.3 as a model, illustrate the operation of BUILD-MAX-HEAP on the array A =
5, 3, 17, 10, 84, 19, 6, 22, 9 .

Exercises 6.3-2
Why do we want the loop index i in line 2 of BUILD-MAX-HEAP to decrease from
⌊length[A]/2⌋ to 1 rather than increase from 1 to ⌊length[A]/2⌋?

