Exercises 17.2-2
Redo Exercise 17.1-3 using an accounting method of analysis.

Exercises 17.2-3
Suppose we wish not only to increment a counter but also to reset it to zero (i.e., make all bits
in it 0). Show how to implement a counter as an array of bits so that any sequence of n
INCREMENT and RESET operations takes time O(n) on an initially zero counter. (Hint:
Keep a pointer to the high-order 1.)

17.3 The potential method
Instead of representing prepaid work as credit stored with specific objects in the data
structure, the potential method of amortized analysis represents the prepaid work as "potential
energy," or just "potential," that can be released to pay for future operations. The potential is
associated with the data structure as a whole rather than with specific objects within the data
structure.
The potential method works as follows. We start with an initial data structure D0 on which n
operations are performed. For each i = 1, 2, ..., n, we let ci be the actual cost of the ith
operation and Di be the data structure that results after applying the ith operation to data
structure Di-1. A potential function Φ maps each data structure Di to a real number Φ(Di),
which is the potential associated with data structure Di. The amortized cost of the ith
operation with respect to potential function Φ is defined by
(17.2)
The amortized cost of each operation is therefore its actual cost plus the increase in potential
due to the operation. By equation (17.2), the total amortized cost of the n operations is
(17.3)

The second equality follows from equation (A.9), since the Φ(Di) terms telescope.
If we can define a potential function Φ so that Φ(Dn) ≥ Φ(D0), then the total amortized cost
is an upper bound on the total actual cost
. In practice, we do not always know how
many operations might be performed. Therefore, if we require that Φ (Di) ≥ Φ (D0) for all i,
then we guarantee, as in the accounting method, that we pay in advance. It is often convenient

