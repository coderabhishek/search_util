acyclic graph of Figure 22.8, there are exactly four paths from vertex p to vertex v: pov, por
yv, posr yv, and psr yv. (Your algorithm only needs to count the paths, not list them.)

Exercises 22.4-3
Give an algorithm that determines whether or not a given undirected graph G = (V, E)
contains a cycle. Your algorithm should run in O(V) time, independent of |E|.

Exercises 22.4-4
Prove or disprove: If a directed graph G contains cycles, then TOPOLOGICAL-SORT (G)
produces a vertex ordering that minimizes the number of "bad" edges that are inconsistent
with the ordering produced.

Exercises 22.4-5
Another way to perform topological sorting on a directed acyclic graph G = (V, E) is to
repeatedly find a vertex of in-degree 0, output it, and remove it and all of its outgoing edges
from the graph. Explain how to implement this idea so that it runs in time O(V + E). What
happens to this algorithm if G has cycles?

22.5 Strongly connected components
We now consider a classic application of depth-first search: decomposing a directed graph
into its strongly connected components. This section shows how to do this decomposition
using two depth-first searches. Many algorithms that work with directed graphs begin with
such a decomposition. After decomposition, the algorithm is run separately on each strongly
connected component. The solutions are then combined according to the structure of
connections between components.
Recall from Appendix B that a strongly connected component of a directed graph G = (V, E)
is a maximal set of vertices C V such that for every pair of vertices u and v in C, we have
both
and
; that is, vertices u and v are reachable from each other. Figure 22.9
shows an example.

