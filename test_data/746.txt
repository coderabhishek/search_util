If a > b ≥ 1 and the invocation EUCLID(a, b) performs k ≥ 1 recursive calls, then a ≥ Fk+2 and
b ≥ Fk+1.
Proof The proof is by induction on k. For the basis of the induction, let k = 1. Then, b ≥ 1 =
F2, and since a > b, we must have a ≥ 2 = F3. Since b > (a mod b), in each recursive call the
first argument is strictly larger than the second; the assumption that a > b therefore holds for
each recursive call.
Assume inductively that the lemma is true if k - 1 recursive calls are made; we shall then
prove that it is true for k recursive calls. Since k > 0, we have b > 0, and EUCLID(a, b) calls
EUCLID(b, a mod b) recursively, which in turn makes k - 1 recursive calls. The inductive
hypothesis then implies that b ≥ Fk+1 (thus proving part of the lemma), and (a mod b) ≥ Fk.
We have
b + (a mod b) = b + (a - ⌊a/b⌋ b)
≤a,
since a > b > 0 implies ⌊a/b⌋ ≥ 1. Thus,
a ≥ b + (a mod
b)
≥ Fk+1 + Fk
= Fk+2 .

The following theorem is an immediate corollary of this lemma.
Theorem 31.11: (Lamé's theorem)
For any integer k ≥ 1, if a > b ≥ 1 and b < Fk+1, then the call EUCLID(a, b) makes fewer than
k recursive calls.

We can show that the upper bound of Theorem 31.11 is the best possible. Consecutive
Fibonacci numbers are a worst-case input for EUCLID. Since EUCLID(F3, F2) makes exactly
one recursive call, and since for k > 2 we have Fk+1 mod Fk = Fk-1, we also have
gcd(Fk+1, Fk) = gcd(Fk, (Fk+1 mod Fk))
= gcd(Fk, Fk-1).
Thus, EUCLID(Fk+1, Fk) recurses exactly k - 1 times, meeting the upper bound of Theorem
31.11.

