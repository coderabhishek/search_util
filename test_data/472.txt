STRONGLY-CONNECTED-COMPONENTS (G) correctly computes the strongly connected
components of a directed graph G.
Proof We argue by induction on the number of depth-first trees found in the depth-first search
of GT in line 3 that the vertices of each tree form a strongly connected component. The
inductive hypothesis is that the first k trees produced in line 3 are strongly connected
components. The basis for the induction, when k = 0, is trivial.
In the inductive step, we assume that each of the first k depth-first trees produced in line 3 is a
strongly connected component, and we consider the (k + 1)st tree produced. Let the root of
this tree be vertex u, and let u be in strongly connected component C. Because of how we
choose roots in the depth-first search in line 3, f[u] = f(C) > f(C′) for any strongly connected
component C′ other than C that has yet to be visited. By the inductive hypothesis, at the time
that the search visits u, all other vertices of C are white. By the white-path theorem, therefore,
all other vertices of C are descendants of u in its depth-first tree. Moreover, by the inductive
hypothesis and by Corollary 22.15, any edges in GT that leave C must be to strongly
connected components that have already been visited. Thus, no vertex in any strongly
connected component other than C will be a descendant of u during the depth-first search of
GT. Thus, the vertices of the depth-first tree in GT that is rooted at u form exactly one strongly
connected component, which completes the inductive step and the proof.

Here is another way to look at how the second depth-first search operates. Consider the
component graph (GT)SCC of GT. If we map each strongly connected component visited in the
second depth-first search to a vertex of (GT)SCC, the vertices of (GT)SCC are visited in the
reverse of a topologically sorted order. If we reverse the edges of (GT)SCC, we get the graph
((GT)SCC)T. Because ((GT)SCC)T = GSCC (see Exercise 22.5-4), the second depth-first search
visits the vertices of GSCC in topologically sorted order.
Exercises 22.5-1
How can the number of strongly connected components of a graph change if a new edge is
added?

Exercises 22.5-2
Show how the procedure STRONGLY-CONNECTED-COMPONENTS works on the graph
of Figure 22.6. Specifically, show the finishing times computed in line 1 and the forest
produced in line 3. Assume that the loop of lines 5-7 of DFS considers vertices in alphabetical
order and that the adjacency lists are in alphabetical order.

Exercises 22.5-3

