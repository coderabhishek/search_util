which is at most cn if
(9.2)
Inequality (9.2) is equivalent to the inequality c ≥ 10a(n/(n - 70)) when n > 70. Because we
assume that n ≥ 140, we have n/(n - 70) ≤ 2, and so choosing c ≥ 20a will satisfy inequality
(9.2). (Note that there is nothing special about the constant 140; we could replace it by any
integer strictly greater than 70 and then choose c accordingly.) The worst-case running time of
SELECT is therefore linear.
As in a comparison sort (see Section 8.1), SELECT and RANDOMIZED-SELECT determine
information about the relative order of elements only by comparing elements. Recall from
Chapter 8 that sorting requires Ω(n lg n) time in the comparison model, even on average (see
Problem 8-1). The linear-time sorting algorithms in Chapter 8 make assumptions about the
input. In contrast, the linear-time selection algorithms in this chapter do not require any
assumptions about the input. They are not subject to the Ω(n lg n) lower bound because they
manage to solve the selection problem without sorting.
Thus, the running time is linear because these algorithms do not sort; the linear-time behavior
is not a result of assumptions about the input, as was the case for the sorting algorithms in
Chapter 8. Sorting requires Ω(n lg n) time in the comparison model, even on average (see
Problem 8-1), and thus the method of sorting and indexing presented in the introduction to
this chapter is asymptotically inefficient.
Exercises 9.3-1
In the algorithm SELECT, the input elements are divided into groups of 5. Will the algorithm
work in linear time if they are divided into groups of 7? Argue that SELECT does not run in
linear time if groups of 3 are used.

Exercises 9.3-2

Analyze SELECT to show that if n ≥ 140, then at least ⌈n/4⌉ elements are greater than the
median-of-medians x and at least ⌈n/4⌉ elements are less than x.

Exercises 9.3-3
Show how quicksort can be made to run in O(n lg n) time in the worst case.

Exercises 9.3-4: ⋆

