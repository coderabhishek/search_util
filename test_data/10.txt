Chapter 5 introduces probabilistic analysis and randomized algorithms. We typically use
probabilistic analysis to determine the running time of an algorithm in cases in which, due to
the presence of an inherent probability distribution, the running time may differ on different
inputs of the same size. In some cases, we assume that the inputs conform to a known
probability distribution, so that we are averaging the running time over all possible inputs. In
other cases, the probability distribution comes not from the inputs but from random choices
made during the course of the algorithm. An algorithm whose behavior is determined not only
by its input but by the values produced by a random-number generator is a randomized
algorithm. We can use randomized algorithms to enforce a probability distribution on the
inputs-thereby ensuring that no particular input always causes poor performance-or even to
bound the error rate of algorithms that are allowed to produce incorrect results on a limited
basis.
Appendices A-C contain other mathematical material that you will find helpful as you read
this book. You are likely to have seen much of the material in the appendix chapters before
having read this book (although the specific notational conventions we use may differ in some
cases from what you have seen in the past), and so you should think of the Appendices as
reference material. On the other hand, you probably have not already seen most of the
material in Part I. All the chapters in Part I and the Appendices are written with a tutorial
flavor.

Chapter 1: The Role of Algorithms in
Computing
What are algorithms? Why is the study of algorithms worthwhile? What is the role of
algorithms relative to other technologies used in computers? In this chapter, we will answer
these questions.

1.1 Algorithms
Informally, an algorithm is any well-defined computational procedure that takes some value,
or set of values, as input and produces some value, or set of values, as output. An algorithm is
thus a sequence of computational steps that transform the input into the output.
We can also view an algorithm as a tool for solving a well-specified computational problem.
The statement of the problem specifies in general terms the desired input/output relationship.
The algorithm describes a specific computational procedure for achieving that input/output
relationship.
For example, one might need to sort a sequence of numbers into nondecreasing order. This
problem arises frequently in practice and provides fertile ground for introducing many
standard design techniques and analysis tools. Here is how we formally define the sorting
problem:
•
•

Input: A sequence of n numbers a1, a2, ..., an .
Output: A permutation (reordering)
of the input sequence such that
.

