To analyze the amortized cost of the ith TABLE-INSERT operation, we let numi denote the
number of items stored in the table after the ith operation, sizei denote the total size of the
table after the ith operation, and Φi denote the potential after the ith operation. Initially, we
have num0 = 0, size0 = 0, and Φ0 = 0.
If the ith TABLE-INSERT operation does not trigger an expansion, then we have sizei = sizei1 and the amortized cost of the operation is
= ci + Φi - Φi-1
= 1 + (2 · numi -sizei) - (2 · numi-1 -sizei-1)
= 1 + (2 · numi -sizei) - (2(numi -1) - sizei)
= 3.
If the ith operation does trigger an expansion, then we have sizei = 2 · sizei-1 and sizei-1 = numi1 = numi-1, which implies that sizei = 2 · (numi-1). Thus, the amortized cost of the operation is
= ci + Φi - Φi-1
= numi + (2 · numi - sizei) - (2 · numi-1 - sizei-1)
= numi +(2 · numi -2 · (numi - 1)) - (2(numi - 1) - (numi - 1))
= numi + 2 - (numi - 1)
= 3.
Figure 17.3 plots the values of numi, sizei, and Φi against i. Notice how the potential builds to
pay for the expansion of the table.

Figure 17.3: The effect of a sequence of n TABLE-INSERT operations on the number numi of
items in the table, the number sizei of slots in the table, and the potential Φi = 2·numi - sizei,
each being measured after the ith operation. The thin line shows numi, the dashed line shows
sizei, and the thick line shows Φi. Notice that immediately before an expansion, the potential
has built up to the number of items in the table, and therefore it can pay for moving all the
items to the new table. Afterwards, the potential drops to 0, but it is immediately increased by
2 when the item that caused the expansion is inserted.

17.4.2 Table expansion and contraction

