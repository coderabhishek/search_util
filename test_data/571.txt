N(X) = {y

V : (x, y)

E for some x

X},

that is, the set of vertices adjacent to some member of X. Prove Hall's theorem: there exists a
perfect matching in G if and only if |A| ≤ |N(A)| for every subset A L.

Exercise 26.3-5:
We say that a bipartite graph G = (V, E), where V = L R, is d-regular if every vertex v V
has degree exactly d. Every d-regular bipartite graph has |L| = |R|. Prove that every d-regular
bipartite graph has a matching of cardinality |L| by arguing that a minimum cut of the
corresponding flow network has capacity |L|.

26.4

Push-relabel algorithms

In this section, we present the "push-relabel" approach to computing maximum flows. To
date, many of the asymptotically fastest maximum-flow algorithms are push-relabel
algorithms, and the fastest actual implementations of maximum-flow algorithms are based on
the push-relabel method. Other flow problems, such as the minimum-cost flow problem, can
be solved efficiently by push-relabel methods. This section introduces Goldberg's "generic"
maximum-flow algorithm, which has a simple implementation that runs in O(V2 E) time,
thereby improving upon the O(V E2) bound of the Edmonds-Karp algorithm. Section 26.5
refines the generic algorithm to obtain another push-relabel algorithm that runs in O(V3) time.
Push-relabel algorithms work in a more localized manner than the Ford-Fulkerson method.
Rather than examine the entire residual network G = (V, E) to find an augmenting path, pushrelabel algorithms work on one vertex at a time, looking only at the vertex's neighbors in the
residual network. Furthermore, unlike the Ford-Fulkerson method, push-relabel algorithms do
not maintain the flow-conservation property throughout their execution. They do, however,
maintain a preflow, which is a function f : V × V → R that satisfies skew symmetry, capacity
constraints, and the following relaxation of flow conservation: f(V, u) ≥ 0 for all vertices u
V - {s}. That is, the total net flow at each vertex other than the source is nonnegative. We call
the total net flow at a vertex u the excess flow into u, given by
(26.9)
We say that a vertex u

V - {s, t} is overflowing if e(u) > 0.

We shall start this section by describing the intuition behind the push-relabel method. We
shall then investigate the two operations employed by the method: "pushing" preflow and
"relabeling" a vertex. Finally, we shall present a generic push-relabel algorithm and analyze
its correctness and running time.
Intuition
The intuition behind the push-relabel method is probably best understood in terms of fluid
flows: we consider a flow network G = (V, E) to be a system of interconnected pipes of given
capacities. Applying this analogy to the Ford-Fulkerson method, we might say that each

