illustrates the approach; slot k points to an element in the set with key k. If the set contains no
element with key k, then T[k] = NIL.

Figure 11.1: Implementing a dynamic set by a direct-address table T. Each key in the universe
U = {0, 1, ..., 9} corresponds to an index in the table. The set K = {2, 3, 5, 8} of actual keys
determines the slots in the table that contain pointers to elements. The other slots, heavily
shaded, contain NIL.
The dictionary operations are trivial to implement.
DIRECT-ADDRESS-SEARCH(T, k)
return T [k]
DIRECT-ADDRESS-INSERT(T, x)
T[key[x]] ← x
DIRECT-ADDRESS-DELETE(T, x)
T[key[x]] ← NIL

Each of these operations is fast: only O(1) time is required.
For some applications, the elements in the dynamic set can be stored in the direct-address
table itself. That is, rather than storing an element's key and satellite data in an object external
to the direct-address table, with a pointer from a slot in the table to the object, we can store the
object in the slot itself, thus saving space. Moreover, it is often unnecessary to store the key
field of the object, since if we have the index of an object in the table, we have its key. If keys
are not stored, however, we must have some way to tell if the slot is empty.
Exercises 11.1-1
Suppose that a dynamic set S is represented by a direct-address table T of length m. Describe a
procedure that finds the maximum element of S. What is the worst-case performance of your
procedure?

Exercises 11.1-2
A bit vector is simply an array of bits (0's and 1's). A bit vector of length m takes much less
space than an array of m pointers. Describe how to use a bit vector to Represent a Dynamic

