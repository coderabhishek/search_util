12
else right[p[y]] ← x
13 if y 3≠ z
14
then key[z] ← key[y]
15
copy y's satellite data into z
16 if color[y] = BLACK
17
then RB-DELETE-FIXUP(T, x)
18 return y

There are three differences between the procedures TREE-DELETE and RB-DELETE. First,
all references to NIL in TREE-DELETE are replaced by references to the sentinel nil[T ] in
RB-DELETE. Second, the test for whether x is NIL in line 7 of TREE-DELETE is removed,
and the assignment p[x] ← p[y] is performed unconditionally in line 7 of RB-DELETE. Thus,
if x is the sentinel nil[T], its parent pointer points to the parent of the spliced-out node y.
Third, a call to RB-DELETE-FIXUP is made in lines 16–17 if y is black. If y is red, the redblack properties still hold when y is spliced out, for the following reasons:
•
•
•

no black-heights in the tree have changed,
no red nodes have been made adjacent, and
since y could not have been the root if it was red, the root remains black.

The node x passed to RB-DELETE-FIXUP is one of two nodes: either the node that was y's
sole child before y was spliced out if y had a child that was not the sentinel nil[T ], or, if y had
no children, x is the sentinel nil[T ]. In the latter case, the unconditional assignment in line 7
guarantees that x's parent is now the node that was previously y's parent, whether x is a keybearing internal node or the sentinel nil[T].
We can now examine how the procedure RB-DELETE-FIXUP restores the red-black
properties to the search tree.
RB-DELETE-FIXUP(T, x)
1 while x ≠ root[T] and color[x] = BLACK
2
do if x = left[p[x]]
3
then w ← right[p[x]]
4
if color[w] = RED
5

then color[w] ← BLACK

6

color[p[x]] ← RED

7

LEFT-ROTATE(T, p[x])

8
9

▹

Case 1

▹

Case 1

▹

Case 1

w ← right[p[x]]
▹ Case 1
if color[left[w]] = BLACK and color[right[w]] = BLACK

10

then color[w] ← RED

▹

Case 2

11
12

x p[x]
else if color[right[w]] = BLACK

▹

Case 2

▹

Case 3

▹

Case 3

13

then color[left[w]] ← BLACK

14

color[w] ← RED

15

RIGHT-ROTATE(T, w)

16

w ← right[p[x]]

▹

▹

Case 3
Case 3

17

color[w] ← color[p[x]]

▹

Case 4

18

color[p[x]] ← BLACK

▹

Case 4

19

color[right[w]] ← BLACK

20

LEFT-ROTATE(T, p[x])

21

x ← root[T]

▹

▹
▹

Case 4
Case 4
Case 4

