For example, if n = 16 (or, equivalently, k = 4), then revk(3) = 12, since the 4-bit
representation of 3 is 0011, which when reversed gives 1100, the 4-bit representation of 12.
a. Given a function revk that runs in Φ(k) time, write an algorithm to perform the bitreversal permutation on an array of length n = 2k in O(nk) time.
We can use an algorithm based on an amortized analysis to improve the running time of the
bit-reversal permutation. We maintain a "bit-reversed counter" and a procedure BITREVERSED-INCREMENT that, when given a bit-reversed-counter value a, produces
revk(revk(a) + 1). If k = 4, for example, and the bit-reversed counter starts at 0, then successive
calls to BIT-REVERSED-INCREMENT produce the sequence
0000, 1000, 0100, 1100, 0010, 1010, ... = 0, 8, 4, 12, 2, 10, ... .
b. Assume that the words in your computer store k-bit values and that in unit time, your
computer can manipulate the binary values with operations such as shifting left or
right by arbitrary amounts, bitwise-AND, bitwise-OR, etc. Describe an
implementation of the BIT-REVERSED-INCREMENT procedure that allows the bitreversal permutation on an n-element array to be performed in a total of O(n) time.
c. Suppose that you can shift a word left or right by only one bit in unit time. Is it still
possible to implement an O(n)-time bit-reversal permutation?

Problems 17-2: Making binary search dynamic
Binary search of a sorted array takes logarithmic search time, but the time to insert a new
element is linear in the size of the array. We can improve the time for insertion by keeping
several sorted arrays.
Specifically, suppose that we wish to support SEARCH and INSERT on a set of n elements.
Let k = ⌈lg(n + 1)⌉, and let the binary representation of n be nk-1, nk-2, ..., n0 . We have k
sorted arrays A0, A1, ..., Ak-1, where for i = 0, 1, ..., k - 1, the length of array Ai is 2i. Each array
is either full or empty, depending on whether ni = 1 or ni = 0, respectively. The total number
. Although each individual array is
of elements held in all k arrays is therefore
sorted, there is no particular relationship between elements in different arrays.
a. Describe how to perform the SEARCH operation for this data structure. Analyze its
worst-case running time.
b. Describe how to insert a new element into this data structure. Analyze its worst-case
and amortized running times.
c. Discuss how to implement DELETE.

