Figure 19.5: The execution of BINOMIAL-HEAP-UNION. (a) Binomial heaps H1 and H2. (b)
Binomial heap H is the output of BINOMIAL-HEAP-MERGE(H1, H2). Initially, x is the first
root on the root list of H . Because both x and next-x have degree 0 and key[x] < key[next-x],
case 3 applies. (c) After the link occurs, x is the first of three roots with the same degree, so
case 2 applies. (d) After all the pointers move down one position in the root list, case 4
applies, since x is the first of two roots of equal degree. (e) After the link occurs, case 3
applies. (f) After another link, case 1 applies, because x has degree 3 and next-x has degree 4.
This iteration of the while loop is the last, because after the pointers move down one position
in the root list, next-x = NIL.
The BINOMIAL-HEAP-UNION procedure has two phases. The first phase, performed by the
call of BINOMIAL-HEAP-MERGE, merges the root lists of binomial heaps H1 and H2 into a
single linked list H that is sorted by degree into monotonically increasing order. There might
be as many as two roots (but no more) of each degree, however, so the second phase links
roots of equal degree until at most one root remains of each degree. Because the linked list H
is sorted by degree, we can perform all the link operations quickly.
In detail, the procedure works as follows. Lines 1-3 start by merging the root lists of binomial
heaps H1 and H2 into a single root list H . The root lists of H1 and H2 are sorted by strictly

