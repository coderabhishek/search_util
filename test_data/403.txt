Exercises 19.2-7
Discuss the relationship between inserting into a binomial heap and incrementing a binary
number and the relationship between uniting two binomial heaps and adding two binary
numbers.

Exercises 19.2-8
In light of Exercise 19.2-7, rewrite BINOMIAL-HEAP-INSERT to insert a node directly into
a binomial heap without calling BINOMIAL-HEAP-UNION.

Exercises 19.2-9
Show that if root lists are kept in strictly decreasing order by degree (instead of strictly
increasing order), each of the binomial heap operations can be implemented without changing
its asymptotic running time.

Exercises 19.2-10
Find inputs that cause BINOMIAL-HEAP-EXTRACT-MIN, BINOMIAL-HEAPDECREASE-KEY, and BINOMIAL-HEAP-DELETE to run in Ω(lg n) time. Explain why the
worst-case running times of BINOMIAL-HEAP-INSERT, BINOMIAL-HEAP-MINIMUM,
but not Ω(lg n). (See Problem 3-5.)
and BINOMIAL-HEAP-UNION are

Problems 19-1: 2-3-4 heaps
Chapter 18 introduced the 2-3-4 tree, in which every internal node (other than possibly the
root) has two, three, or four children and all leaves have the same depth. In this problem, we
shall implement 2-3-4 heaps, which support the mergeable-heap operations.
The 2-3-4 heaps differ from 2-3-4 trees in the following ways. In 2-3-4 heaps, only leaves
store keys, and each leaf x stores exactly one key in the field key[x]. There is no particular
ordering of the keys in the leaves; that is, from left to right, the keys may be in any order.
Each internal node x contains a value small[x] that is equal to the smallest key stored in any
leaf in the subtree rooted at x. The root r contains a field height[r] that is the height of the tree.

