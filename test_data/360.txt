the new table in line 6. If n operations are performed, the worst-case cost of an operation is
O(n), which leads to an upper bound of O(n2) on the total running time for n operations.
This bound is not tight, because the cost of expanding the table is not borne often in the
course of n TABLE-INSERT operations. Specifically, the ith operation causes an expansion
only when i - 1 is an exact power of 2. The amortized cost of an operation is in fact O(1), as
we can show using aggregate analysis. The cost of the ith operation is

The total cost of n TABLE-INSERT operations is therefore

since there are at most n operations that cost 1 and the costs of the remaining operations form
a geometric series. Since the total cost of n TABLE-INSERT operations is 3n, the amortized
cost of a single operation is 3.
By using the accounting method, we can gain some feeling for why the amortized cost of a
TABLE-INSERT operation should be 3. Intuitively, each item pays for 3 elementary
insertions: inserting itself in the current table, moving itself when the table is expanded, and
moving another item that has already been moved once when the table is expanded. For
example, suppose that the size of the table is m immediately after an expansion. Then, the
number of items in the table is m/2, and the table contains no credit. We charge 3 dollars for
each insertion. The elementary insertion that occurs immediately costs 1 dollar. Another
dollar is placed as credit on the item inserted. The third dollar is placed as credit on one of the
m/2 items already in the table. Filling the table requires m/2 - 1 additional insertions, and thus,
by the time the table contains m items and is full, each item has a dollar to pay for its
reinsertion during the expansion.
The potential method can also be used to analyze a sequence of n TABLE-INSERT
operations, and we shall use it in Section 17.4.2 to design a TABLE-DELETE operation that
has O(1) amortized cost as well. We start by defining a potential function Φ that is 0
immediately after an expansion but builds to the table size by the time the table is full, so that
the next expansion can be paid for by the potential. The function
(17.5)
is one possibility. Immediately after an expansion, we have num[T] = size[T]/2, and thus Φ(T)
= 0, as desired. Immediately before an expansion, we have num[T] = size[T], and thus Φ(T) =
num[T], as desired. The initial value of the potential is 0, and since the table is always at least
half full, num[T] ≥ size[T]/2, which implies that Φ(T) is always nonnegative. Thus, the sum of
the amortized costs of n TABLE-INSERT operations is an upper bound on the sum of the
actual costs.

