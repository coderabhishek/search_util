Rewrite EUCLID in an iterative form that uses only a constant amount of memory (that is,
stores only a constant number of integer values).

Exercises 31.2-5
If a > b ≥ 0, show that the invocation EUCLID(a, b) makes at most 1 + logφ b recursive calls.
Improve this bound to 1 + logφ(b/ gcd(a, b)).

Exercises 31.2-6
What does EXTENDED-EUCLID(Fk+1, Fk) return? Prove your answer correct.

Exercises 31.2-7
Define the gcd function for more than two arguments by the recursive equation gcd(a0, a1, ...,
an) = gcd(a0, gcd(a1, a2, ..., an)). Show that the gcd function returns the same answer
independent of the order in which its arguments are specified. Also show how to find integers
x0, x1, ..., xn such that gcd(a0, a1, ..., an) = a0x0 + a1x1 + ··· + anxn. Show that the number of
divisions performed by your algorithm is O(n + lg(max {a0, a1, ..., an})).

Exercises 31.2-8
Define lcm(a1, a2, ..., an) to be the least common multiple of the n integers a1, a2, ..., an, that
is, the least nonnegative integer that is a multiple of each ai. Show how to compute lcm(a1, a2,
..., an) efficiently using the (two-argument) gcd operation as a subroutine.

Exercises 31.2-9
Prove that n1, n2, n3, and n4 are pairwise relatively prime if and only if
gcd(n1n2, n3n4) = gcd(n1n3, n2n4) = 1.
Show more generally that n1, n2, ..., nk are pairwise relatively prime if and only if a set of ⌈lg
k⌉ pairs of numbers derived from the ni are relatively prime.

