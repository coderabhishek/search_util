There is one detail worth noting about "empty" subtrees. Suppose that in a subtree with keys
ki, ..., kj, we select ki as the root. By the above argument, ki's left subtree contains the keys ki,
..., ki-1. It is natural to interpret this sequence as containing no keys. Bear in mind, however,
that subtrees also contain dummy keys. We adopt the convention that a subtree containing
keys ki, ..., ki-1 has no actual keys but does contain the single dummy key di-1. Symmetrically,
if we select kj as the root, then kj's right subtree contains the keys kj +1, ..., kj; this right subtree
contains no actual keys, but it does contain the dummy key dj.
Step 2: A recursive solution
We are ready to define the value of an optimal solution recursively. We pick our subproblem
domain as finding an optimal binary search tree containing the keys ki, ..., kj, where i ≥ 1, j ≤
n, and j ≥ i - 1. (It is when j = i - 1 that there are no actual keys; we have just the dummy key
di-1.) Let us define e[i, j] as the expected cost of searching an optimal binary search tree
containing the keys ki, ..., kj. Ultimately, we wish to compute e[1, n].
The easy case occurs when j = i - 1. Then we have just the dummy key di-1. The expected
search cost is e[i, i - 1] = qi-1.
When j ≥ i, we need to select a root kr from among ki, ..., kj and then make an optimal binary
search tree with keys ki, ..., kr-1 its left subtree and an optimal binary search tree with keys kr+1,
..., kj its right subtree. What happens to the expected search cost of a subtree when it becomes
a subtree of a node? The depth of each node in the subtree increases by 1. By equation
(15.16), the expected search cost of this subtree increases by the sum of all the probabilities in
the subtree. For a subtree with keys ki, ..., kj, let us denote this sum of probabilities as
(15.17)

Thus, if kr is the root of an optimal subtree containing keys ki, ..., kj, we have
e[i, j ] = pr + (e[i, r - 1] + w(i, r - 1)) + (e[r + 1, j] + w(r + 1, j)).
Noting that
w(i, j) = w(i, r - 1) + pr + w(r + 1, j),
we rewrite e[i, j] as
(15.18)
The recursive equation (15.18) assumes that we know which node kr to use as the root. We
choose the root that gives the lowest expected search cost, giving us our final recursive
formulation:
(15.19)

