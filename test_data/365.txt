Exercises 17.4-1
Suppose that we wish to implement a dynamic, open-address hash table. Why might we
consider the table to be full when its load factor reaches some value α that is strictly less than
1? Describe briefly how to make insertion into a dynamic, open-address hash table run in such
a way that the expected value of the amortized cost per insertion is O(1). Why is the expected
value of the actual cost per insertion not necessarily O(1) for all insertions?

Exercises 17.4-2
Show that if αi-1 ≥ 1/2 and the ith operation on a dynamic table is TABLE-DELETE, then the
amortized cost of the operation with respect to the potential function (17.6) is bounded above
by a constant.

Exercises 17.4-3
Suppose that instead of contracting a table by halving its size when its load factor drops below
1/4, we contract it by multiplying its size by 2/3 when its load factor drops below 1/3. Using
the potential function
Φ(T) = |2 · num[T] - size[T]| ,
show that the amortized cost of a TABLE-DELETE that uses this strategy is bounded above
by a constant.

Problems 17-1: Bit-reversed binary counter
Chapter 30 examines an important algorithm called the Fast Fourier Transform, or FFT. The
first step of the FFT algorithm performs a bit-reversal permutation on an input array A[0 n
- 1] whose length is n = 2k for some nonnegative integer k. This permutation swaps elements
whose indices have binary representations that are the reverse of each other.
We can express each index a as a k-bit sequence
define
revk( ak-1, ak-2, ..., a0 ) =
thus,

a0, a1, ..., ak-1 ;

ak-1, ak-2, ..., a0 , where

. We

