given the coefficients a0, a1, . . . , an and a value for x:
1
2
3
4
5

y ← 0
i ← n
while i ≥ 0
do y ← ai + x · y
i ← i - 1

a. What is the asymptotic running time of this code fragment for Horner's rule?
b. Write pseudocode to implement the naive polynomial-evaluation algorithm that
computes each term of the polynomial from scratch. What is the running time of this
algorithm? How does it compare to Horner's rule?
c. Prove that the following is a loop invariant for the while loop in lines 3 -5.
At the start of each iteration of the while loop of lines 3-5,

Interpret a summation with no terms as equaling 0. Your proof should follow the
structure of the loop invariant proof presented in this chapter and should show that, at
termination,
.
d. Conclude by arguing that the given code fragment correctly evaluates a polynomial
characterized by the coefficients a0, a1, . . . , an.

Problems 2-4: Inversions
Let A[1 n] be an array of n distinct numbers. If i < j and A[i] > A[j], then the pair (i, j) is
called an inversion of A.
a. List the five inversions of the array 2, 3, 8, 6, 1 .
b. What array with elements from the set {1, 2, . . . , n} has the most inversions? How
many does it have?
c. What is the relationship between the running time of insertion sort and the number of
inversions in the input array? Justify your answer.
d. Give an algorithm that determines the number of inversions in any permutation on n
elements in Θ(n lg n) worst-case time. (Hint: Modify merge sort.)

[6]

We shall see in Chapter 3 how to formally interpret equations containing Θ-notation.

