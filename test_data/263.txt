The idea behind OS-SELECT is similar to that of the selection algorithms in Chapter 9. The
value of size[left[x]] is the number of nodes that come before x in an inorder tree walk of the
subtree rooted at x. Thus, size[left[x]] + 1 is the rank of x within the subtree rooted at x.
In line 1 of OS-SELECT, we compute r, the rank of node x within the subtree rooted at x. If i
= r, then node x is the ith smallest element, so we return x in line 3. If i< r, then the ith
smallest element is in x's left subtree, so we recurse on left[x] in line 5. If i > r, then the ith
smallest element is in x's right subtree. Since there are r elements in the subtree rooted at x
that come before x's right subtree in an inorder tree walk, the ith smallest element in the
subtree rooted at x is the (i – r)th smallest element in the subtree rooted at right[x]. This
element is determined recursively in line 6.
To see how OS-SELECT operates, consider a search for the 17th smallest element in the
order-statistic tree of Figure 14.1. We begin with x as the root, whose key is 26, and with i =
17. Since the size of 26's left subtree is 12, its rank is 13. Thus, we know that the node with
rank 17 is the 17 - 13 = 4th smallest element in 26's right subtree. After the recursive call, x is
the node with key 41, and i = 4. Since the size of 41's left subtree is 5, its rank within its
subtree is 6. Thus, we know that the node with rank 4 is the 4th smallest element in 41's left
subtree. After the recursive call, x is the node with key 30, and its rank within its subtree is 2.
Thus, we recurse once again to find the 4 × 2 = 2nd smallest element in the subtree rooted at
the node with key 38. We now find that its left subtree has size 1, which means it is the
second smallest element. Thus, a pointer to the node with key 38 is returned by the procedure.
Because each recursive call goes down one level in the order-statistic tree, the total time for
OS-SELECT is at worst proportional to the height of the tree. Since the tree is a red-black
tree, its height is O(lg n), where n is the number of nodes. Thus, the running time of OSSELECT is O(lg n) for a dynamic set of n elements.
Determining the rank of an element
Given a pointer to a node x in an order-statistic tree T, the procedure OS-RANK returns the
position of x in the linear order determined by an inorder tree walk of T.
OS-RANK(T, x)
1 r ← size[left[x]] + 1
2 y ← x
3 while y ≠ root[T]
4
do if y = right[p[y]]
5
then r ← r + size[left[p[y]]] + 1
6
y ← p[y]
7 return r

The procedure works as follows. The rank of x can be viewed as the number of nodes
preceding x in an inorder tree walk, plus 1 for x itself. OS-RANK maintains the following
loop invariant:
•

At the start of each iteration of the while loop of lines 3–6, r is the rank of key[x] in
the subtree rooted at node y.

We use this loop invariant to show that OS-RANK works correctly as follows:

