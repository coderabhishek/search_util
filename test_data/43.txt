the insertion sort algorithm from Chapter 2 immediately yields an O(n2) upper bound on the
worst-case running time: the cost of each iteration of the inner loop is bounded from above by
O(1) (constant), the indices i and j are both at most n, and the inner loop is executed at most
once for each of the n2 pairs of values for i and j.
Since O-notation describes an upper bound, when we use it to bound the worst-case running
time of an algorithm, we have a bound on the running time of the algorithm on every input.
Thus, the O(n2) bound on worst-case running time of insertion sort also applies to its running
time on every input. The Θ(n2) bound on the worst-case running time of insertion sort,
however, does not imply a Θ(n2) bound on the running time of insertion sort on every input.
For example, we saw in Chapter 2 that when the input is already sorted, insertion sort runs in
Θ(n) time.
Technically, it is an abuse to say that the running time of insertion sort is O(n2), since for a
given n, the actual running time varies, depending on the particular input of size n. When we
say "the running time is O(n2)," we mean that there is a function f(n) that is O(n2) such that for
any value of n, no matter what particular input of size n is chosen, the running time on that
input is bounded from above by the value f(n). Equivalently, we mean that the worst-case
running time is O(n2).
Ω-notation
Just as O-notation provides an asymptotic upper bound on a function, Ω-notation provides an
asymptotic lower bound. For a given function g(n), we denote by Ω(g(n)) (pronounced "bigomega of g of n" or sometimes just "omega of g of n") the set of functions
Ω(g(n)) = {f(n): there exist positive constants c and n0 such that 0 ≤ cg(n) ≤ f(n) for all n ≥
n0}.
The intuition behind Ω-notation is shown in Figure 3.1(c). For all values n to the right of n0,
the value of f(n) is on or above cg(n).
From the definitions of the asymptotic notations we have seen thus far, it is easy to prove the
following important theorem (see Exercise 3.1-5).
Theorem 3.1
For any two functions f(n) and g(n), we have f(n) = Θ(g(n)) if and only if f(n) = O(g(n)) and
f(n) = Ω(g(n)).

As an example of the application of this theorem, our proof that an2 + bn + c = Θ(n2) for any
constants a, b, and c, where a > 0, immediately implies that an2 + bn + c = Ω(n2) and an2 + bn
+ c = O(n2). In practice, rather than using Theorem 3.1 to obtain asymptotic upper and lower
bounds from asymptotically tight bounds, as we did for this example, we usually use it to
prove asymptotically tight bounds from asymptotic upper and lower bounds.

