Proof After permuting the input array, we have achieved a situation identical to that of the
probabilistic analysis of HIRE-ASSISTANT.

The comparison between Lemmas 5.2 and 5.3 captures the difference between probabilistic
analysis and randomized algorithms. In Lemma 5.2, we make an assumption about the input.
In Lemma 5.3, we make no such assumption, although randomizing the input takes some
additional time. In the remainder of this section, we discuss some issues involved in randomly
permuting inputs.
Randomly permuting arrays
Many randomized algorithms randomize the input by permuting the given input array. (There
are other ways to use randomization.) Here, we shall discuss two methods for doing so. We
assume that we are given an array A which, without loss of generality, contains the elements 1
through n. Our goal is to produce a random permutation of the array.
One common method is to assign each element A[i] of the array a random priority P[i], and
then sort the elements of A according to these priorities. For example if our initial array is A =
<1, 2, 3, 4> and we choose random priorities P = <36, 3, 97, 19>, we would produce an array
B = <2, 4, 1, 3>, since the second priority is the smallest, followed by the fourth, then the first,
and finally the third. We call this procedure PERMUTE-BY-SORTING:
PERMUTE-BY-SORTING(A)
1 n ← length[A]
2 for i ← 1 to n
3
do P[i] = RANDOM(1, n3)
4 sort A, using P as sort keys
5 return A

Line 3 chooses a random number between 1 and n3. We use a range of 1 to n3 to make it likely
that all the priorities in P are unique. (Exercise 5.3-5 asks you to prove that the probability
that all entries are unique is at least 1 - 1/n, and Exercise 5.3-6 asks how to implement the
algorithm even if two or more priorities are identical.) Let us assume that all the priorities are
unique.
The time-consuming step in this procedure is the sorting in line 4. As we shall see in Chapter
8, if we use a comparison sort, sorting takes Ω(n lg n) time. We can achieve this lower bound,
since we have seen that merge sort takes Θ(n lg n) time. (We shall see other comparison sorts
that take Θ(n lg n) time in Part II.) After sorting, if P[i] is the jth smallest priority, then A[i]
will be in position j of the output. In this manner we obtain a permutation. It remains to prove
that the procedure produces a uniform random permutation, that is, that every permutation of
the numbers 1 through n is equally likely to be produced.
Lemma 5.4
Procedure PERMUTE-BY-SORTING produces a uniform random permutation of the input,
assuming that all priorities are distinct.

