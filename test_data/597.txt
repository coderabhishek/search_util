4
5
6

M ← M
until
return M

shortest augmenting paths with respect to M
(P1
P2 ··· Pk)

The remainder of this problem asks you to analyze the number of iterations in the algorithm
(that is, the number of iterations in the repeat loop) and to describe an implementation of line
3.
b. Given two matchings M and M* in G, show that every vertex in the graph G' = (V, M
M*) has degree at most 2. Conclude that G' is a disjoint union of simple paths or
cycles. Argue that edges in each such simple path or cycle belong alternately to M or
M*. Prove that if |M| ≤ |M*|, then M M* contains at least |M*| - |M| vertex-disjoint
augmenting paths with respect to M.
Let l be the length of a shortest augmenting path with respect to a matching M, and let P1, P2,
. . . ,Pk be a maximum set of vertex-disjoint augmenting paths of length l with respect to M.
Let M' = M (P1 ··· Pk), and suppose that P is a shortest augmenting path with respect to
M'.
c. Show that if P is vertex-disjoint from P1, P2, . . . ,Pk, then P has more than l edges.
d. Now suppose that P is not vertex-disjoint from P1, P2, . . . ,Pk. Let A be the set of
edges (M M') P. Show that A = (P1 P2 ··· Pk) P and that |A| ≥ (k + 1)l.
Conclude that P has more than l edges.
e. Prove that if a shortest augmenting path for M has length l, the size of the maximum
matching is at most |M| + |V| /l.
f. Show that the number of repeat loop iterations in the algorithm is at most
. (Hint:
By how much can M grow after iteration number ?)
g. Give an algorithm that runs in O(E) time to find a maximum set of vertex-disjoint
shortest augmenting paths P1, P2, . . . ,Pk for a given matching M. Conclude that the
.
total running time of HOPCROFT-KARP is

Chapter notes
Ahuja, Magnanti, and Orlin [7], Even [87], Lawler [196], Papadimitriou and Steiglitz [237],
and Tarjan [292] are good references for network flow and related algorithms. Goldberg,
Tardos, and Tarjan [119] also provide a nice survey of algorithms for network-flow problems,
and Schrijver [267] has written an interesting review of historical developments in the field of
network flows.
The Ford-Fulkerson method is due to Ford and Fulkerson [93], who originated the formal
study of many of the problems in the area of network flow, including the maximum-flow and
bipartite-matching problems. Many early implementations of the Ford-Fulkerson method
found augmenting paths using breadth-first search; Edmonds and Karp [86], and
independently Dinic [76], proved that this strategy yields a polynomial-time algorithm. A
related idea, that of using "blocking flows," was also first developed by Dinic [76]. Karzanov
[176] first developed the idea of preflows. The push-relabel method is due to Goldberg [117]
and Goldberg and Tarjan [121]. Goldberg and Tarjan gave an O(V3)-time algorithm that uses
a queue to maintain the set of overflowing vertices, as well as an algorithm that uses dynamic
trees to achieve a running time of O(VE lg(V2/E + 2)). Several other researchers have

