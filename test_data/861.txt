edges for each wire whose fan-out is k; there is a directed edge (u, v) if a wire connects the
output of element u to an input of element v. Then G must be acyclic.
A truth assignment for a boolean combinational circuit is a set of boolean input values. We
say that a one-output boolean combinational circuit is satisfiable if it has a satisfying
assignment: a truth assignment that causes the output of the circuit to be 1. For example, the
circuit in Figure 34.8(a) has the satisfying assignment x1 = 1, x2 = 1, x3 = 0 , and so it is
satisfiable. As Exercise 34.3-1 asks you to show, no assignment of values to x1, x2, and x3
causes the circuit in Figure 34.8(b) to produce a 1 output; it always produces 0, and so it is
unsatisfiable.
The circuit-satisfiability problem is, "Given a boolean combinational circuit composed of
AND, OR, and NOT gates, is it satisfiable?" In order to pose this question formally, however,
we must agree on a standard encoding for circuits. The size of a boolean combinational circuit
is the number of boolean combinational elements plus the number of wires in the circuit. One
can devise a graphlike encoding that maps any given circuit C into a binary string C
whose length is polynomial in the size of the circuit itself. As a formal language, we can
therefore define
CIRCUIT-SAT = { C

: C is a satisfiable boolean combinational circuit}.

The circuit-satisfiability problem arises in the area of computer-aided hardware optimization.
If a subcircuit always produces 0, that subcircuit can be replaced by a simpler subcircuit that
omits all logic gates and provides the constant 0 value as its output. It would be helpful to
have a polynomial-time algorithm for this problem.
Given a circuit C, we might attempt to determine whether it is satisfiable by simply checking
all possible assignments to the inputs. Unfortunately, if there are k inputs, there are 2k possible
assignments. When the size of C is polynomial in k, checking each one takes â„¦(2k) time,
which is superpolynomial in the size of the circuit.[7] In fact, as has been claimed, there is
strong evidence that no polynomial-time algorithm exists that solves the circuit-satisfiability
problem because circuit satisfiability is NP-complete. We break the proof of this fact into two
parts, based on the two parts of the definition of NP-completeness.
Lemma 34.5
The circuit-satisfiability problem belongs to the class NP.
Proof We shall provide a two-input, polynomial-time algorithm A that can verify CIRCUITSAT. One of the inputs to A is (a standard encoding of) a boolean combinational circuit C.
The other input is a certificate corresponding to an assignment of boolean values to the wires
in C. (See Exercise 34.3-4 for a smaller certificate.)
The algorithm A is constructed as follows. For each logic gate in the circuit, it checks that the
value provided by the certificate on the output wire is correctly computed as a function of the
values on the input wires. Then, if the output of the entire circuit is 1, the algorithm outputs 1,
since the values assigned to the inputs of C provide a satisfying assignment. Otherwise, A
outputs 0.

