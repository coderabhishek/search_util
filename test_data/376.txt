Proof If a B-tree has height h, the root contains at least one key and all other nodes contain at
least t - 1 keys. Thus, there are at least 2 nodes at depth 1, at least 2t nodes at depth 2, at least
2t2 nodes at depth 3, and so on, until at depth h there are at least 2th-1 nodes. Figure 18.4
illustrates such a tree for h = 3. Thus, the number n of keys satisfies the inequality

Figure 18.4: A B-tree of height 3 containing a minimum possible number of keys. Shown
inside each node x is n[x].
By simple algebra, we get th â‰¤ (n + 1)/2. Taking base-t logarithms of both sides proves the
theorem.

Here we see the power of B-trees, as compared to red-black trees. Although the height of the
tree grows as O(lg n) in both cases (recall that t is a constant), for B-trees the base of the
logarithm can be many times larger. Thus, B-trees save a factor of about lg t over red-black
trees in the number of nodes examined for most tree operations. Since examining an arbitrary
node in a tree usually requires a disk access, the number of disk accesses is substantially
reduced.
Exercises 18.1-1
Why don't we allow a minimum degree of t = 1?

Exercises 18.1-2
For what values of t is the tree of Figure 18.1 a legal B-tree?

