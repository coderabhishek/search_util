The following lemma shows why red-black trees make good search trees.
Lemma 13.1
A red-black tree with n internal nodes has height at most 2 lg(n + 1).
Proof We start by showing that the subtree rooted at any node x contains at least 2bh(x) - 1
internal nodes. We prove this claim by induction on the height of x. If the height of x is 0, then
x must be a leaf (nil[T]), and the subtree rooted at x indeed contains at least 2bh(x) - 1 = 20 - 1 =
0 internal nodes. For the inductive step, consider a node x that has positive height and is an
internal node with two children. Each child has a black-height of either bh(x) or bh(x) - 1,
depending on whether its color is red or black, respectively. Since the height of a child of x is
less than the height of x itself, we can apply the inductive hypothesis to conclude that each
child has at least 2bh(x)-1 -1 internal nodes. Thus, the subtree rooted at x contains at least (2bh(x)1
- 1) + (2bh(x)-1 - 1) + 1 = 2bh(x) - 1 internal nodes, which proves the claim.
To complete the proof of the lemma, let h be the height of the tree. According to property 4, at
least half the nodes on any simple path from the root to a leaf, not including the root, must be
black. Consequently, the black-height of the root must be at least h/2; thus,
n ≥ 2h/2 - 1.
Moving the 1 to the left-hand side and taking logarithms on both sides yields lg(n + 1) ≥ h/2,
or h ≤ 2 lg(n + 1).

An immediate consequence of this lemma is that the dynamic-set operations SEARCH,
MINIMUM, MAXIMUM, SUCCESSOR, and PREDECESSOR can be implemented in O(lg
n) time on red-black trees, since they can be made to run in O(h) time on a search tree of
height h (as shown in Chapter 12) and any red-black tree on n nodes is a search tree with
height O(lg n). (Of course, references to NIL in the algorithms of Chapter 12 would have to
be replaced by nil[T].) Although the algorithms TREE-INSERT and TREE-DELETE from
Chapter 12 run in O(lg n) time when given a red-black tree as input, they do not directly
support the dynamic-set operations INSERT and DELETE, since they do not guarantee that
the modified binary search tree will be a red-black tree. We shall see in Sections 13.3 and
13.4, however, that these two operations can indeed be supported in O(lg n) time.
Exercises 13.1-1
In the style of Figure 13.1(a), draw the complete binary search tree of height 3 on the keys {1,
2, ..., 15}. Add the NIL leaves and color the nodes in three different ways such that the blackheights of the resulting red-black trees are 2, 3, and 4.

Exercises 13.1-2

