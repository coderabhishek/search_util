Inserting a node
The following procedure inserts node x into Fibonacci heap H , assuming that the node has
already been allocated and that key[x] has already been filled in.
FIB-HEAP-INSERT(H, x)
1 degree[x] ← 0
2 p[x] ← NIL
3 child[x] ← NIL
4 left[x] ← x
5 right[x] ← x
6 mark[x] ← FALSE
7 concatenate the root list containing x with root list H
8 if min[H] = NIL or key[x] < key[min[H]]
9
then min[H] ← x
10 n[H] ← n[H] + 1

After lines 1-6 initialize the structural fields of node x, making it its own circular, doubly
linked list, line 7 adds x to the root list of H in O(1) actual time. Thus, node x becomes a
single-node min-heap-ordered tree, and thus an unordered binomial tree, in the Fibonacci
heap. It has no children and is unmarked. Lines 8-9 then update the pointer to the minimum
node of Fibonacci heap H if necessary. Finally, line 10 increments n[H] to reflect the addition
of the new node. Figure 20.2 shows a node with key 21 inserted into the Fibonacci heap of
Figure 20.1.

Figure 20.2: Inserting a node into a Fibonacci heap. (a) A Fibonacci heap H. (b) Fibonacci
heap H after the node with key 21 has been inserted. The node becomes its own min-heapordered tree and is then added to the root list, becoming the left sibling of the root.
Unlike the BINOMIAL-HEAP-INSERT procedure, FIB-HEAP-INSERT makes no attempt to
consolidate the trees within the Fibonacci heap. If k consecutive FIB-HEAP-INSERT
operations occur, then k single-node trees are added to the root list.
To determine the amortized cost of FIB-HEAP-INSERT, let H be the input Fibonacci heap
and H′ be the resulting Fibonacci heap. Then, t(H′) = t(H)+1 and m(H′) = m(H), and the
increase in potential is
((t(H) + 1) + 2 m(H)) - (t(H) + 2 m(H)) = 1.
Since the actual cost is O(1), the amortized cost is O(1) + 1 = O(1).
Finding the minimum node
The minimum node of a Fibonacci heap H is given by the pointer min[H ], so we can find the
minimum node in O(1) actual time. Because the potential of H does not change, the amortized
cost of this operation is equal to its O(1) actual cost.
Uniting two Fibonacci heaps

