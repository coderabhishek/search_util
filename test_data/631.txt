Figure 27.14: Permutation networks. (a) The permutation network P2, which consists of a
single switch that can be set in either of the two ways shown. (b) The recursive construction
of P8 from 8 switches and two P4's. The switches and P4's are set to realize the permutation π
= 4, 7,3, 5,1, 6, 8, 2 .
a. Argue that if we replace each comparator in a sorting network with the switch of
Figure 27.14(a), the resulting network is a permutation network. That is, for any
permutation π, there is a way to set the switches in the network so that input i is
connected to output π(i).
Figure 27.14(b) shows the recursive construction of an 8-input, 8-output permutation network
P8 that uses two copies of P4 and 8 switches. The switches have been set to realize the
permutation π = π(1), π(2),..., π(8) = 4, 7, 3, 5, 1, 6, 8, 2 , which requires (recursively)
that the top P4 realize 4, 2, 3, 1 and the bottom P4 realize 2, 3, 1, 4 .
b. Show how to realize the permutation 5, 3, 4, 6, 1, 8, 2, 7 on P8 by drawing the
switch settings and the permutations performed by the two P4's.
Let n be an exact power of 2. Define Pn recursively in terms of two Pn/2's in a manner similar
to the way we defined P8.
c. Describe an O(n)-time (ordinary random-access machine) algorithm that sets the n
switches connected to the inputs and outputs of Pn and specifies the permutations that
must be realized by each Pn/2 in order to accomplish any given n-element permutation.
Prove that your algorithm is correct.
d. What are the depth and size of Pn? How long does it take on an ordinary randomaccess machine to compute all switch settings, including those within the Pn/2's?
e. Argue that for n > 2, any permutation network-not just Pn-must realize some
permutation by two distinct combinations of switch settings.

Chapter notes
Knuth [185] contains a discussion of sorting networks and charts their history. They
apparently were first explored in 1954 by P. N. Armstrong, R. J. Nelson, and D. J. O'Connor.
In the early 1960's, K. E. Batcher discovered the first network capable of merging two
sequences of n numbers in O(lg n) time. He used odd-even merging (see Problem 27-2), and

